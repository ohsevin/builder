<!DOCTYPE html>     
<html lang="en">  
<head>
    <meta charset="UTF-8">
    <!--<meta name="viewport" content="width=980, user-scalable=yes">-->

    <meta id="myViewport"  name="viewport" content="width=device-width, initial-scale=1.0">
    
    <title>ezStack builder</title>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"></script>
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jstree/3.3.3/jstree.min.js"></script>
    <script src="https://pagecdn.io/lib/ace/1.4.6/ace.js" integrity="sha256-CVkji/u32aj2TeC+D13f7scFSIfphw2pmu4LaKWMSY8=" crossorigin="anonymous"></script>
    <script src="/tinymce/js/tinymce/tinymce.min.js" referrerpolicy="origin"></script>

    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <!--<link rel="stylesheet" href="/theme/startbootstrap-sb-admin-2-gh-pages/dist/css/sb-admin-2.min.css">-->
    <link href="//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

      
    <!--Quill-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.7/quill.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.7/quill.snow.css" rel="stylesheet">  

    <!-- theme  -->
    <link rel="stylesheet" href="/jstree/dist/themes/default/style.min.css" />
  
    <script src="/clientJs/custom.js"></script>
    <link rel="stylesheet" href="/clientCSS/custom.css" />

    <script src="ansi_up/ansi_up.js" type="text/javascript"></script>

    <!--------------------------------------Builder Functions--------------------------------------> 
    <script type = "text/javascript" language = "javascript" >

        var pickedLib = '#';
        var lastStyleSheet;
        var bottomHiddenFlag = true;
        var bottomMinimizedFlag = true;
        // <!-- doc.ready() -->
        $(document).ready(function() {

            if (screen.width < 1050) {
                var mvp = document.getElementById('myViewport');
                mvp.setAttribute('content','user-scalable=yes,width=1050, initial-scale=1');
            }

            $('#jobForm').on('submit', function(e){ e.preventDefault()});
            $('#sysForm').on('submit', function(e){ e.preventDefault()});

            var currentSysId = "";
            if (typeof localStorage['dashSystemDropItemClicked'] !== 'undefined'  ){
                currentSysId = JSON.parse(localStorage['dashSystemDropItemClicked']).id ;
                $("#dashSys").val(currentSysId);
            };

            //create main tree
            $("#jstree_div").jstree({
                "core" : {
                    "themes": {
                        "name": "default",
                        "dots": true,
                        "icons": true
                    },
                    "data" : {
                        'url' : function (node) {
                                var searchText = $("#searchInput").val();
                                return node.id === '#' ?
                                    'jobsTree?searchSt='+searchText + "&currentSysId="+currentSysId :
                                    'jobsTree';
                            },
                        'data' : function (node) {return { 'id' : node.id };}
                    },
                    'check_callback': function(operation, node, node_parent, node_position, more) {
                        if (operation === "copy_node") {

                            const targetNodeId = node_parent.id;
                            const pos = node_position;
                            const targetNode =  $('#jstree_div').jstree(true).get_node(targetNodeId);
                            $('#copyModal_newPosition').val(pos);

                            return showCopyModal(node, targetNodeId,targetNode );

                        }
                        return true;  //allow all other operations
                    }
                },
                "types" : {
                    "system" : {
                        "icon" : "fa fa-server ",
                        "a_attr": { class : " systemRow "}
                    },
                    "job" : {
                        "icon" : "fa fa-check-circle-o jobRow"
                    },
                    "needfull" : {
                        "icon" : "fa fa-wrench", //fa-play-circle-o
                        "a_attr": { class : " needfull "},
                        "li_attr": { class : " needfull "}
                    },
                    "rerunnable" : {
                        "icon" : "fa fa-repeat rerunnableRow",
                        "a_attr": { class : " rerunnableRow "}
                    },
                    "root" : {
                        "icon" : "fa fa-folder"
                    },
                    "disabled" : {
                        "icon" : "fa fa-times-circle-o disabledRow",
                        "li_attr": { class : "  "}
                    }
                },
                "sort" : function(a, b) {
                    a1 = this.get_node(a);
                    b1 = this.get_node(b);
                    return (a1.original.sort < b1.original.sort) ? -1 : 1;

                },
                "state": { "key": "myTree" },
                "dnd": {
                    check_while_dragging: false,
                    always_copy:true,
                    large_drop_target:true
                },
                "plugins" : [ "sort",  "state", "types", "dnd", "wholerow"]
            }).on(  'create_node.jstree', function(e, data) {
                //console.log('saved');
            }  );


            function showCopyModal(node, targetNodeId,targetNode ){

                if(targetNode.id === "#") {
                    return false;
                }else{
                    $('#copyModal_listOfIds').val(node.original.id);

                    var fromTree;
                    if(node.parents[node.parents.length - 2] === 'lib'){
                        fromTree = $('#jslibtree_div');
                        $('#copyModal_lib').val(pickedLib)
                    }else{
                        fromTree = $('#jstree_div');
                        $('#copyModal_lib').val('local')
                    }
                    const treeNode = fromTree.jstree(true).get_node(node.original.id);

                    var childs = treeNode.children_d;
                    var listOfIds = [node.original.id];
                    $("#copyInfoText").html("<b>"+node.original.text + "</b> will be copied to <b>" + targetNode.text+"</b>");

                    if (childs.length > 0 ){
                        listOfIds += ';' + childs.join(';');
                        $('#copyModal_listOfIds').val(listOfIds);
                        $('#copyModalForm').show()
                    }else{
                        $('#copyModalForm').hide()
                    }

                    if(targetNode.id === "local"){
                        $('#copyModal_newParent').val('#')
                    }else{
                        $('#copyModal_newParent').val(targetNode.id );  //targetId
                    }

                    $('#copyModal').modal('show');
                    $('#copyChildrenCb').prop('checked', false);

                    return false;
                }
            }

            //Create Lib Tree
            $("#jslibtree_div").jstree({
                "core" : {
                    "themes": {
                        "name": "default",
                        "dots": true,
                        "icons": true
                    },
                    "data" : {
                        'url' : function (node) {return 'getLib';},
                        'data' : function (node) {return { 'id' : node.id, 'pickedLib' : pickedLib };}
                    },
                    'check_callback': function(operation, node, node_parent, node_position, more) {
                        if (operation === "copy_node") {

                            const targetNodeId = node_parent.id;
                            const pos = node_position;
                            const targetNode =  $('#jstree_div').jstree(true).get_node(targetNodeId);
                            $('#copyModal_newPosition').val(pos);

                            showLibCopyModal(node, targetNodeId,targetNode )



                        }
                        return true;  //allow all other operations
                    }
                },
                "types" : {
                    "system" : {
                        "icon" : "fa fa-server ",
                        "a_attr": { class : " systemRow "}
                    },
                    "job" : {
                        "icon" : "fa fa-wrench" //fa--play-circle-o
                    },
                    "rerunnable" : {
                        "icon" : "fa fa-repeat rerunnableRow",
                        "a_attr": { class : " rerunnableRow "}},
                    "root" : {
                        "icon" : "fa fa-folder"
                    },

                    "disabled" : {
                        "icon" : "fa fa-times-circle-o disabledRow",
                        "li_attr": { class : "  "}
                    }
                },
                "sort" : function(a, b) {
                    a1 = this.get_node(a);
                    b1 = this.get_node(b);
                    return (a1.original.sort < b1.original.sort) ? -1 : 1;
                },
//              "state": { "key": "myLibTree" },
                "dnd": {
                    check_while_dragging: false,
                    always_copy:true,
                    large_drop_target:true
                },
                "plugins" : [ "sort",  "state", "types", "dnd", "wholerow"]
            }).on(  'create_node.jstree', function(e, data) {
                //console.log('saved');
            }  );

            function showLibCopyModal(node, targetNodeId,targetNode ){

                if(  targetNode.id === "#"){
                    return false;
                }else{

                    var treeNode = $('#jstree_div').jstree(true).get_node(node.original.id);
                    if(!treeNode || node.original.comType !== "system"){
                        alert("Only systems from the working tree can be copied into libraries at this time");
                    }else{
                        $('#copyTiLibModal_listOfIds').val(node.original.id);

                        var childs = treeNode.children_d;
                        var listOfIds = [node.original.id];
                        $("#copyToLibInfoText").html("<b>"+node.original.text + "</b> will be copied to <b>" + targetNode.text+"</b>");

                        listOfIds += ';' + childs.join(';');

                        $('#copyToLibModal_listOfIds').val(listOfIds);


                        $('#copyToLibModalForm').show()

                        $('#copyToLibModal_newParent').val(targetNode.id );  //targetId

                        $('#copyToLibModal').modal('show');
                        $('#copyToLibChildrenCb').prop('checked', false);
                    }
                    return false;
                }
            }

            //Lib Tree Collapse
            $("#treeCollapse").on("click",function(){
                const container = $('#rowContainer');
                setLibWindowWidth(20, container);
            });


            $("#copyConfirmButton").on("click",function() {
                var mydata = {};
                mydata.ids = $('#copyModal_listOfIds').val();
                mydata.parent = $('#copyModal_newParent').val();
                mydata.pos = $('#copyModal_newPosition').val();
                mydata.lib = $('#copyModal_lib').val();

                if(!$('#copyChildrenCb').is(':checked')){
                    if(mydata.ids.split(';').length > 1){
                        mydata.ids = mydata.ids.split(';')[0]
                    }
                }

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/copy',
                    data: JSON.stringify(mydata)
                }).done(function (e) {
                    //console.log('copy refresh' );
                    $('#jstree_div').jstree(true).refresh(true);
                }).fail(function (e) {
                    console.log('copy failed' );
                    console.log(e );
                    $('#jstree_div').jstree(true).refresh();
                });
                $('#copyModal').modal('toggle');
            });

            $("#copyToLibConfirmButton").on("click",function() {
                var mydata = {};
                mydata.ids = $('#copyToLibModal_listOfIds').val();
                mydata.parent = $('#copyToLibModal_newParent').val();
                mydata.lib = pickedLib;

                if(!$('#copyToLibChildrenCb').is(':checked')){
                    if(mydata.ids.split(';').length > 1){
                        mydata.ids = mydata.ids.split(';')[0]
                    }
                }

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/copyToLib',
                    data: JSON.stringify(mydata)
                }).done(function (e) {
                    //console.log('copy refresh' );
                    $('#jslibtree_div').jstree(true).refresh();
                    $('#copyToLibModal').modal('toggle');
                }).fail(function (e) {
                    console.log('copy to lib failed' );
                    console.log(e );
                    $('#jstree_div').jstree(true).refresh();
                });

            });

            //Library pick
//            $("#LibDropDownPick").on('click', function(){
//                libDropDown();
//            });
//            $("#LibDropDownPickIcon").on('click', function(){
//                libDropDown();
//            });
            function getLibs(){

                $.ajax({
                    type: 'get',
                    data: "",
                    dataType: "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/libraryList',
                    success: function (data) {
                        const dataObj = JSON.parse(data);
                        const priArr = dataObj.pri;
                        const pubArr = dataObj.pub;

//                        const LibDropDownListDiv = $("#LibDropDownList")[0];

                        var libListHTML = '';
                        priArr.forEach(function (dir) {

                            libListHTML += '<li class="nav-item"><a class="nav-link libListRow" data-id="private/' + dir + '" href="#"><i class="fa fa-book fa-fw"></i>private/' + dir + '</a></li>';
                        })
                        pubArr.forEach(function (dir) {
                            libListHTML += '<li class="nav-item"><a class="nav-link libListRow" data-id="public/' + dir + '" href="#"><i class="fa fa-book fa-fw"></i>public/' + dir + '</a></li>';

                        })

                        $("#LibListNav").html(libListHTML)

                        //Add click events to new row
                        $('.libListRow').on('click', function(){
                            var pickedDir = $(this).attr('data-ID');
                            pickedLib = pickedDir;

                            $("#componentsRowContainer").show();
                            $("#jobScreen").hide();
                            $("#sysScreen").hide();
                            $("#dashRow").hide(function(){
                                    $('#jslibtree_div').jstree(true).refresh(true);
                                    $('#jstree_div').hide();
                                    $('#jslibtree_div').show();
                                    $(".nav-link").removeClass("active");
                                    $(this).addClass("active");

                                    hideBottom()
                                    setWindowHeight($(window).height(),  false);
                                    $('#jstree_div').jstree('select_node',"lib");
                            });

                        });

                    },
                    error: function (error) {
                        console.log(error)
                    }
                })
            }

            //populate library list in sidebar
            getLibs();

            //Lib tree click
            $('#jslibtree_div').on("select_node.jstree", function (e, data) {
                $("#rightCol").show();
                //activaTab('Component_Details');
//                $('#componentTabs').hide();
//                $("#introCol").hide();
//                $("#screenShotCol").hide();

                selectedNode = data.selected[0];
                selectedTree = 'lib'
                hideBottom();
                bottomHiddenFlag = true;

                if (selectedNode ==='lib'){
                    $("#sysScreen").hide();
                    $("#jobScreen").hide();
                    if(!currentCopySysObj.hasOwnProperty("id")){
                        $("#paste_sys_lib_button").hide();
                    }else{
                        $("#paste_sys_lib_button").show();
                    }
                }else {
                    $("#paste_sys_lib_button").hide();
                    clearJobFields();
                    if (data.instance.get_node(data.node.id).type === "job"
                        || data.instance.get_node(data.node.id).type === "disabled"
                        || data.instance.get_node(data.node.id).type === "needfull"
                        || data.instance.get_node(data.node.id).type === "rerunnable") {
                        getLibJobByID(selectedNode, pickedLib);
                        readModeLibJob();
                        $('#jstree_div').jstree("deselect_all");

                        $("#dashRow").hide();
                        $("#componentsRowContainer").show();
                        $("#sysScreen").hide();
                        $("#jobScreen").show();
                        $("#comType").val('Job');

                    }
                    else if (data.instance.get_node(data.node.id).type === "system") {
                        readModeLibSys();
                        $('#jstree_div').jstree("deselect_all");
                        $("#dashRow").hide();
                        $("#componentsRowContainer").show();
                        $("#sysScreen").show();
                        $("#jobScreen").hide();
                        $("#comType").val('system');
                        getLibSysByID(selectedNode, pickedLib);
                    }
                    else { //Type = Lib
                        $('#jstree_div').jstree("deselect_all");
                    }
                }
                $("#results_html").html('');
                $("#results_codes").html('');
                $('#messageSpan').html('');

                var inputFields = $("#job-form-panel").find('textarea');
                inputFields.each(setWidth);
                function setWidth(index, element) {
                    $(element).width = '100%';
                    $(element).css('width','100%');
                    $(element).css('margin-right',0);
                }
            });

            //$('#jstree_div').on("copy_node.jstree", function (e, data) {});  //not used

            //tree ready
            var foundList = [];
            var searchCycleIndex = 0;
            $("#jstree_div").bind('ready.jstree', function(e, data) {

                //Add events for shift click expand/close
                $("#jstree_div").on("open_node.jstree", function (e, data) {
                    var evt = window.event || e  //good ol firefox
                    const shiftKey = evt.shiftKey || false;
                    if(shiftKey){
                        $("#jstree_div").jstree("open_all", data.node);
                    }
                });
                $("#jstree_div").on("close_node.jstree", function (e, data) {
                    var evt = window.event || e  //good ol firefox
                    const shiftKey = evt.shiftKey || false;
                    if(shiftKey){
                        $("#jstree_div").jstree("close_all", data.node);
                    }
                });

                $('#jstree_div').on('refresh.jstree', function () {
                    searchCycleIndex = 0;

                    $.get('/getFoundList', function(data) {
                        foundList = JSON.parse(data);
                        if(foundList.length > 0){
                            $("#searchCycleDiv").show();
                            $("#compSearch").css({width : "calc(100% - 190px)"});
                        }else{
                            $("#searchCycleDiv").hide();
                            $("#compSearch").css({width : "calc(100% - 150px)"});
                        }
                    })
                });
            })
            $("#searchCycleDiv").hide();

            $("#searchCycleDown").click(function(event){
                const matches = foundList;
                searchCycleIndex++;
                searchCycleIndex = searchCycleIndex > (matches.length - 1) ? 0 : searchCycleIndex;
                const id = matches[searchCycleIndex];

                $("#jstree_div").jstree("close_all", '#');

                $('#jstree_div').jstree("deselect_all");
                $('#jstree_div').jstree('select_node', id);
                $('#jstree_div').jstree(true).get_node(id, true).children('.jstree-anchor').focus();


            })

            $("#searchCycleUp").click(function(event){
                const matches = foundList;
                searchCycleIndex--;
                searchCycleIndex = searchCycleIndex < 0 ? matches.length - 1 : searchCycleIndex;
                const id = matches[searchCycleIndex];

                $("#jstree_div").jstree("close_all", '#');

                $('#jstree_div').jstree("deselect_all");
                $('#jstree_div').jstree('select_node', id);
                $('#jstree_div').jstree(true).get_node(id, true).children('.jstree-anchor').focus();
            })

            //tree click
            $('#jstree_div').on("select_node.jstree", function (e, data) {
                $("#paste_sys_lib_button").hide();

                $("#snapButton").popover('dispose').popover({
                    animation: true,
                    content: "Snap thumbnail image",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });

                if(refreshFlag || ($("#edit_button").is(":visible") && selectedNode === data.selected[0])){
                    refreshFlag = false;
                }else{

                    selectedWorkingNode = data.selected[0];
                    selectedNode = data.selected[0];
                    selectedTree = 'working'

                    //hide all popovers
                    $('.clickPop').popover('hide');

                    //deselect Lib tree
                    $('#jslibtree_div').jstree("deselect_all");

                    //console.log(data.selected);
                    if (selectedNode ==='local'){

                        $("#sysScreen").hide();
                        $("#jobScreen").hide();
                        $(".jstree-children").removeClass("jstree-codeBlock");

            //            hideBottom();
            //            bottomHiddenFlag = true;

                        if(!currentCopySysObj.hasOwnProperty("id")){
                            $("#paste_sys_button").hide();
                        }else{
                            $("#paste_sys_button").show();
                        }
                    }else{
                        $("#paste_sys_button").hide();
                        if (data.instance.get_node(data.node.id).type === "job"
                            || data.instance.get_node(data.node.id).type === "disabled"
                            || data.instance.get_node(data.node.id).type === "needfull"
                            || data.instance.get_node(data.node.id).type === "rerunnable" ) {

                            //query backend for a specific job and update ui fields
                            getJobByID(selectedNode, "read");

                            $.get('/ClosestRerunnableAn', { id: selectedNode }, function(data) {
                                const dataObj = JSON.parse(data);
                                $(".jstree-children").removeClass("jstree-codeBlock");
                                $("#"+dataObj.id+"_anchor").next().addClass("jstree-codeBlock");
                            })

                            $.get('/highlight', { id: selectedNode }, function(data) {});
                            $("#comType").val('Job');

                            $("#sysScreen").hide();
                            $("#jobScreen").show();
                            showBottom();

                            bottomHiddenFlag = false;

                            setWindowHeight(currentHeight,  false);
                            updateResultsList(selectedNode);

                            const targetNode =  $('#jstree_div').jstree(true).get_node(data.node.id);
                            const rSystemId = targetNode.parents[targetNode.parents.length - 2];
                            const rSystemNode =  $('#jstree_div').jstree(true).get_node( rSystemId);
                            if(rSystemNode.text !== 'Library'){

                                if($("#componentsBtn").hasClass('active')){
                                    showBottom()
                                }else{
                                    hideBottom()
                                }
                            }else{
                                hideBottom()
                            }

                        }else{
                            $("#sysScreen").show();
                            $("#jobScreen").hide();
//                            hideBottom();
//                            bottomHiddenFlag = true;
                            $("#comType").val('system');
                            readModeSys();
                            getSysByID(selectedNode);
                            $(".jstree-children").removeClass("jstree-codeBlock");
                            $("#"+selectedNode+"_anchor").next().addClass("jstree-codeBlock");
                            updateResultsList(selectedNode);
                        };
                    }

                    $("#results_html").html('');
                    $("#codes_btn").hide();

                    $("#results_codes").html('');
                    $('#messageSpan').html('');

                    $("#resampledNewImage").html('');
                    $("#newImageURL").val('');
                    $("#pasteNewImage").val('');

                    var inputFields = $("#job-form-panel").find('textarea');
                    inputFields.each(setWidth);
                    function setWidth(index, element) {
                        $(element).width = '100%';
                        $(element).css('width','100%');
                        $(element).css('margin-right',0);
                    }
                }
            });

            function loadDashboard(){

                loadDashSystemDropdown();

                if(localStorage['dashSystemDropItemClicked']){
                    var dashSystemDropItemClickedJson = JSON.parse(localStorage['dashSystemDropItemClicked']);
                    var urlString = "'/uploads/" + dashSystemDropItemClickedJson.id + "/icon.png'";
                    $("#dropdownMenuButton")[0].innerHTML = '<img id="dashSystemIcon" class="dashSystemIcon" src='+urlString+'></img>';
                    $("#dropdownMenuButton")[0].innerHTML += dashSystemDropItemClickedJson.sysName;
                    loadDashTable(dashSystemDropItemClickedJson.id);
                    // loadDashSystemDetails(dashSystemDropItemClickedJson.id);
                    loadDashSystemFunctions(dashSystemDropItemClickedJson.id);

                }
            }
            loadDashboard();

            function loadDashSystemFunctions(systemId){
                var mydata = {systemId:systemId};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/getPromotedSystemFunctions',
                    success : function(data) {

                        const promoted = JSON.parse(data);

                        let newHtml = "";
                        $("#dashFuncDropdownMenu").html("");
                        for(let row in promoted){
                            newHtml = "<div><a class='dropdown-item dashSystemFunctionItem' href='#' data-id='"+ promoted[row].id +"'></a></div>"


                            $("#dashFuncDropdownMenu").append(newHtml);
                            $("a[data-id="+promoted[row].id+"]").text('\u0192 '+promoted[row].name ) ;
                        }

                        $(".dashSystemFunctionItem").on('click', function(){

                            var id = $(this).attr('data-Id');
                            var sys = $("#dashSys").val();


               //working    get name somehow         $("#buildModalTitleName").text($("#name").val());

                            runJob(id, sys);
                        });

                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            }
            function loadDashSystemDropdown(){
                var mydata = {};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/getPromotedSystems',
                    success : function(data) {

                        const promoted = JSON.parse(data);

//                        var pCompHtml = "";

                        var dropDownListHtml = "";
                        for (var property in promoted) {
                            if (promoted.hasOwnProperty(property)) {
                                var thisSysId = property;
                                var thisSysName = promoted[property];

                                var urlString = "'/uploads/" + thisSysId + "/icon.png'";
                                var iconHTML = '<img id="dashSystemIcon" class="dashSystemIcon" src='+urlString+'></img>';

                                dropDownListHtml += "<div><a class='dropdown-item dashSystemDropdownItem' href='#' data-id='"+ thisSysId +"' data-sysName='"+ thisSysName +"'>"+ iconHTML+" " + thisSysName +"</a></div>"
                            }
                        }
                        $("#dashSystemsDropdownMenu")[0].innerHTML = dropDownListHtml;

                        $(".dashSystemDropdownItem").on('click', function(){
                            var id = $(this).attr('data-Id');
                            var sysName = $(this).attr('data-sysName');

                            var urlString = "'/uploads/" + id + "/icon.png'";
                            $("#dropdownMenuButton")[0].innerHTML = '<img id="dashSystemIcon" class="dashSystemIcon" src='+urlString+'></img>';
                            $("#dropdownMenuButton")[0].innerHTML += sysName;
                            loadDashTable(id);
                            // loadDashSystemDetails(id);
                            loadDashSystemFunctions(id);

                            localStorage['dashSystemDropItemClicked'] = JSON.stringify({ id:id, sysName:sysName }) ;
                            currentSysId = id;
                        });

                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            }

            //not used
            function loadDashSystemDetails(systemId){
                $.get('/Sys', { id: systemId }, function(data) {
                    var sysJson = data[0] ;
                    if(sysJson.variables && sysJson.variables.host){
                        var host = sysJson.variables['host'].value;
                        host = host ?  host : "[Unspecified]";
                    }else{
                        host = "[Unspecified]";
                    }

                    var dashSystemDetailsHtml = '<div class="dashboardLabel">Host</div>';
                    dashSystemDetailsHtml += '<p>' + host + '</p>';
                    dashSystemDetailsHtml += '<div id="dashSystemDescription">' + description + '</div>';

                    $("#dashSystemDetails")[0].innerHTML = dashSystemDetailsHtml;

                    var dashSystemDescription = new Quill('#dashSystemDescription', {
                        theme: 'snow',
                        modules: {
                            "toolbar": false
                        }
                    });
                    dashSystemDescription.enable(false);
                    var description = sysJson.description;
                    if(description.hasOwnProperty("ops")){
                        dashSystemDescription.setContents(description.ops)
                    }else{
                        dashSystemDescription.setContents(
                            [{ insert:  description },
                                { insert: '\n' }]
                        );
                    };
                });
            }
            
            var dashCompDescription;
            function loadDashTable(systemId){
                var mydata = {systemId:systemId}
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/getPromoted',
                    success : function(data) {

                        const promoted = JSON.parse(data);
                        $("#dashTable").html("")

                        // const dashListRowClicked = localStorage['dashListRowClicked'];
                        // selectDashTableRow(dashListRowClicked);

                        var x=0;
                        for (var row in promoted){

                            var lastBuildStr = ""

                            rowJson = promoted[row];
                            if(rowJson.hasOwnProperty("lastBuild")){
                                if(rowJson.lastBuild.hasOwnProperty("ct")){
                                    lastBuildStr =  'Last build: ' + new Date(rowJson.lastBuild.ct).toLocaleString();
                                }else{
                                    lastBuildStr =  'Last build: Never'
                                }
                            }else{
                                    lastBuildStr =  'Last build: Never'
                            }

                            pCompHtml = "";

                            var thisClass = 'dashTableRow';

                            var thumbImageUrl = "";
                            if(rowJson.hasOwnProperty("thumbnail")){
                                    thumbImageUrl = "/uploads/" + rowJson.id + "/" + rowJson.thumbnail;
                            }
                           
                            pCompHtml += "<div id='row_" + rowJson.id +"' data-id='" + rowJson.id +"' data-runSys='"+ rowJson.systemId +"' data-runSysName='"+ rowJson.systemName + "' class='" + thisClass + "'>";
                                pCompHtml += "<div class='dashContentRow'>"
                                    if(thumbImageUrl !== ""){
                                        pCompHtml +=  "<div id='thumb_" + rowJson.id +"' class='dashThumb' >";
                                            pCompHtml += "<img src='"+thumbImageUrl+"'>";
                                        pCompHtml += "</div>"
                                    }else{
                                        pCompHtml +=  "<div id='thumb_" + rowJson.id +"' class='dashThumb' >";
                                        pCompHtml += "</div>"
                                    }

                                    pCompHtml += "<div class='dashDetails'>";
                                        pCompHtml += "<div class='dashItemName'>" + rowJson.name + "</div>";
                                        pCompHtml += "<div class='dashItemBuildHistory'>" + lastBuildStr + "</div>";

                                           
                                    pCompHtml += "</div>"
                                pCompHtml += "</div>"
                                // pCompHtml += "<div class='col-md-12 col-lg-6  dashSelected'></div>"

                            pCompHtml += "</div>"

                            $("#dashTable").append(pCompHtml);

                            
                            $("#row_" + rowJson.id).find(".dashContentRow").click(function(){
                                id = $(this).parent().attr("data-id");

                                if(! $(this).hasClass("selectedDashRow")){
                                    $(".selectedDashRow").removeClass("selectedDashRow");
                                    $(this).addClass("selectedDashRow");


                                    
                                    $('#dashTable').animate({ scrollLeft:  $(this).parent().prop('offsetLeft') - $('#dashTable').prop('offsetWidth')/2  }, 5000);



                                    loadDashDetails(id);
                                    localStorage['dashListRowClicked'] = id;
                                }                                                               
                            })                           
    

                            if(!rowJson.enabled){
                                 $("#row_"+ rowJson.id + " .dashTableBuildButton").hide();
                             }
                            
                            x++;
                        }

                        
                       
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            }

            var currentCompDashSelectedVarObj = {};

            function loadDashDetails(id){

                $.ajax({
                type: 'get',
                data: {id:id},
                dataType : "text",
                headers: {
                    "content-type": "application/json"
                },
                url: '/getDashDetails',
                id: id,
                success : function(data) {

                    const ddObj = JSON.parse(data);

                    const id = ddObj.id;

                    $("#videoScreen").detach().appendTo("#screenShotImageHolder");                     

                    var enabledHTML = "";
                   
                    $(".dashSelected").html("");
                    if(ddObj.comp.hasOwnProperty("enabled")){
                        if(ddObj.comp.enabled == 1){
                            enabledHTML = "<i class='fa fa-check-circle-o fa-fw DashListRowPass' data-checked='false' ></i>";
                            enableText = "Click to disable";
                        }else{
                            enabledHTML = "<i class='fa fa-times-circle-o fa-fw DashListRowFail' data-checked='true'></i>";
                            enableText = "Click to enable";
                        }
                    }

                    var tmpHtml = ""


                    tmpHtml += "<div class='dashSelectedRow'>"
                        tmpHtml += "<div id='dashScreen'></div>";

                        tmpHtml += "<div id='dashSelectedDetails'>"
                            
                            tmpHtml += "<div id='compDashVariables'>";
                                tmpHtml += "<div class='dashSelectedTop'>";
                                    tmpHtml += "<div class='dashItemName'>" + ddObj.comp.name + "</div>";

                                    tmpHtml += "<div class='dashButtons'>";
                                        tmpHtml += "<div id='dashTableOpenButton' class='dashTableOpenButton' data-id='" + ddObj.id +"'><i class='fa  fa-folder-open fa-fw '></i></div>";
                                        tmpHtml += "<div id='dashTableEnableItem' class='dashTableEnableItem' data-id='" + ddObj.id +"'>" + enabledHTML +  "</div>";
                                        tmpHtml += "<div id='dashTableBuildButton' class='dashTableBuildButton' data-id='" + ddObj.id +"'><i class='fa  fa-wrench fa-fw  '></i></div>  ";
                                    tmpHtml += "</div>"
                                tmpHtml += "</div>" 

                                tmpHtml += "<div id='dashCompDescription'></div>";                    
                    
                                tmpHtml += "<div id='dashCompUrls'>";
                                    for(let ui in ddObj.lastBuildUrlsArr){
                                        tmpHtml += "<div class='lastBuildUrl' data-id='" + ddObj.id +"'>"+ddObj.lastBuildUrlsArr[ui]+"</div>";
                                    }
                                tmpHtml += "</div>";                        
                            tmpHtml += "</div>";                                       
                        tmpHtml += "</div>";                                       
                    tmpHtml += "</div>";

                    //build currentCompDashSelectedVarObj and add idn index, name, compName, compId
                    var y=0;
                    currentCompDashSelectedVarObj = {};
                    for(let idn in ddObj.proVarArr){
                        let name = Object.getOwnPropertyNames(ddObj.proVarArr[idn].var)[0];
                        let compId = ddObj.proVarArr[idn].compId
                        currentCompDashSelectedVarObj[compId + '-' + name] = ddObj.proVarArr[idn].var[name];
                        currentCompDashSelectedVarObj[compId + '-' + name].idn = idn;
                        currentCompDashSelectedVarObj[compId + '-' + name].name = name;
                        currentCompDashSelectedVarObj[compId + '-' + name].compName = ddObj.proVarArr[idn].name;
                        currentCompDashSelectedVarObj[compId + '-' + name].compId = ddObj.proVarArr[idn].compId;
                    }

                    // $("#row_" + id).find(".dashSelected" ).show();

                    // $("#row_" + id).find(".dashSelected" ).html( tmpHtml );
                    $(".dashSelected" ).html( tmpHtml );

                    if(ddObj.hasOwnProperty('lastBuildUrlsArr') && ddObj.lastBuildUrlsArr.length > 0){
                        navigate(ddObj.lastBuildUrlsArr[0]);
                        updateLaunchLink(ddObj.lastBuildUrlsArr[0]);
                        $("#videoScreen").detach().appendTo("#dashScreen"); 
                    }else if(ddObj.comp.hasOwnProperty("thumbnail")){
                        let thumbUrl = "/uploads/" + ddObj.id + "/" + ddObj.comp.thumbnail;
                        $("#dashScreen").html("<img class='dashSelectedImg' src='"+thumbUrl+"'>")
                    }             

                    loadVarDashSelected(currentCompDashSelectedVarObj, "row_" + id );
                    
                    $('.lastBuildUrl').on('click', function(){

                        var id = $(this).attr('data-ID');
                        navigate($(this).text());
                        updateLaunchLink($(this).text());

                        $("#videoScreen").detach().appendTo("#dashScreen"); 
                        // $(".dashThumb").find("img").show();
                        // $("#row_" + id).find("img").hide();
                    })

                    $(".dashTableOpenButton").popover({ 
                        animation: true,
                        content: "Open "+ddObj.comp.name+" component",
                        delay: { "show": 50, "hide": 100 },
                        trigger: 'hover',
                        template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                    });

                    $(".dashTableBuildButton").popover({
                        animation: true,
                        content: "Build "+ddObj.comp.name,
                        delay: { "show": 50, "hide": 100 },
                        trigger: 'hover',
                        template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                    });

                    $(".dashTableEnableItem" ).popover({  
                        animation: true,
                        content: enableText + " "+ddObj.comp.name,
                        delay: { "show": 50, "hide": 100 },
                        trigger: 'hover',
                        template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                    });
                                
                    $('.dashTableOpenButton').on('click', function(){
                        var id = $(this).attr('data-ID');
                        $("#componentsBtn").click();
                        $('#jstree_div').jstree("deselect_all");
                        $('#jstree_div').jstree('select_node',id);
                        $('#jstree_div').jstree(true).get_node(id, true).children('.jstree-anchor').focus(); 
                    })

                    $('.dashTableBuildButton').on('click', function(){
                        var id = $(this).attr('data-ID');
                        $("#dashId").val(id);
                        $.get('/Jobs', {id: id}, function (data) {
                            var sys = data[0].ft.split("/")[1];
                                $("#dashSys").val(sys);
                            runJob(id, sys);
                        })

                    });

                    $('.dashTableEnableItem').on('click', function(){
                            var id = $(this).attr('data-ID');
                            var cCheck = $(this).find( "i" ).attr('data-checked');

                            const checked = {id:id, checked: cCheck};

                        $.ajax({
                            type: 'get',
                            data: checked,
                            dataType : "text",
                            headers: {
                                "content-type": "application/json"
                            },
                            url: '/setEnable',
                            id: id,
                            success : function(data) {

                                const enabledJson = JSON.parse(data);
                                const en = enabledJson.enabled;
                                const id = $(this)[0].id; 

                                if (en === 1){
                                    $(".dashTableEnableItem > i.fa").removeClass('fa-times-circle-o').removeClass('DashListRowFail').addClass('fa-check-circle-o').addClass('DashListRowPass');
                                    $(".dashTableEnableItem > i.fa").attr('data-checked',"false" );
                                    enableText = "Click to disable";
                                }else{
                                    $(".dashTableEnableItem > i.fa").removeClass('fa-check-circle-o').removeClass('DashListRowPass').addClass('fa-times-circle-o').addClass('DashListRowFail');
                                    $(".dashTableEnableItem > i.fa").attr('data-checked',"true" );
                                    enableText = "Click to enable";
                                }
                                $(".dashTableEnableItem" ).popover('dispose').popover({  
                                    animation: true,
                                    content: enableText + " "+ddObj.comp.name,
                                    delay: { "show": 50, "hide": 100 },
                                    trigger: 'hover',
                                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                                });
                            },
                            error : function(error) {
                                alert("Error changing enable property for this component");
                                console.log(error)
                            }
                        })
                    });
                                                        
                    dashCompDescription = new Quill('#dashCompDescription', {
                        theme: 'snow',
                        modules: {
                            "toolbar": false
                        }
                    });
                    dashCompDescription.enable(false);
                    var description = ddObj.comp.description;
                    if(description.hasOwnProperty("ops")){
                        dashCompDescription.setContents(description.ops)
                    }else{
                        dashCompDescription.setContents(
                            [{ insert:  description },
                                { insert: '\n' }]
                        );
                    };
                
                
                },
                error : function(error) {
                    alert("Error calling /getDashDetails");
                    console.log(error)
                }
            })
            }

            function loadVarDashSelected(variables, rowId){
                var currentVarCompId = "";

                // $(".dashDetails").show();
                // $("#" + rowId).find(".dashDetails").hide();

                for(var varIdName in variables){
                    var idn = variables[varIdName].idn

                    let pCompHtml = "";
                    
                    if(currentVarCompId !== variables[varIdName].compId){
                        currentVarCompId = variables[varIdName].compId;
                        pCompHtml += "<div class='varRowCompHeader'  id='varRowCompHeader_" + currentVarCompId +"'>";
                            pCompHtml += variables[varIdName].compName;
                            pCompHtml += "<div class='dashButtons'>";
                                pCompHtml += "<div class='dashTableOpenButton' data-id='" + currentVarCompId +"'><i class='fa  fa-folder-open fa-fw '></i></div>";
                                pCompHtml += "<div class='dashTableBuildButton' data-id='" + currentVarCompId +"'><i class='fa  fa-wrench fa-fw  '></i></div>  ";
                            pCompHtml += "</div>";
                        pCompHtml += "</div>";
                    }


                    pCompHtml += createDashVarRowHtml(varIdName, pCompHtml);
                    setupDashVarRowHtml(varIdName, pCompHtml)
                }
            }

            function setupDashVarRowHtml(varIdName, pCompHtml){
                const variables = currentCompDashSelectedVarObj;
                var idn = variables[varIdName].idn

                if($("#varRowDash_"+variables[varIdName].idn).length > 0){
                        $("#varRowDash_"+variables[varIdName].idn).replaceWith(pCompHtml)
                }else{
                    $("#compDashVariables").append(pCompHtml);
                }
                

                $("#varNameDash" + idn).text(variables[varIdName].name);

                var valText = variables[varIdName].value;
                if(variables[varIdName].private){
                    valText = variables[varIdName].value === "" ? "" : "************"
                }
                if(valText.length >40){
                    valText = valText.substring(0, 37)+"...";
                    var valTextPop = variables[varIdName].value;
                    const options = {
                        animation: true,
                        content: valTextPop,
                        delay: { "show": 500, "hide": 50 },
                        trigger: 'hover',
                        template: '<div class="popover clickPop" role="tooltip"><div class="arrow clickPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'

                    }
                    $("#varValDash" + idn).popover(options);
                }
                $("#varValDash" + idn).text(valText);
                $("#varValColorDash" + idn).val(valText);

                
                $("#varRowDash_"+idn).find(".compDashVarEditButton").on('click', function(){
                                                                
                    var idn = $(this).attr('data-idn');
                    var newHtml = createVarDashEditHtml(idn);

                    $("#varRowDash_"+idn).html(newHtml);

                    var varName = "";
                    var varIdName = "";
                    for(var x in currentCompDashSelectedVarObj){
                        if (currentCompDashSelectedVarObj[x].idn == idn){
                            varName = currentCompDashSelectedVarObj[x].name
                            varIdName = x
                        }
                    }

                    $("#varNameDashEdit" + idn).text(varName);

                    var thisType = currentCompDashSelectedVarObj[varIdName].type === "" ? "Text" : currentCompDashSelectedVarObj[varIdName].type;

                    // $("#newCompVarTypeButton" + idn).val(thisType);
                    // $("#newCompVarTypeButton" + idn).text(thisType);
                    $("#newCompDashVarValue" + idn).val(currentCompDashSelectedVarObj[varIdName].value);
                    // $("#newCompVarPrivateDisp"+idn).html(currentCompVarObj[varName].private ? 'Yes' : 'No');

                    if(thisType === "Color"){
                        $("#compDashVarEditValButton"+idn).hide();
                        $("#compDashVarEditColorButton"+idn).show();
                        $('#colorPickerDash'+idn).val($("#newCompDashVarValue"+idn).val())  ;
                    }else{
                        $("#compDashVarEditValButton"+idn).show();
                        $("#compDashVarEditColorButton"+idn).hide();
                    }

                    // currentCompDashSelectedVarObj[varName].changed = idn;

                    $("#varRowDash_"+idn).find(".compDashVarEditValButton").on('click', function(){
                        var idn = $(this).attr('data-idn');
                        
                        var varName = "";
                        for(var nm in currentCompDashSelectedVarObj){
                            if (currentCompDashSelectedVarObj[nm].idn === idn){
                                varName = nm;
                            }

                        }
                        var varType = currentCompDashSelectedVarObj[varName].type;      //$("#newCompVarTypeButton" + idn).text();
                        if(varType === "WYSIWYG"){
                            $('#varEditWYSIWYGModal').modal('show');

                            // Sets the HTML contents of the activeEditor editor
                            tinymce.activeEditor.setContent($("#newCompDashVarValue"+idn).val());

                            $("#varEditWYSIWYGModalCurrentIdn").val(idn);
                            $("#varEditModalCurrentScreen").val("dash");

                        }else{
                            $('#varEditModal').modal('show');
                            $('#varValEditor').val($("#newCompDashVarValue"+idn).val());
                            $("#varEditModalCurrentIdn").val(idn);
                            $("#varEditModalCurrentScreen").val("dash");
                        }
                    });


                    $(".compDashVarSaveButton").click(function(){

                        var id = ''; 
                        var idn = $(this).attr("data-idn");
                        var name = "";
                        
                        for(var x in currentCompDashSelectedVarObj){
                            if (currentCompDashSelectedVarObj[x].idn == idn){
                                name = currentCompDashSelectedVarObj[x].name;
                                id = currentCompDashSelectedVarObj[x].compId
                            }
                        }

                        var val = $("#newCompDashVarValue"+idn).val();
                        
                    
                        $.ajax({
                            type: 'post',
                            contentType: "application/json",
                            url: '/setDashVarVal',
                            data: JSON.stringify({id:id, val: val, name: name})
                        }).done(function (data) {
                            if(currentCompDashSelectedVarObj.hasOwnProperty(data.id+"-"+data.name)){
                                currentCompDashSelectedVarObj[data.id+"-"+data.name].value = data.val;
                                var html = createDashVarRowHtml(data.id+"-"+data.name);
                                setupDashVarRowHtml(data.id+"-"+data.name, html)
                            }else{
                                alert("Error calling service: /setDashVarVal" )
                            }
                            
                        }).fail(function (e) {
                            alert("Error calling service: /setDashVarVal" )
                        });
                        
                    })

                        //Save color back
                    $('.colorPickerDash').on('change', function() {
                        var idn = $(this).attr('data-idn');
                        $("#newCompDashVarValue"+idn).val( $('#colorPickerDash'+idn).val() )
                    })

                    //Save value of text area back
                    $('#varEditModal').on('hidden.bs.modal', function() {
                        if($("#varEditModalCurrentScreen").val() === 'dash'){
                            var idn = $("#varEditModalCurrentIdn").val();
                            $("#newCompDashVarValue"+idn).val( $('#varValEditor').val() )
                        }else{
                            var idn = $("#varEditModalCurrentIdn").val();
                            $("#newCompVarValue"+idn).val( $('#varValEditor').val() )
                        }
                        
                    });

                    //Save value of tinymce back
                    $('#varEditWYSIWYGModal').on('hidden.bs.modal', function() {
                        if($("#varEditModalCurrentScreen").val() === 'dash'){
                            var idn = $("#varEditWYSIWYGModalCurrentIdn").val();
                            $("#newCompDashVarValue"+idn).val( tinymce.activeEditor.getContent() )
                        }else{
                            var idn = $("#varEditWYSIWYGModalCurrentIdn").val();
                            $("#newCompVarValue"+idn).val( tinymce.activeEditor.getContent() )
                        }
                        
                    });
                });
                    
            }

            function createDashVarRowHtml(varIdName){ 
                //new row
                let pCompHtml = "";
                var idn = currentCompDashSelectedVarObj[varIdName].idn;
                if(! currentCompDashSelectedVarObj[varIdName].ask || currentCompDashSelectedVarObj[varIdName].value.trim() !== ''){
                    pCompHtml += "<div id='varRowDash_" + idn +"'" +  " class='CompDashSelectedVarRow'>";
                }else{
                    pCompHtml += "<div id='varRowDash_" + idn +"'" +  " class='CompDashSelectedVarRow dashAskVarRow'>";
                }

                    //add name col
                    pCompHtml += "<div class='col-5 varNameDash'>";
                        pCompHtml += "<i class='fa fa-pencil fa-fw compDashVarEditButton' data-idn='" + idn +"'></i>" ;
                        pCompHtml += "<span id = 'varNameDash" + idn + "'></span><span class='askMarker'>*</span>";
                    pCompHtml += "</div>";

                    //add type col
                    var typeTxt = currentCompDashSelectedVarObj[varIdName].type;
                
                    //add value col
                    pCompHtml += "<div class='col-7 varValDash'>"
                        pCompHtml += "<span tabindex='0' id = 'varValDash" + idn + "'></span>"
                        if(typeTxt === "Color"){
                            pCompHtml += '<input id = "varValColorDash' + idn + '" type="color" class="colorPickerView" disabled="true" >'
                        }
                    pCompHtml += "</div>";

                pCompHtml += "</div>";

                return pCompHtml

            }

            //function to create a block of var input html for new vars and edits on the dashboard. Provide index str eg "0" or "10" ...
            function createVarDashEditHtml(currentRowCntStr){
                var newHtml = '<div id="new_row_dash'+currentRowCntStr+'" class="d-flex varRow newVarRow">'

                newHtml += "<div class='col-5 varNameDash'>";
                newHtml += "<span class='varNameDashEdit' id = 'varNameDashEdit" + currentRowCntStr + "'></span>";
                newHtml += "</div>"; 

                //New component variable value
                newHtml += '<div class="col-7"><div class="compVarEditValRow">';
                newHtml += '<input id="newCompDashVarValue'+currentRowCntStr+'" class="form-control newCompDashVarValue" type="text">';

                newHtml += '<a href="#"><i id="compDashVarEditValButton'+currentRowCntStr+'" class="fa fa-expand fa-fw compDashVarEditValButton" data-idn="'+currentRowCntStr+'" ></i></a>';
                newHtml += '<div id="compDashVarEditColorButton'+currentRowCntStr+'"  data-idn="'+currentRowCntStr+' " style="display:none;">' +
                    '<input type="color" class="colorPickerDash" style="" data-idn='+currentRowCntStr+' id="colorPickerDash'+currentRowCntStr+'">'+
                    '</div>';
                newHtml += '<a href="#"><i id="compDashVarSaveButton'+currentRowCntStr+'" class="fa fa-save fa-fw compDashVarSaveButton" data-idn="'+currentRowCntStr+'" ></i></a>';
                    
                newHtml += '</div></div>';

                return newHtml;
            }





            
            var tempCont = document.createElement("div");
            function quillGetHTML(inputDelta) {

                (new Quill(tempCont)).setContents(inputDelta);
                return tempCont.getElementsByClassName("ql-editor")[0].innerHTML;
            }

            var serverFailedCount = 0;
            serverStats();
            function serverStats(){
                var mydata = {};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/getCPUStats',
                    timeout: 5000,
                    success : function(data) {
                        const statsJson = JSON.parse(data);
                        if(statsJson.hasOwnProperty("last10")){
                            if(statsJson.last10 != null){
                                $("#osCPUValue")[0].innerHTML = statsJson.last10.toString()+"%"
                                $("#osFMValue")[0].innerHTML = (statsJson.freeMem/1024/1024/1024).toFixed(2).toString()+" GB"
                            }
                        }
                        setTimeout(serverStats, 5000)
                        serverFailedCount = 0;
                    },
                    error : function(error) {
                        if(currentSettings.clientMode == "demo"){
                            serverFailedCount++; //show serverUnavailableDemoModal after get has failed at least a couple times in a row.
                            if(serverFailedCount > 2){
                                //hide all popovers
                                $('.popover').popover('hide');
                                $('#serverUnavailableDemoModal').modal('show');
                            }
                        }
                        setTimeout(serverStats, 5000);
                    }
                })
            }



            function hideBottom(){
//                $("#bottomRow").hide(function(){});
            }
            function showBottom(){
//                $("#bottomRow").show(function(){});
            }

            function clearJobFields(){
                $("#id").val('');
                $("#parent").val('');
                $("#name").val('');
                $("#componentEnabled").val('');
                $("#componentEnabledVal").html('');
                $("#promoted").val('');
                $("#promotedVal").html('');
                $("#rerunnable").val('');
                $("#rerunnableVal").html('');
                $("#sysFunc").html('');
                $("#sysFuncVal").html('');
                $("#runLoc").html('');
                $("#runLocVal").html('');
                $("#compVariables").html('');
                $("#text").val('');
                $('#resourceFiles').val('');
                $("#ft").val('');
                $('#fileList').html('');
                $('#createdDate').val('');
                $('#createdBy').val('');
                $("#idDisp").val('');
                $("#price").val('')
            }

            $('#componentEnabled').change(function() {
                if(this.checked) {
                    $("#componentEnabledVal").html('Yes');
                }else{
                    $("#componentEnabledVal").html('No');
                }
            });

            $('#promoted').change(function() {
                if(this.checked) {
                    $("#promotedVal").html('Yes');
                }else{
                    $("#promotedVal").html('No');
                }
            });

            $('#rerunnable').change(function() {
                if(this.checked) {
                    $("#rerunnableVal").html('Yes');
                }else{
                    $("#rerunnableVal").html('No');
                }
            });

            $('#sysFunc').change(function() {
                if(this.checked) {
                    $("#sysFuncVal").html('Yes');
                }else{
                    $("#sysFuncVal").html('No');
                }
            });
            $('#runLoc').change(function() {
                if(this.checked) {
                    $("#runLocVal").html('Yes');
                }else{
                    $("#runLocVal").html('No');
                }
            });

            //function to create a block of var input html for new vars and edits. provide index str eg "0" or "1" ...
            function createVarEditHtml(currentRowCntStr){
                var newHtml = '<tr id="new_row'+currentRowCntStr+'" class="d-flex varRow newVarRow">'

                //new var name input
                newHtml += '<td class="col-3"><input id="newCompVarName'+currentRowCntStr+'" class="form-control newCompVarName" type="text"></td>'

                //New privacy switch
                newHtml += '<td class="col-2 newCompVarButtonRow">'
                newHtml += '<label class="varFlag privacy-flag" ><input id="newCompVarPrivateInput'+currentRowCntStr+'" data-inx='+currentRowCntStr+' type="checkbox"  class=" "></label>';

                //New promoted switch
                newHtml += '<label class="varFlag promoted-flag" ><input id="newCompVarPromotedInput'+currentRowCntStr+'" data-inx='+currentRowCntStr+' type="checkbox"  class=" "></label>';

                //New ask switch
                newHtml += '<label class="varFlag ask-flag" ><input id="newCompVarAskInput'+currentRowCntStr+'" data-inx='+currentRowCntStr+' type="checkbox"  class=" "></label>';
                newHtml += '</td>';

                //New var type pick
                newHtml += '<td class="col-2 center">'
                newHtml += '<button class="dropdown-toggle newCompVarTypeButton" type="button" id="newCompVarTypeButton'+currentRowCntStr+'" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">Text</button>';
                newHtml += '<div id="newCompVarTypeDropdownMenu" class="dropdown-menu dashSystemsDropdownMenu" aria-labelledby="newCompVarTypeButton'+currentRowCntStr+'" x-placement="bottom-start" >';

                newHtml +=  '<div><a class="dropdown-item newCompVarTypeDropdownItem" data-target="'+currentRowCntStr+'" data-type="Text" href="#">Text</a></div>' ;
                newHtml +=  '<div><a class="dropdown-item newCompVarTypeDropdownItem" data-target="'+currentRowCntStr+'" data-type="WYSIWYG" href="#" >WYSIWYG</a></div>' ;
                newHtml +=  '<div><a class="dropdown-item newCompVarTypeDropdownItem" data-target="'+currentRowCntStr+'" data-type="Color" href="#" >Color</a></div>' ;
                newHtml +=  '</div></td>'

                //New component variable value
                newHtml += '<td class="col-5"><div class="compVarEditValRow">';
                newHtml += '<input id="newCompVarValue'+currentRowCntStr+'" class="form-control newCompVarValue" type="text">';

                newHtml += '<a href="#"><i id="compVarEditValButton'+currentRowCntStr+'" class="fa fa-expand fa-fw compVarEditValButton" data-idn="'+currentRowCntStr+'" ></i></a>';
                newHtml += '<div id="compVarEditColorButton'+currentRowCntStr+'"  data-idn="'+currentRowCntStr+' " style="display:none;">' +
                    '<input type="color" class="colorPicker" style="" data-idn='+currentRowCntStr+' id="colorPicker'+currentRowCntStr+'">'+
                    '</div>';
                newHtml += '</td></tr>';

                return newHtml;
            }

            $('.newCompVarBtn').on('click', function(){

                var currentRowCntStr = Object.keys(currentCompVarObj).length.toString();

                var newHtml =  createVarEditHtml(currentRowCntStr);

                var varName  = "newVar_"+currentRowCntStr
                $("#compVariables").append(newHtml);


                currentCompVarObj[varName] = {private:false, type:"", value:"", changed: currentRowCntStr};
                $("#newCompVarPrivateDisp"+currentRowCntStr).html( 'No');
                insertVarEditEvents()

            })
            function insertVarEditEvents(){

                $(".newCompVarTypeDropdownItem").on('click', function(){
                    var type = $(this).attr('data-type');
                    var target = $(this).attr('data-target');

                    $("#newCompVarTypeButton"+target).html(type);
                    if(type === "Color"){
                        $("#compVarEditValButton"+target).hide();
                        $("#compVarEditColorButton"+target).show();
                    }else{
                        $("#compVarEditValButton"+target).show();
                        $("#compVarEditColorButton"+target).hide();
                    }
                });

//                $('.newCompVarPrivateButton').on('click', function(){
//                    var id = $("#id").val();
//                    const checked =  this.checked;
//                    var inx = $(this).attr('data-inx');
//
//                    $("#newCompVarPrivateDisp"+inx).html(checked ? 'Yes' : 'No');
//                })

                $(".compVarEditValButton").on('click', function(){
                    var idn = $(this).attr('data-idn');

                    var varName = "";
                    var varType = $("#newCompVarTypeButton" + idn).text();
                    for(var nm in currentCompVarObj){
                        if (currentCompVarObj[nm].idn === idn){
                            varName = nm;
                        }

                    }
                    if(varType === "WYSIWYG"){
                        $('#varEditWYSIWYGModal').modal('show');

                        // Sets the HTML contents of the activeEditor editor
                        tinymce.activeEditor.setContent($("#newCompVarValue"+idn).val());

                        $("#varEditWYSIWYGModalCurrentIdn").val(idn);
                        $("#varEditModalCurrentScreen").val("comp");

                    }else{
                        $('#varEditModal').modal('show');
                        $('#varValEditor').val($("#newCompVarValue"+idn).val());
                        $("#varEditModalCurrentIdn").val(idn);
                        $("#varEditModalCurrentScreen").val("comp");
                    }

                });

                $('.colorPicker').on('change', function() {
                    var idn = $(this).attr('data-idn');
                    $("#newCompVarValue"+idn).val( $('#colorPicker'+idn).val() )

                })

                //Save value of text area back
                $('#varEditModal').on('hidden.bs.modal', function() {
                    if($("#varEditModalCurrentScreen").val() === 'dash'){
                        var idn = $("#varEditModalCurrentIdn").val();
                        $("#newCompDashVarValue"+idn).val( $('#varValEditor').val() )
                    }else{
                        var idn = $("#varEditModalCurrentIdn").val();
                        $("#newCompVarValue"+idn).val( $('#varValEditor').val() )
                    }
                    
                });

                //Save value of tinymce back
                $('#varEditWYSIWYGModal').on('hidden.bs.modal', function() {
                    if($("#varEditModalCurrentScreen").val() === 'dash'){
                        var idn = $("#varEditWYSIWYGModalCurrentIdn").val();
                        $("#newCompDashVarValue"+idn).val( tinymce.activeEditor.getContent() )
                    }else{
                        var idn = $("#varEditWYSIWYGModalCurrentIdn").val();
                        $("#newCompVarValue"+idn).val( tinymce.activeEditor.getContent() )
                    }
                    
                });
            }

            function createSysVarEditHtml(currentRowCntStr){
                var newHtml = '<tr id="new_row'+currentRowCntStr+'" class="d-flex varRow newVarRow">'

                //new var name input
                newHtml += '<td class="col-3"><input id="newSysVarName'+currentRowCntStr+'" class="form-control newSysVarName" type="text"></td>'

                //New privacy switch
                newHtml += '<td class="col-1"><div class="newSysVarPrivateButtonRow">';
                newHtml += '<label class="switch privacy-switch" ><input id="newSysVarPrivateInput'+currentRowCntStr+'" data-inx='+currentRowCntStr+' type="checkbox"  class="success newSysVarPrivateButton"><span class="slider round"></span></label>';
                newHtml += '<span id="newSysVarPrivateDisp'+currentRowCntStr+'" class="newSysVarPrivateDisp"></span>';
                newHtml += '</div></td>';

                //New system variable value
                newHtml += '<td class="col-6"><div class="sysVarEditValRow"><a href="#">' +
                    '<input id="newSysVarValue'+currentRowCntStr+'" class="form-control newSysVarValue" type="text"></div></td>';
                newHtml += '</tr>'

                return newHtml;
            }
            $('.newSysVarBtn').on('click', function(){

                var currentRowCntStr = Object.keys(currentCompVarObj).length.toString();

                var newHtml =  createSysVarEditHtml(currentRowCntStr);

                var varName  = "newVar_"+currentRowCntStr
                $("#sysVariables").append(newHtml);


                currentSysVarArr[varName] = {private:false, type:"", value:"", changed: currentRowCntStr};
                $("#newSysVarPrivateDisp"+currentRowCntStr).html( 'No');
                insertSysVarEditEvents()

            })
            function insertSysVarEditEvents(){

                $('.newSysVarPrivateButton').on('click', function(){
                    var id = $("#id").val();
                    const checked =  this.checked;
                    var inx = $(this).attr('data-inx');

                    $("#newSysVarPrivateDisp"+inx).html(checked ? 'Yes' : 'No');
                })
            }

            tinymce.init({
                selector: "#varValWYSIWYGEditor",
                plugins: [
                    "advlist autolink lists link image charmap print preview anchor",
                    "searchreplace visualblocks code fullscreen",
                    "insertdatetime media table paste"
                ],
                toolbar: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image",
                protect: [
                    /\<\/?(if|endif)\>/g, // Protect <if> & </endif>
                    /\<!\[if !mso\]\>/g, // Protect <![if !mso]>
                    /\<!\[if !vml\]\>/g, // Protect <![if !vml]>
                    /\<!\[endif\]\>/g, // Protect <![endif]>
                    /\<xsl\:[^>]+\>/g, // Protect <xsl:...>
                    // /<\?php.*?\?>/g // Protect php code
                    /<\?php[\s\S]*?\?>/g // Protect php code
                ]
            });

            //getJobByID - query backend and update fields
            var currentCompVarObj = {};
            function getJobByID(NodeID, viewmode){
                clearJobFields();
                $.get('/Jobs', { id: NodeID }, function(data) {

                    // testing vvvvvvvvvvvvvvvvvvv
                   var dispData = JSON.parse(JSON.stringify(data[0]) )  ;

                    $("#nodeData").val(JSON.stringify(dispData).split(',"').join(',\n"')  );
                    // testing ^^^^^^^^^^^^^^^^^^^

                    $("#id").val(data[0].id);

                    //breadcrumbs
                    const breadCrumbArr = $('#jstree_div').jstree().get_path(data[0].id, false, true);
                    breadCrumbArr.shift();
                    breadCrumbArr.pop();

                    var bcHtml ="";
                    for(let node in breadCrumbArr){
                        breadCrumbArr[node] = '<span class="breadCrumbNode" data-id="' + breadCrumbArr[node] + '"> ' + $('#jstree_div').jstree(true).get_node( breadCrumbArr[node]).text + '</span>';
                    }
                    $("#breadcrumbsRow").html(breadCrumbArr.join(" > "));

                    $(".breadCrumbNode").click(function(){
                        let clickedNode = $(this).attr("data-id");
                        $('#jstree_div').jstree("deselect_all");
                        $('#jstree_div').jstree('select_node',clickedNode);
                        $('#jstree_div').jstree(true).get_node(clickedNode, true).children('.jstree-anchor').focus();

                    });
                    $("#buildCode").val((data[0].buildCode.linkArr[0]));
                    loadBuildCode(data[0].buildCode.linkArr[0]);

                    $("#comType").val(data[0].comType);
                    $("#idDisp").val(data[0].id);
                    $("#parent").val(data[0].parent);
                    $("#name").val(data[0].name);

                    if(data[0].enabled === 1){
                        $('#componentEnabled').prop('checked', true);
                        $('#componentEnabledVal').html('Yes');
                        $("#run_button")[0].disabled = false;
                    }else{
                        $('#componentEnabled').prop('checked', false);
                        $('#componentEnabledVal').html('No');
                        $("#run_button")[0].disabled = true;
                    }

                    if(data[0].promoted === 1){
                        $('#promoted').prop('checked', true);
                        $('#promotedVal').html('Yes');
                    }else{
                        $('#promoted').prop('checked', false);
                        $('#promotedVal').html('No');
                    }

                    if(data[0].description.hasOwnProperty("ops")){
                        description.setContents(data[0].description.ops)
                    }else{
                        description.setContents(
                            [{ insert:  data[0].description },
                                { insert: '\n' }]
                        );
                    };

                    //load var table
                    var pCompHtml = "";
                    var x = 0;
                    //get variables obj and add an index number to each member
                    currentCompVarObj = data[0].variables;
                    for(var varName in currentCompVarObj){
                        currentCompVarObj[varName].idn = x.toString();
                        x++
                    }

                    //load table and show edit tools in edit mode
                    loadVarTable(data[0].variables, true);

                    $(".compVarDelButton").on('click', function(){
                        var idn = $(this).attr('data-idn');
                        for(varName in currentCompVarObj){
                            if (currentCompVarObj[varName].idn == idn){
                                delete currentCompVarObj[varName];break
                            }
                        }
                        $("#varRow_"+idn).remove();
                    });

                    $(".compVarEditButton").on('click', function(){
                        var idn = $(this).attr('data-idn');
                        var newHtml = createVarEditHtml(idn);

                        $("#varRow_"+idn).html(newHtml);
                        insertVarEditEvents();
                        var varName = "";
                        for(var x in currentCompVarObj){
                            if (currentCompVarObj[x].idn == idn)(
                                varName = x
                            )
                        }

                        $("#newCompVarName" + idn).val(varName);

                        $("#newCompVarPrivateInput" + idn)[0].checked = currentCompVarObj[varName].private;
                        $("#newCompVarPromotedInput" + idn)[0].checked = currentCompVarObj[varName].promoted;
                        $("#newCompVarAskInput" + idn)[0].checked = currentCompVarObj[varName].ask;

                        var thisType = currentCompVarObj[varName].type === "" ? "Text" : currentCompVarObj[varName].type;

                        $("#newCompVarTypeButton" + idn).val(thisType);
                        $("#newCompVarTypeButton" + idn).text(thisType);
                        $("#newCompVarValue" + idn).val(currentCompVarObj[varName].value);
                        $("#newCompVarPrivateDisp"+idn).html(currentCompVarObj[varName].private ? 'Yes' : 'No');

                        if(thisType === "Color"){
                            $("#compVarEditValButton"+idn).hide();
                            $("#compVarEditColorButton"+idn).show();
                            $('#colorPicker'+idn).val($("#newCompVarValue"+idn).val())  ;
                        }else{
                            $("#compVarEditValButton"+idn).show();
                            $("#compVarEditColorButton"+idn).hide();
                        }

                        currentCompVarObj[varName].changed = idn;
                    });

                    $("#text").val(data[0].text);

                    $("#ft").val(data[0].ft);

                    if(data[0].hasOwnProperty("hist")){
                        $("#createdBy").val(data[0].hist[0].username);
                        $("#createdDate").val(data[0].hist[0].ds)
                    }

                    //Navigate to lastbuild.url if exists
                    if(data[0].lastBuild){
                        if(data[0].lastBuild.url){
                            const url = data[0].lastBuild.url;
                            navigate(url);
                        }
                        if(data[0].lastBuild.launch){
                            const url= data[0].lastBuild.launch;
                            updateLaunchLink(url);
                        }
                    }

                    if(viewmode === "read"){
                        readModeJob();
                        $.get('/fileList', { id: $('#id').val() }, function(data) {
                            populateFileList($('#id').val(), data, false, "#fileCompList");
                        });
                    }else if(viewmode === "edit"){
                        editModeJob();
                        $.get('/fileList', { id: $('#id').val() }, function(data) {
                            populateFileList($('#id').val(),data, true, "#fileCompList");
                        });
                    }

                })
            }

            function loadBuildCode(id){
//                    console.log("try to get build code " + data[0].buildCode.linkArr[0]);
                $.get('/BuildCode', { id: id }, function(data) {

                    if($("#buildCode").val() === data[0].id){

// testing vvvvvvvvvvvvvvvvvvv
                        var dispData = JSON.parse(JSON.stringify(data[0]) )  ;
                        $("#buildCodeData").val(JSON.stringify(dispData).split(',"').join(',\n"')  )
// testing ^^^^^^^^^^^^^^^^^^^

                        if(data[0].hasOwnProperty("id")){
                            if(data[0].id === ""){
                                $("#buildCode").val("");
                                $("#newBuildCodeName").val("New Build Code");
                                $("#buildCodeNameRead").html("New Build Code");
                                scriptEditor.session.setValue("");
                                $('#custTemplates').html("");

                                $('#rerunnable').prop('checked', false);
                                $('#rerunnableVal').html('No');
                                $('#sysFunc').prop('checked', false);
                                $('#sysFuncVal').html('No');
                                $('#runLoc').prop('checked', false);
                                $('#runLocVal').html('No');

                                $("#alsoUsedInMess").text("Not used in any other component")
                                $("#buildCodeMatch").html("");
                                $("#buildCodeCopyButton").hide();
                                $("#buildCodeForkButton").hide();
                                currentTemplatesArr = [];
                            }else{
                                $("#buildCodeCopyButton").show();
                                $("#buildCodeForkButton").show();

                                $("#newBuildCodeName").val(data[0].name);
                                $("#buildCodeNameRead").html(data[0].name);

                                if(data[0].rerunnable === 1){
                                    $('#rerunnable').prop('checked', true);
                                    $('#rerunnableVal').html('Yes');
                                }else{
                                    $('#rerunnable').prop('checked', false);
                                    $('#rerunnableVal').html('No');
                                }

                                if(data[0].systemFunction === 1){
                                    $('#sysFunc').prop('checked', true);
                                    $('#sysFuncVal').html('Yes');
                                }else{
                                    $('#sysFunc').prop('checked', false);
                                    $('#sysFuncVal').html('No')
                                }

                                if(data[0].runLocal === 1){
                                    $('#runLoc').prop('checked', true);
                                    $('#runLocVal').html('Yes')
                                }else{
                                    $('#runLoc').prop('checked', false);
                                    $('#runLocVal').html('No');
                                }

                                var curTxtVal = scriptEditor.getValue();
                                var newTxtVal = data[0].script;
                                if(curTxtVal !== newTxtVal){
                                    scriptEditor.session.setValue(newTxtVal);
                                }

                                //load templates
                                var x=0;
                                var tempObjArr = data[0].templates.tempArr;

                                tempObjArr.forEach(function(tempObj){

                                    //if there is not an instance to reuse create a new
                                    if(!currentTemplatesArr[x]){
                                        var inHtml = authorTemplateHTML(x, true);

                                        $('#custTemplates').append(inHtml);

                                        currentTemplatesArr.push(ace.edit("template"+x.toString()));

                                        currentTemplatesArr[currentTemplatesArr.length-1].session.setMode("ace/mode/text");
                                        document.getElementById("template"+x.toString()).style.fontSize='14px';

                                        currentTemplatesArr[currentTemplatesArr.length-1].renderer.$cursorLayer.element.style.display = "none"

                                        loadjobTempTypeDropdown(x);
                                        $("#templateWindowMin"+x.toString()).hide();

                                        $("#templateWindowMax"+x.toString()).click( function(){
                                            var inx = parseInt($(this).attr('data-inx'), 10);
                                            setTempAceHeight(inx, "max");
                                            $("#templateWindowMax"+inx.toString()).hide();
                                            $("#templateWindowMin"+inx.toString()).show()
                                        })
                                        $("#templateWindowMin"+x.toString()).click( function(){
                                            var inx = parseInt($(this).attr('data-inx'), 10);
                                            setTempAceHeight(inx, "min");
                                            $("#templateWindowMax"+inx.toString()).show();
                                            $("#templateWindowMin"+inx.toString()).hide()
                                        })
                                    }else{
                                        //unhide the old template code to reuse it
                                        $("#templateBlock" + x.toString()).show();
                                    }

                                    currentTemplatesArr[x].session.setValue(tempObj.c);
                                    currentTemplatesArr[x].isValid = true;
                                    x++;
                                });

                                //mark the rest if the ace instances as invalid, hide the block and clear the values so they can be recycled
                                while (x < currentTemplatesArr.length ){
                                    $("#templateBlock" + x.toString()).hide();
                                    currentTemplatesArr[x].session.setValue("");
                                    currentTemplatesArr[x].isValid = false;
                                    x++;
                                }

                                //insert the contents of the instances and populate type dropdowns
                                x=0;
                                tempObjArr.forEach(function(tempObj){
                                    var tempType =  tempObj.t === "" ? "text" :  tempObj.t;
                                    currentTemplatesArr[x].session.setMode("ace/mode/" + tempType);
                                    $("#templateType" + x.toString()).val(tempType);
                                    $("#dropdownTemplateTypeButton"+x.toString())[0].innerHTML = tempType;
                                    x++;
                                })

                                //set the style if eack instance
                                setAceStyle(currentStyleName);
                                $(".ace_editor").addClass("aceDisabled");

                                //hide the cursor for each instance
                                for(var inx in currentTemplatesArr){
                                    currentTemplatesArr[inx].renderer.$cursorLayer.element.style.display = "none";
                                    currentTemplatesArr[inx].setReadOnly(true);
                                }

                                $('#resourceFiles').val(data[0].resourceFiles);
                                populateFileList( $('#buildCode').val(), $('#resourceFiles').val(), false, "#fileList");

                                $("#buildCodeMatch").html("");
                                $.get('/componentsByBcId', { id: data[0].id }, function(data) {
                                    var rowHtml;
                                    const dataObj = JSON.parse(data);
                                    const  buildCodeMatch = dataObj.compArr;
                                    const thistId = $("#id").val();
                                    let x=0;
                                    for (var key in buildCodeMatch) {
                                        if (buildCodeMatch.hasOwnProperty(key) && thistId !== buildCodeMatch[key].id) {
                                            rowHtml = '<div data-id="'+buildCodeMatch[key].id+'" class="buildCodeMatchRow">';
                                            rowHtml += '<i class="fa  fa-folder-open fa-fw "></i>';
                                            rowHtml += buildCodeMatch[key].systemName + ' : ';
                                            rowHtml += buildCodeMatch[key].name + '</div>';

                                            $("#buildCodeMatch").append(rowHtml);
                                            x++;
                                        }
                                    }

                                    if(x === 0){
                                        $("#alsoUsedInMess").text("Not used in any other component")
                                    }else if(x === 1){
                                        $("#alsoUsedInMess").text("Used in one other component:")
                                    }else{
                                        $("#alsoUsedInMess").text("Used in "+x.toString()+" other components:")
                                    }

                                    $('.buildCodeMatchRow').on('click', function(){
                                        var id = $(this).attr('data-id');
                                        $('#jstree_div').jstree("deselect_all");
                                        $('#jstree_div').jstree('select_node',id);
                                        $('#jstree_div').jstree(true).get_node(id, true).children('.jstree-anchor').focus();
                                    });
                                })
                            }

                        }else{
                            $("#newBuildCodeName").val("Error: ID Property not set");
                            $("#buildCodeCopyButton").hide();
                            $("#buildCodeForkButton").hide();
                        }
                    }



                });
            }

            //geLibJobByID
            function getLibJobByID(NodeID, lib){
                //const viewmode = "read"
                clearJobFields();
                $.get('/getLib', { id: NodeID, 'pickedLib':lib }, function(data) {
                    // testing vvvvvvvvvvvvvvvvvvv
                    var dispData = JSON.parse(JSON.stringify(data[0]) )  ;
                    $("#nodeData").val(JSON.stringify(dispData).split(',"').join(',\n"')  );
                    // testing ^^^^^^^^^^^^^^^^^^^

                    $("#id").val(data[0].id);

                    $.get('/BuildCodeLib', { id: data[0].buildCode.linkArr[0], lib: lib }, function(data) {

                        // testing vvvvvvvvvvvvvvvvvvv
                        dispData = JSON.parse(JSON.stringify(data[0]) )  ;
                        $("#buildCodeData").val(JSON.stringify(dispData).split(',"').join(',\n"')  );
                        // testing ^^^^^^^^^^^^^^^^^^^

                        $("#buildCode").val(data[0].id);
                        $("#newBuildCodeName").val(data[0].name);
                        $("#buildCodeNameRead").html(data[0].name);

                        if(data[0].rerunnable === 1){
                            $('#rerunnable').prop('checked', true);
                            $('#rerunnableVal').html('Yes');
                        }else{
                            $('#rerunnable').prop('checked', false);
                            $('#rerunnableVal').html('No');
                        }

                        if(data[0].systemFunction === 1){
                            $('#sysFunc').prop('checked', true);
                            $('#sysFuncVal').html('Yes');
                        }else{
                            $('#sysFunc').prop('checked', false);
                            $('#sysFuncVal').html('No')
                        }

                        if(data[0].runLocal === 1){
                            $('#runLoc').prop('checked', true);
                            $('#runLocVal').html('Yes')
                        }else{
                            $('#runLoc').prop('checked', false);
                            $('#runLocVal').html('No');
                        }

                        var curTxtVal = scriptEditor.getValue();
                        var newTxtVal = data[0].script;
                        if(curTxtVal !== newTxtVal){
                            scriptEditor.session.setValue(newTxtVal);
                        }

                        //load templates
                        var x=0;
                        var tempObjArr = data[0].templates.tempArr;

                        tempObjArr.forEach(function(tempObj){

                            //if there is not an instance to reuse create a new
                            if(!currentTemplatesArr[x]){
                                var inHtml = authorTemplateHTML(x, true);

                                $('#custTemplates').append(inHtml);

                                currentTemplatesArr.push(ace.edit("template"+x.toString()));

                                currentTemplatesArr[currentTemplatesArr.length-1].session.setMode("ace/mode/text");
                                document.getElementById("template"+x.toString()).style.fontSize='14px';

                                currentTemplatesArr[currentTemplatesArr.length-1].renderer.$cursorLayer.element.style.display = "none"

                                loadjobTempTypeDropdown(x)

                                $("#templateWindowMax"+x.toString()).click( function(){
                                    var inx = parseInt($(this).attr('data-inx'), 10);
                                    setTempAceHeight(inx, "max")
                                })
                                $("#templateWindowMin"+x.toString()).click( function(){
                                    var inx = parseInt($(this).attr('data-inx'), 10);
                                    setTempAceHeight(inx, "min")
                                })
                            }else{
                                //unhide the old template code to reuse it
                                $("#templateBlock" + x.toString()).show();
                            }

                            currentTemplatesArr[x].session.setValue(tempObj.c);
                            currentTemplatesArr[x].isValid = true;
                            x++;
                        });

                        //mark the rest if the ace instances as invalid, hide the block and clear the values so they can be recycled
                        while (x < currentTemplatesArr.length ){
                            $("#templateBlock" + x.toString()).hide();
                            currentTemplatesArr[x].session.setValue("");
                            currentTemplatesArr[x].isValid = false;
                            x++;
                        }

                        //inset the contents of the instances and populate type dropdowns
                        x=0;
                        tempObjArr.forEach(function(tempObj){
                            var tempType =  tempObj.t === "" ? "text" :  tempObj.t;
                            currentTemplatesArr[x].session.setMode("ace/mode/" + tempType);
                            $("#templateType" + x.toString()).val(tempType);
                            $("#dropdownTemplateTypeButton"+x.toString())[0].innerHTML = tempType;
                            x++;
                        })

                        //set the style if eack instance
                        setAceStyle(currentStyleName);
                        $(".ace_editor").addClass("aceDisabled");

                        //hide the cursor for each instance
                        for(var inx in currentTemplatesArr){
                            currentTemplatesArr[inx].renderer.$cursorLayer.element.style.display = "none";
                            currentTemplatesArr[inx].setReadOnly(true);
                        }

                        $('#resourceFiles').val(data[0].resourceFiles);
                        populateLibFileList( $('#resourceFiles').val());

                        setAceBuildCodeHeight();

                    });

                    $("#buildCode").val(data[0].buildCode.linkArr[0]);



                    $("#comType").val(data[0].comType);
                    $("#idDisp").val(data[0].id);
                    $("#parent").val(data[0].parent);
                    $("#name").val(data[0].name);

                    if(data[0].enabled === 1){
                        $('#componentEnabled').prop('checked', true);
                        $('#componentEnabledVal').html('Yes');
                    }else{
                        $('#componentEnabled').prop('checked', false);
                        $('#componentEnabledVal').html('No');
                    }

                    if(data[0].promoted === 1){
                        $('#promoted').prop('checked', true);
                        $('#promotedVal').html('Yes');
                    }else{
                        $('#promoted').prop('checked', false);
                        $('#promotedVal').html('No');
                    }

                    if(data[0].description.hasOwnProperty("ops")){
                        description.setContents(data[0].description.ops)
                    }else{
                        description.setContents(
                            [{ insert:  data[0].description },
                                { insert: '\n' }]
                        );
                    };

                    //load var table
                    var pCompHtml = "";
                    var x = 0;
                    //get variables obj and add an index number to each member
                    currentCompVarObj = data[0].variables;
                    for(var varName in currentCompVarObj){
                        currentCompVarObj[varName].idn = x.toString();
                        x++
                    }

                    //load table and hide edit tools
                    loadVarTable(data[0].variables, false);

                    $("#compVariables").val(data[0].variables);

                    $("#text").val(data[0].text);
                    //$('#resourceFiles').val(data[0].resourceFiles);
                    $("#ft").val(data[0].ft);

                    if(data[0].hasOwnProperty("hist")){
                        $("#createdBy").val(data[0].hist[0].username);
                        $("#createdDate").val(data[0].hist[0].ds)
                    }

                })
            }

            //getSysByID
            var currentSysVarArr = {};
            function getSysByID(NodeID){
                clearSysFields();
                if(NodeID === 'local'){
                    $("#rightCol").hide();
                }else{
                    $("#rightCol").show();
                    $.get('/Sys', { id: NodeID }, function(data) {

                        // testing -----------V----------
                        var dispData = JSON.parse(JSON.stringify(data[0]) )  ;
                        $("#sysNodeData").val(JSON.stringify(dispData).split(',"').join(',\n"')  );
                        // testing ------------^---------

                        $("#id").val(data[0].id);
                        $("#comType").val(data[0].comType);
                        $("#parent").val(data[0].parent);
                        $("#sysName").val(data[0].name);
                        //$("#sysVersion").text(data[0].ver);

                        if(data[0].description.hasOwnProperty("ops")){
                            sysDescription.setContents(data[0].description.ops)
                        }else{
                            sysDescription.setContents(
                                [{ insert:  data[0].description },
                                    { insert: '\n' }]
                            );
                        };

                        //load var table
                        var pSysHtml = "";
                        var x = 0;
                        //get variables obj and add an index number to each member
                        if(data[0].variables){
                            currentSysVarArr = data[0].variables;
                        }else{
                            currentSysVarArr = {};
                        }
                        for(var varName in currentSysVarArr){
                            currentSysVarArr[varName].idn = x.toString();
                            x++
                        }
                        for(var varName in currentSysVarArr){
                            //new row
                            var idn = currentSysVarArr[varName].idn
                            pSysHtml = "<tr id='varSysRow_" + idn +"'" +  " class='d-flex varRow'>";

                            //add name col
                            pSysHtml += "<td class='col-3 varSysNameTd'>" +
                                "<i class='fa fa-pencil fa-fw sysVarEditButton' data-idn='" + idn +"'></i>" +
                                "<span id = 'varSysNameTd" + idn + "'></span>" +
                                "<i class='fa fa-times fa-fw sysVarDelButton' data-idn='" + idn +"'></i>" +
                                "</td>";

                            //add private col
                            pSysHtml += "<td class='col-1 center'>" + (data[0].variables[varName].private ? "Yes":"No") + "</td>";

                            //add value col
                            pSysHtml += "<td class='col-6 varValTd'>" +
                                "<span id = 'varSysValTd" + idn + "'></span>" +
                                "</td>";

                            pSysHtml += "</tr>";

                            $("#sysVariables").append(pSysHtml);
                            $("#varSysNameTd" + idn).text(varName);
                            $("#varSysValTd" + idn).text(data[0].variables[varName].value);
                        }

                        $(".newSysVarBtn").hide();
                        $(".sysVarDelButton").hide();
                        $(".sysVarEditButton").hide();
                        insertSysVarEditEvents();

                        $(".sysVarDelButton").on('click', function(){
                            var idn = $(this).attr('data-idn');
                            for(varName in currentSysVarArr){
                                if (currentSysVarArr[varName].idn == idn){
                                    delete currentSysVarArr[varName];break
                                }
                            }

                            $("#varSysRow_"+idn).remove();
                        });

                        $(".sysVarEditButton").on('click', function(){
                            var idn = $(this).attr('data-idn');
                            var newHtml = createSysVarEditHtml(idn);

                            $("#varSysRow_"+idn).html(newHtml);
                            insertSysVarEditEvents();
                            var varName = "";
                            for(var x in currentSysVarArr){
                                if (currentSysVarArr[x].idn == idn)(
                                    varName = x
                                )
                            }

                            $("#newSysVarName" + idn).val(varName);
                            $("#newSysVarPrivateInput" + idn)[0].checked = currentSysVarArr[varName].private;
                            $("#newSysVarValue" + idn).val(currentSysVarArr[varName].value);
                            $("#newSysVarPrivateDisp"+idn).html(currentSysVarArr[varName].private ? 'Yes' : 'No');

                            currentSysVarArr[varName].changed = idn;
                        });

                        $("#text").val(data[0].text);
                        $("#iconURL").val('');

                        if (data[0].hasOwnProperty("icon")){
                            var iconName = data[0].icon;
                            if(iconName !== ''){
                                var timestamp = new Date().getTime();
                                $("#sysIcon").html("<img width=21 height=21 src='/uploads/" + $("#id").val() +"/" + iconName + "?" + timestamp + "'>")
                            }
                        }else{
                            $("#sysIcon").html("")
                        }
                    });
                }
            }

            //getLibSysByID
            function getLibSysByID(NodeID, lib){

                clearSysFields();
                $.get('/LibSys', { id: NodeID, pickedLib:lib }, function(data) {
                    // testing -----------V----------
                    var dispData = JSON.parse(JSON.stringify(data[0]) )  ;
                    $("#sysNodeData").val(JSON.stringify(dispData).split(',"').join(',\n"')  );
                    // testing ------------^---------

                    $("#id").val(data[0].id);
                    $("#comType").val(data[0].comType);
                    $("#parent").val(data[0].parent);
                    $("#sysName").val(data[0].name);
                    //$("#sysVersion").text(data[0].ver);

                    if(data[0].description.hasOwnProperty("ops")){
                        sysDescription.setContents(data[0].description.ops)
                    }else{
                        sysDescription.setContents(
                            [{ insert:  data[0].description },
                                { insert: '\n' }]
                        );
                    };

                    //load var table
                    var pSysHtml = "";
                    var x = 0;
                    //get variables obj and add an index number to each member
                    if(data[0].variables){
                        currentSysVarArr = data[0].variables;
                    }else{
                        currentSysVarArr = {};
                    }
                    for(var varName in currentSysVarArr){
                        currentSysVarArr[varName].idn = x.toString();
                        x++
                    }

                    for(var varName in currentSysVarArr){
                        //new row
                        var idn = currentSysVarArr[varName].idn
                        pSysHtml = "<tr id='varSysRow_" + idn +"'" +  " class='d-flex varRow'>";

                        //add name col
                        pSysHtml += "<td class='col-3 varSysNameTd'>" +
                            "<i class='fa fa-pencil fa-fw sysVarEditButton' data-idn='" + idn +"'></i>" +
                            "<span id = 'varSysNameTd" + idn + "'></span>" +
                            "<i class='fa fa-times fa-fw sysVarDelButton' data-idn='" + idn +"'></i>" +
                            "</td>";

                        //add private col
                        pSysHtml += "<td class='col-1 center'>" + (data[0].variables[varName].private ? "Yes":"No") + "</td>";

                        //add value col
                        pSysHtml += "<td class='col-6 varValTd'>" +
                            "<span id = 'varSysValTd" + idn + "'></span>" +
                            "</td>";

                        pSysHtml += "</tr>";

                        $("#sysVariables").append(pSysHtml);
                        $("#varSysNameTd" + idn).text(varName);
                        $("#varSysValTd" + idn).text(data[0].variables[varName].value);
                    }

                    $("#text").val(data[0].text);
                    $("#iconURL").val('');

                    if (data[0].hasOwnProperty("icon")){
                        var iconName = data[0].icon;
                        if(iconName !== ''){
                            var timestamp = new Date().getTime();
                            $("#sysIcon").html("<img width=21 height=21 src='/library/" + pickedLib + "/uploads/" + $("#id").val() +"/" + iconName + "?" + timestamp + "'>")
                        }
                    }else{
                        $("#sysIcon").html("")
                    }
                });
            }

            function loadVarTable(variables, showTools){
                for(var varName in variables){
                    //new row
                    var idn = currentCompVarObj[varName].idn
                    pCompHtml = "<tr id='varRow_" + idn +"'" +  " class='d-flex varRow'>";

                    //add name col
                    pCompHtml += "<td class='col-3 varNameTd'>";
                    pCompHtml += showTools ? "<i class='fa fa-pencil fa-fw compVarEditButton' data-idn='" + idn +"'></i>" : "";
                    pCompHtml += "<span id = 'varNameTd" + idn + "'></span>";
                    pCompHtml += showTools ?"<i class='fa fa-times fa-fw compVarDelButton' data-idn='" + idn +"'></i>" : "";
                    pCompHtml += "</td>";

                    //add flag col
                    pCompHtml += "<td class='col-2 center compVarButtonRow'>"
                    pCompHtml += '<div class="compVarButton">' + (variables[varName].private ? "Yes":"No") + '</div>';
                    pCompHtml += '<div class="compVarButton">' + (variables[varName].promoted ? "Yes":"No") + '</div>';
                    pCompHtml += '<div class="compVarButton">' + (variables[varName].ask ? "Yes":"No") + '</div>';
                    pCompHtml += "</td>"

                    //add type col
                    var typeTxt = variables[varName].type;
                    pCompHtml += "<td class='col-2 center'>" + (typeTxt === "" ? "Text" : typeTxt) + "</td>";

                    //add value col
                    pCompHtml += "<td class='col-5 varValTd'>"
                    pCompHtml += "<span tabindex='0' id = 'varValTd" + idn + "'></span>"
                    if(typeTxt === "Color"){

                        pCompHtml += '<input id = "varValColor' + idn + '" type="color" class="colorPickerView" disabled="true" >'
                    }

                    pCompHtml += "</td>";

                    pCompHtml += "</tr>";

                    $("#compVariables").append(pCompHtml);

                    $("#varNameTd" + idn).text(varName);
                    var valText = variables[varName].value;
                    if(variables[varName].private){
                        valText = variables[varName].value === "" ? "" : "************"
                    }
                    if(valText.length >40){
                        valText = valText.substring(0, 37)+"...";
                        var valTextPop = variables[varName].value;
                        const options = {
                            animation: true,
                            content: valTextPop,
                            delay: { "show": 500, "hide": 50 },
                            trigger: 'hover',
                            template: '<div class="popover clickPop" role="tooltip"><div class="arrow clickPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'

                        }
                        $("#varValTd" + idn).popover(options);
                    }
                    $("#varValTd" + idn).text(valText);
                    $("#varValColor" + idn).val(valText);
                }
            }


            $(".varFlagLabel-pro" ).popover({
                animation: true,
                content: "Promote this variable to the dashboard",
                delay: { "show": 50, "hide": 100 },
                trigger: 'hover',
                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            });
            $(".varFlagLabel-pri" ).popover({
                animation: true,
                content: "Private variable's value is never copied",
                delay: { "show": 50, "hide": 100 },
                trigger: 'hover',
                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            });
            $(".varFlagLabel-ask" ).popover({
                animation: true,
                content: "Ask user for the value before component can be built",
                delay: { "show": 50, "hide": 100 },
                trigger: 'hover',
                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            });

            //clear all fields in a system
            function clearSysFields(){
                $("#id").val('');
                $("#parent").val('');
                $("#sysName").val('');
                //$("#sysVersion").text('');
                sysDescription.setContents("");
                $("#sysVariables").html('');

                $("#text").val('');
            }

            //run
            var refreshFlag = false;
            $("#run_button").click(function(event){
                var id = $("#id").val();
                var sys = $('#ft').val().split('/')[1];
                runJob(id, sys);
            });

            $("#runConfirmButton").on("click",function() {

                var currentRespText = "";
                var formData = new FormData();

                var ids = $("#idToBeRun").val();
                if($('#runClosestAn').is(':checked')){
                    if($("#ClosestRerunnableAn").val() !== ""){
                        ids = $("#ClosestRerunnableAn").val();
                    }
                }

                if($('#runRerunnableCh').is(':checked')){
                    formData.append('runRerunnableCh', 'yes');
                }else{
                    formData.append('runRerunnableCh', 'no');
                }

                var sys = $("#sysToBeRun").val();

                //build list of ids
                if($('#runChildrenCb').is(':checked')){
//                    var selectedNodes = $("#jstree_div").jstree(true).get_json(ids, { flat: true }); //returns parent and all children objs
//                    var selectedNodesArr = selectedNodes.map(a => a.id); //extract ids into arr
//                    if (selectedNodesArr.length > 0 ){
//                        ids = selectedNodesArr.join(';');
//                    }
                    formData.append('runChildren', 'true');
                }else{
                    formData.append('runChildren', 'false');
                }

                $("#results_codes").html('');
                $("#resultsStatus")[0].innerHTML = '';
                $("#results_html").addClass('result_fresh');
                $("#results_html").removeClass('result_history');

                formData.append('ids', ids);

                if($('#localStoreKeyCb').is(':checked')){
                    formData.append('storeLocal', 'yes');
                    formData.append('localStoredKey',localStorage['key_' + sys]);
                    //console.log("key:"+localStorage['key_' + sys]);
                }else{
                    formData.append('storeLocal', 'no');
                    localStorage['key_' + sys] = '';
                    localStorage['keyName_' + sys]='';

                }

//                if($('#localStoreAccessCb').is(':checked')){
//                    formData.append('storeLocalAccess', 'yes');
//                    formData.append('localStoredAccess',localStorage['access']);
//                    //console.log("key:"+localStorage['key_' + sys]);
//                }else{
//                    formData.append('storeLocalAccess', 'no');
//                    localStorage['access'] = '';
//                    localStorage['accessName' ]='';
//                }

                var files;
                files = $('#upload-key').get(0).files
                if( files.length === 1) {
                    var file = files[0];
                    // add the files to formData object for the data payload
                    formData.append('key', file, file.name);
                    if($('#localStoreKeyCb').is(':checked')) {
                        localStorage['keyName_' + sys] = file.name;
                    }
                    $('#upload-key').val("");
                }

//                files = $('#upload-access').get(0).files
//                if( files.length === 1) {
//                    var file = files[0];
//                    // add the files to formData object for the data payload
//                    formData.append('access', file, file.name);
//                    if($('#localStoreAccessCb').is(':checked')) {
//                        localStorage['accessName'] = file.name;
//                    }
//                    $('#upload-access').val("");
//                }

                var localKey="";
//                var localAccess="";

                $('.runningJob').removeClass('runningJob').removeClass('runningJobCompleteFail').removeClass("runningJobCompleteSuccess");
                $('.runningJobCompleteSuccess').removeClass('runningJob').removeClass('runningJobCompleteFail').removeClass("runningJobCompleteSuccess");
                $('.runningJobCompleteFail').removeClass('runningJob').removeClass('runningJobCompleteFail').removeClass("runningJobCompleteSuccess");

                var closedNodeList = [];
                var CompletionSuccess = false;
                var remainder = "";
                var buildIDRunning = '';

                $("#results_html").html(""); //if there is a new key file then it needs to be the first thing in this element. 'key:......'
                $.ajax({
                    url: '/run',
                    processData: false,
                    contentType: false,
                    type: 'POST',
                    data: formData,
                    xhr: function () {

                        $('#upload-key').val('');

                        var xhr = $.ajaxSettings.xhr();

                        var buildIDRunningPrev = '';
                        xhr.onprogress = function e() {
                            var rText = xhr.responseText

                            var rTextNew = rText.substr(currentRespText.length)
                            currentRespText = rText;
                            var rTextNew = remainder + ansi_up.ansi_to_html(rTextNew).replace(/(?:\r\n|\r|\n)/g, '<br>');

                            var sys = $("#sysToBeRun").val();

                            var newLines = rTextNew.split('<br>');

                            //Anything past the last <br> is probably an incomplete row. Lets remove it and tack it on to beginning of next response.
                            remainder = newLines[newLines.length - 1];
                            newLines.pop();

                            newLines.forEach(function(row){
                                //console.log(row);
                                if(row.substr(0,17) === 'message:Building:'){$("#resultsStatus").html(  " <img src='/images/throbber.gif'> " + row.slice(17)   );}
                                else if(row.substr(0,28) === 'status:All scripts completed'){
                                    $("#resultsStatus").html( "<b>All scripts completed</b>");
                                }
                                else if(row.substr(0,22) === 'status:Scripts Aborted'){
                                    $("#resultsStatus").append( " build error <i id='errorCompOpen' class='fa fa-fw fa-folder-open'>");
                                    $('#errorCompOpen').on('click', function(){
                                        $("#componentsBtn").click();
                                        $('#jstree_div').jstree("deselect_all");
                                        $('#jstree_div').jstree('select_node',buildIDRunning);
                                        $('#jstree_div').jstree(true).refresh(true)
                                    });
                                }
                                else if(row.substr(0,26) === 'message:CompletionSuccess:'){
                                    $('#results_html')[0].scrollTop = $('#results_html')[0].scrollHeight;
                                    if(row.slice(26) === 'true'){
//                                        $("#resultsStatus").append( "<i class='fa  fa-check fa-fw DashListRowPass'></i>");
                                        $("#resultsStatus").html(  $("#resultsStatus").html().replace('<img src="/images/throbber.gif">',"<i class='fa  fa-check fa-fw DashListRowPass'></i>"));
                                        CompletionSuccess = true;
                                    }else{
//                                        $("#resultsStatus").append( "<i class='fa  fa-times fa-fw DashListRowFail'></i>");
                                        $("#resultsStatus").html(  $("#resultsStatus").html().replace('<img src="/images/throbber.gif">',"<i class='fa  fa-times fa-fw DashListRowFail'></i>"));
                                        CompletionSuccess = false;
                                    }
                                }
                                else if(row.substr(0,4) === 'key:' &&  $("#results_html").html().split("<br>").join("") === "") {
                                    localKey += row.substr(4) + '\n';
                                }
                                else if(row.substr(0,12) === 'message:url:'){
                                    if($("#dashBtn").hasClass('active')){
                                        if($(".selectedDashRow").length > 0){
                                            $("#dashScreen").find("img").hide();
                                            $("#videoScreen").detach().appendTo('#dashScreen');
                                        }   
                                    }else{
                                        $("#videoScreen").detach().appendTo("#screenShotImageHolder");                                        
                                    }                                    
                                }
                                else if(row.substr(0,16) === 'message:BuildID:'){

                                    buildIDRunning = row.substring(
                                        row.lastIndexOf("[") + 1,
                                        row.lastIndexOf("]")
                                    );
                                    if(buildIDRunning !== ''){
                                        $('#' + buildIDRunning + '_anchor').removeClass('runningJobCompleteSuccess').removeClass('runningJobCompleteFail').addClass("runningJob");
                                        if(buildIDRunningPrev !== ''){
                                          //  $('#results_html').animate({scrollTop: $('#results_html').get(0).scrollHeight}, 200);
                                            //$('#results_html').scrollTop($('#results_html').get(0).scrollHeight);
//                                            $('#results_html').scrollTop = $('#results_html').scrollHeight;

                                            $('#' + buildIDRunningPrev + '_anchor').removeClass('runningJob').removeClass('runningJobCompleteFail').addClass("runningJobCompleteSuccess");
                                        }
                                        buildIDRunningPrev = buildIDRunning;

                                        if($("#componentsBtn").hasClass('active')) {
                                            //save a list of all closed nodes that were opened
                                            if ($('#jstree_div li#' + buildIDRunning + '.jstree-open').length !== 1) {
                                                closedNodeList.push(buildIDRunning)
                                            }

                                            var runningNode = $('#jstree_div').jstree(true).get_node(buildIDRunning, true);
                                            $("#jstree_div").jstree("open_node", buildIDRunning);
                                            runningNode.children('.jstree-anchor').focus();
                                        }
                                    }
                                }
                                else if(row.substr(0,28) === 'status:All scripts completed'){

                                    refreshFlag=true;
                               //     $('#jstree_div').jstree(true).refresh(true);
                                    $('#results_html').scrollTop($('#results_html').get(0).scrollHeight);

                                }
                                else if(row.substr(0,22) === 'status:Scripts Aborted'){
                                    //$('#jstree_div').jstree(true).redraw(true);
                                    refreshFlag=true;
                               //     $('#jstree_div').jstree(true).refresh(true);
                                }
                                else if(row.substr(0,12) === 'message:img:'){
//                                    var timestamp = new Date().getTime();
//                                    var imageLink = "/uploads/" + row.replace('message:img:','') + '?' +timestamp;
//                                    $('#screenShotImageDashboard')[0].src=imageLink  ;
//                                    $('#screenShotImage')[0].src=imageLink  ;

//                                    localStorage['lastSreenShot'] = imageLink;
//                                    $("#screenShotImageDashboard").show();
//                                    $("#screenShotImage").show();
                                }
                                else if(row.substr(0,16) === 'message:restart:'){

                                    //restart client in 3 seconds
                                    setTimeout(function(){location.reload(true)} , 3000);
                                }
                                else if(row.substr(0,15) === 'message:launch:'){

                                   let url = row.replace('message:launch:','');
                                   //window.open(url, '_blank')
                                    updateLaunchLink(url)
                                }
                                else{
                                    $("#results_html").append(row + '<br>');
//                                    $('#results_html')[0].scrollTop = $('#results_html')[0].scrollHeight;
                                }
                            })
                        };
                        return xhr;
                    }
                }).done(function (e) {
                    $('#results_html')[0].scrollTop = $('#results_html')[0].scrollHeight;
                    if(localKey !== '' && sys.length !== 0 && !localStorage['key_' + sys]  ){
                        if($('#localStoreKeyCb').is(':checked')) {
                            localStorage['key_' + sys] = localKey
                        }
                    }

                    localKey = "";

                    updateResultsList(selectedNode);

                    if($("#componentsBtn").hasClass('active')){
                        //close all nodes that were opened
                        for(var x in closedNodeList){
                            $("#jstree_div").jstree("close_node", closedNodeList[x]);
                        }
                        if(CompletionSuccess){
                            $('#jstree_div').jstree(true).get_node(selectedNode, true).children('.jstree-anchor').focus();
                        }else{
                            $('#jstree_div').jstree("deselect_all");
                            $('#jstree_div').jstree('select_node',buildIDRunning);
                            $('#jstree_div').jstree(true).get_node(buildIDRunning, true).children('.jstree-anchor').focus();
                        }

                    }else if($("#dashBtn").hasClass('active')){
                        if($(".selectedDashRow").length > 0){ 
                            // loadDashDetails($(".selectedDashRow").parent().attr("data-id"))
                        }                        
                    }
                    $('#jstree_div').jstree(true).refresh(true)
                }).fail(function (e) {

                    if(localKey !== '' && sys.length !== 0 && !localStorage['key_' + sys]  ){
                        if($('#localStoreKeyCb').is(':checked')) {
                            localStorage['key_' + sys] = localKey
                        }
                    }
//                    if(localAccess !== ''  && !localStorage['access'] ){
//                        if($('#localStoreAccessCb').is(':checked')) {
//                            localStorage['access'] = localAccess
//                        }
//                    }
                    localKey = "";
//                    localAccess = "";
                });

                $('#runModal').modal('toggle');
            });

            $('#runChildrenCb').on('change', function(){
                if(this.checked) {
                    $("#runRerunnableChGroup").show();
                }else{
                    $("#runRerunnableChGroup").hide();
                }
            });

            //launch run modal and populate values
            $('#runClosestAn').on('change', function(){
                if(this.checked) {
                    //call checkRerunnable to get rerunnable ancestor and update ui accordingly
                    checkRerunnable($("#idToBeRun").val())
                }else{
                    checkRerunnable($("#idToBeRun").val())
                    //enable run button hide warning
//                    $("#runConfirmButton").removeAttr("disabled");
//                    $("#closestAnWarning").text(" ");
//                    $.get('/getChildCount', { id: $("#idToBeRun").val() }, function(data) {
//                        const dataObj = JSON.parse(data);
//                        if(dataObj.count > 0){
//                            $("#runChildrenGroup").show();
//                            $("#runRerunnableChGroup").show();
//                        }else{
//                            $("#runChildrenGroup").hide();
//                            $("#runRerunnableChGroup").hide();
//                        }
               //         $("#buildModalTitleName").text($("#name").val());
//                    });
                }
            });

            function checkRerunnable(id){
                    $.get('/ClosestRerunnableAn', { id: id }, function(data) {

                    //data is expected to be json
                    const dataObj = JSON.parse(data);

                    //Place id in ClosestRerunnableAn input
                    //Hide or show warning/disable confirmation button if id is blank or comp is not enabled
                    $("#ClosestRerunnableAn").val(dataObj.id );

                    if($('#runClosestAn').is(':checked')){
                        $("#buildModalTitleName").text(dataObj.ClosestRerunnableAn.name);
                    }else{
                        $("#buildModalTitleName").text(dataObj.thisComp.name);
                    }



                    if(dataObj.id === id){
                        $("#runClosestAnGroup").hide();
                    }else{
                        $("#runClosestAnGroup").show();

                    }

//                        if(dataObj.systemFunction === 1){
//                            $('#runClosestAn').prop('checked', false);
//                            $("#buildModalTitleName").text($("#name").val());
//                        }
//                        else{
//                            $('#runClosestAn').prop('checked', true);
//
//                        }

                    //$("#buildModalTitleName").text(dataObj.thisComp.name);

                    if (dataObj.id !== "" && dataObj.ClosestRerunnableAn.enabled){
                        $("#runConfirmButton").removeAttr("disabled");
                        $("#closestAnWarning").text(" ");
                        $.get('/getChildCount', { id: dataObj.id }, function(data) {
                            const dataObj = JSON.parse(data);
                            if(dataObj.count > 0){
                                $("#runChildrenGroup").show();
                                $("#runRerunnableChGroup").show();
                            }else{
                                $("#runChildrenGroup").hide();
                                $("#runRerunnableChGroup").hide();
                            }
                        });
                    }else{
                        if(!dataObj.ClosestRerunnableAn.enabled){
                            $("#runConfirmButton").attr("disabled","true");
                            $("#closestAnWarning").text("Warning: Component "+dataObj.ClosestRerunnableAn.name+" is disabled.")
                        }
                        if(dataObj.id === ""){
                            $("#runConfirmButton").attr("disabled","true");
                            $("#closestAnWarning").text("Warning: None of the ansestors are rerunnable.")
                        }
                    }



                })
            }
            function runJob(id, sys){

                $("#idToBeRun").val(id);
                $("#sysToBeRun").val(sys);

                $('#runModal').modal('show');

                var storedKey ='';
                var storedKeyName = '';

                if (sys.length !== 0){
                    storedKey = localStorage['key_' + sys];
                    storedKeyName = localStorage['keyName_' + sys];
                    if(storedKey !== '' && typeof storedKey !== 'undefined'){
                        $('#localStoreKeyCb').prop('checked', true);
                        $('#keyList').html(storedKeyName) ;
                    }else{
                        $('#localStoreKeyCb').prop('checked', false);
                        $('#keyList').html('') ;
                    }
                }

//                var storedAccess ='';
//                var storedAccessName = '';
//                if (sys.length !== 0){
//                    storedAccess = localStorage['access'];
//                    storedAccessName = localStorage['accessName'];
//                    if(storedAccess !== '' && typeof storedAccess !== 'undefined'){
//                        $('#localStoreAccessCb').prop('checked', true);
//                        $('#accessList').html(storedAccessName) ;
//                    }else{
//                        $('#localStoreAccessCb').prop('checked', false);
//                        $('#accessList').html('') ;
//                    }
//                }
//                $.get('/BuildCode', { compId: id }, function(data) {
//
//                    if(data.length > 0){
//                        var bcObj = data[0];
//                        if(bcObj.systemFunction === 1){
//                            $('#runClosestAn').prop('checked', false);
//                            $("#buildModalTitleName").text($("#name").val());
//                        }else{
//                            $('#runClosestAn').prop('checked', true);
//
//                        }
//                    }
//                });
                checkRerunnable(id);
            }

            //remove
            $("#remove_button, #remove_sys_button").click(function(event){
                $('#delModal').modal('show');
            });

            $("#delConfirmButton").on("click",function() {

                clearJobFields();
                clearSysFields();

                var mydata = {};
                mydata.ids = selectedNode;

                if( selectedTree === 'working'){
                    var tree = $('#jstree_div');
                }else{
                    var tree = $('#jslibtree_div');
                }
                var treeNode = tree.jstree(true).get_node(selectedNode);
                var childs = treeNode.children_d;
                var parent = treeNode.parent;
                var listOfIds = selectedNode;
                if (childs.length > 0 ){
                    listOfIds += ';' + childs.join(';');
                }
                mydata.ids = listOfIds

                if( selectedTree === 'working') {
                    mydata.tree = 'working'
                }else{
                    mydata.tree = pickedLib
                }

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/remove',
                    data: JSON.stringify(mydata),
                    selectedNode:selectedNode,
                    parent:parent
                }).done(function (data) {
                    //console.log(data);

                    tree.jstree(true).delete_node(this.selectedNode);
                    tree.jstree(true).select_node(this.parent, false);
                    tree.jstree(true).redraw(true);

                }).fail(function (e) {
                    console.log('remove refresh fail' );
                    console.log(e );
                    $('#jstree_div').jstree(true).refresh()
                });

                $('#delModal').modal('toggle');
            });

            //Clear build History
            $("#clear_sys_button").click(function(event){
                $('#clearModal').modal('show');
            });
            $("#clearConfirmButton").on("click",function() {

                var mydata = {};
                mydata.ids = selectedNode;

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/clear',
                    data: JSON.stringify(mydata),
                    selectedNode:selectedNode,
                    parent:parent
                }).done(function (data) {
                    $('#jstree_div').jstree(true).refresh(true)

                }).fail(function (e) {
                    console.log('Clear history fail' );
                    console.log(e );
                    $('#jstree_div').jstree(true).refresh()
                });

                $('#clearModal').modal('toggle');
            });

            //edit
            $("#edit_button").click(function(event){
                editModeJob()
            });
            $("#edit_sys_button").click(function(event){
                editModeSys()
            });

            function editModeJob(){
                inputFields = $("#jobForm").find("input");
                inputFields.each(enableElement);
                inputFields = $("#jobForm").find("textarea");
                inputFields.each(enableElement);
                function enableElement(index, element) {
                    element.readOnly = false;
                }

                $(".templateTypeDropdownButton").attr("disabled" , false);

                $("#createdBy")[0].readOnly = true;
                $("#createdDate")[0].readOnly = true;
                $("#idDisp")[0].readOnly = true;

                $("#componentEnabledSlider").show();
                $("#promotedSlider").show();
                $("#rerunnableSlider").show();
                $("#sysFuncSlider").show();
                $("#runLocSlider").show();

                $("#edit_button").hide();
                $("#save_button").show();
                $("#cancelSave_button").show();
                $("#remove_button").hide();
                $("#new_button").hide();
                $("#run_button").hide();
                $("#insertVariable").show();
                $("#newTemplateButton").show();
                $("#newFileButton").show();
                $(".delFile").show();
                $("#moveUp_button").hide();
                $("#moveDn_button").hide();
                $("#screenShotImageHolder").show();
                $("#newImagePaste").show();
                $("#setImageBtn").hide();


                var checkBoxes = $(".varCheckboxFileList")
                if (checkBoxes.exists()){
                    checkBoxes.show();
                }

                $.get('/fileList', { id: $('#buildCode').val() }, function(data) {
                    $('#resourceFiles').val(data);
                    populateFileList($('#buildCode').val(), data, true, "#fileList");
                });
                $.get('/fileList', { id: $('#id').val() }, function(data) {
                    populateFileList($('#id').val(), data, true, "#fileCompList");
                });

                scriptEditor.renderer.$cursorLayer.element.style.display = "";
                scriptEditor.setReadOnly(false);

                description.enable(true);
                $(".ql-toolbar").show(0.3)

                for(var inx in currentTemplatesArr){
                    currentTemplatesArr[inx].renderer.$cursorLayer.element.style.display = "";
                    currentTemplatesArr[inx].setReadOnly(false);
                }

                $("#buildCodeBody").find(".ace_editor").removeClass("aceDisabled");

                $(".newCompVarBtn").show();
                $(".compVarDelButton").show();
                $(".compVarEditButton").show();
                $(".compVarEditValButton").hide();

                $("#buildCodeNameEdit").show();
                $("#buildCodeNameRead").hide();

                $("#snapButton").show();

                //remove click event from readModeJob
                $('#jobForm .ql-editor').unbind();
//                $('#jobForm .ql-editor').css("max-height","500px")
            }

            function readModeJob(){
                inputFields = $("#jobForm").find("input");
                inputFields.each(disableElement);
                inputFields = $("#jobForm").find("textarea");
                inputFields.each(disableElement);

                $("#componentEnabledSlider").hide();
                $("#promotedSlider").hide();

                $("#rerunnableSlider").hide();
                $("#sysFuncSlider").hide();
                $("#runLocSlider").hide();

                function disableElement(index, element) {
                    if(element.id !== "fakeInput"){
                        element.readOnly = true;
                    }
                }

                $("#edit_button").show();
                $("#save_button").hide();
                $("#cancelSave_button").hide();
                $("#remove_button").show();
                $("#new_button").show();

                $(".templateTypeDropdownButton").attr("disabled" , true);

                $("#run_button").show();

                $('#insertVariable').hide();
                $("#newTemplateButton").hide();
                $("#newFileButton").hide();
                $(".delFile").hide();
                $("#moveUp_button").show();
                $("#moveDn_button").show();
                var checkBoxes = $(".varCheckboxFileList")
                if (checkBoxes.exists()){
                    checkBoxes.hide();
                }

                scriptEditor.renderer.$cursorLayer.element.style.display = "none";
                scriptEditor.setReadOnly(true);
                //setAceBuildCodeHeight();

                description.enable(false);
                $(".ql-toolbar").hide(0.3)


                $(".newCompVarBtn").hide();
                $(".compVarDelButton").hide();
                $(".compVarEditButton").hide();
                $(".compVarEditValButton").hide()
                $("#screenShotImageHolder").show();
                $("#newImagePaste").hide();

                $("#buildCodeNameEdit").hide();
                $("#buildCodeNameRead").show();

                $("#snapButton").hide();

                $('#jobForm .ql-editor').unbind();
//                $('#jobForm .ql-editor').on('click', function(evt){
//                    if($('#jobForm .ql-editor').css("max-height") !== "900px"){
//                        $('#jobForm .ql-editor').css("max-height","900px")
//                    }else{
//                        $('#jobForm .ql-editor').css("max-height","70px")
//                    }
//
//                })

            }

            function editModeSys(){
                inputFields = $("#sysForm").find("input");
                inputFields.each(enableElement);
                inputFields = $("#sysForm").find("textarea");
                inputFields.each(enableElement);
                function enableElement(index, element) {
                    element.readOnly = false;
                }
                $("#edit_sys_button").hide();
                $("#save_sys_button").show();
                $("#remove_sys_button").hide();
                $("#clear_sys_button").hide();
                $("#new_sys_button").hide();

                $(".newSysVarBtn").show();

                $('#iconPaste').show()

                sysDescription.enable(true);
                $(".ql-toolbar").show()

                $(".newSysVarBtn").show();
                $(".sysVarDelButton").show()
                $(".sysVarEditButton").show()
            }

            function readModeSys() {
                inputFields = $("#sysForm").find("input");
                inputFields.each(disableElement);
                inputFields = $("#sysForm").find("textarea");
                inputFields.each(disableElement);

                function disableElement(index, element) {
                    element.readOnly = true;
                }

                $("#edit_sys_button").show();
                $("#save_sys_button").hide();
                $("#remove_sys_button").show();
                $("#clear_sys_button").show();
                $("#new_sys_button").show();
                $('#iconPaste').hide();

                sysDescription.enable(false);
                $(".ql-toolbar").hide()

                $(".newSysVarBtn").hide();
                $(".sysVarDelButton").hide();
                $(".sysVarEditButton").hide()
            }

            function readModeLibJob(){
                inputFields = $("#jobForm").find("input");
                inputFields.each(disableElement);
                inputFields = $("#jobForm").find("textarea");
                inputFields.each(disableElement);

                $("#componentEnabledSlider").hide();
                $("#promotedSlider").hide();
                $("#rerunnableSlider").hide();
                $("#sysFuncSlider").hide();
                $("#runLocSlider").hide();

                function disableElement(index, element) {
                    element.readOnly = true;
                }

                $("#edit_button").hide();
                $("#save_button").hide();
                $("#cancelSave_button").hide();
                $("#remove_button").hide();
                $("#new_button").hide();
                $("#run_button").hide();
                $("#new_button").hide();
                $("#run_button").hide();
                $('#insertVariable').hide();
                $("#newTemplateButton").hide();
                $("#newFileButton").hide();
                $(".delFile").hide();
                $("#moveUp_button").hide();
                $("#moveDn_button").hide();
                $("#screenShotImageHolder").hide();

                $("#buildCodeNameEdit").hide();
                $("#buildCodeNameRead").show();

                var checkBoxes = $(".varCheckboxFileList")
                if (checkBoxes.exists()){
                    checkBoxes.hide();
                }
            }

            function readModeLibSys(){
                inputFields = $("#sysForm").find("input");
                inputFields.each(disableElement);
                inputFields = $("#sysForm").find("textarea");
                inputFields.each(disableElement);

                function disableElement(index, element) {
                    element.readOnly = true;
                }
                $("#edit_sys_button").hide();
                $("#save_sys_button").hide();
                $("#remove_sys_button").show();
                $("#clear_sys_button").hide();
                $("#new_sys_button").hide();
                $('#iconPaste').hide()
            }

            $("#edit_button").disabled = true;
            $("#save_button").disabled = true;
            $("#cancelSave_button").disabled = true;
            $("#remove_button").disabled = true;
            $("#new_button").disabled = true;
            $("#run_button").disabled = true;
            $("#edit_sys_button").disabled = true;
            $("#save_sys_button").hide();
            $("#remove_sys_button").disabled = true;
            $("#clear_sys_button").disabled = true;
            $("#new_sys_button").disabled = true;

            $('#iconPaste').hide();
            $("#codes_btn").hide();

            $.fn.exists = function () {
                return this.length !== 0;
            }

            //cancel save job
            $("#cancelSave_button").click(function(event){
                $('#jstree_div').jstree(true).refresh(true);
            });

            //save Job
            $("#save_button").click(function(event){
                //console.log("submitting");

                $("#resultsStatus").html(  " <img src='/images/throbber.gif'> Saving..."   );

                var mydata = {};
                var id = $("#id").val();
                mydata.id = id;
                mydata.parent = $("#parent").val();
                mydata.name = $("#name").val();
                mydata.comType = $("#comType").val();

                mydata.newImageURL = $("#newImageURL").val();

                var delta = description.getContents();
                mydata.description = delta;

                if($('#componentEnabled').is(':checked')) {
                    mydata.enabled = 1;
                }else{
                    mydata.enabled = 0;
                }
                if($('#promoted').is(':checked')) {
                    mydata.promoted = 1;
                }else{
                    mydata.promoted = 0;
                }
                if($('#rerunnable').is(':checked')) {
                    mydata.rerunnable = 1;
                }else{
                    mydata.rerunnable = 0;
                }
                if($('#sysFunc').is(':checked')) {
                    mydata.systemFunction = 1;
                }else{
                    mydata.systemFunction = 0;
                }
                if($('#runLoc').is(':checked')) {
                    mydata.runLocal = 1;
                }else{
                    mydata.runLocal = 0;
                }

                //find changed/new variables and add them to currentCompVarObj;
                for(var idn in currentCompVarObj){

                    if(currentCompVarObj[idn].changed){
                        var currentRowCntStr = currentCompVarObj[idn].changed;
                        delete currentCompVarObj[idn].changed;

                        if($("#newCompVarName"+currentRowCntStr).val().trim() !== "" ){
                            delete currentCompVarObj[idn];
                            var newVarsObj = {};
                            newVarsObj["private"] = $("#newCompVarPrivateInput"+currentRowCntStr)[0].checked ? true : false;
                            newVarsObj["promoted"] = $("#newCompVarPromotedInput"+currentRowCntStr)[0].checked ? true : false;
                            newVarsObj["ask"] = $("#newCompVarAskInput"+currentRowCntStr)[0].checked ? true : false;
                            newVarsObj["type"] = $("#newCompVarTypeButton"+currentRowCntStr).text();
                            newVarsObj["value"] = $("#newCompVarValue"+currentRowCntStr).val();

                            currentCompVarObj[$("#newCompVarName"+currentRowCntStr).val()]  = newVarsObj;
                        }else{
                            delete currentCompVarObj[idn];
                        }
                    }
                }

                //push compVariables
                mydata.compVariables = currentCompVarObj;

                //push script
                mydata.script = scriptEditor.getValue();

                //push custom templates
                var templatesArr = [];
                var x=0;
                currentTemplatesArr.forEach(function(row){
                    var aceVal = currentTemplatesArr[x].getValue().trim()+"\n";
                    if(aceVal !== "\n" ){
                        var thisIndexStr = (x).toString();

                        templatesArr.push({c:aceVal, t:$("#templateType" + thisIndexStr).val()});
                    }
                    x++;
                })

                mydata.templates = {tempArr:templatesArr};

                mydata.text = $("#text").val();
                mydata.resourceFiles = $('#resourceFiles').val();

                mydata.buildCode = $("#buildCode").val();

                mydata.buildCodeName = $("#newBuildCodeName").val();

                $.ajax({
                    type: 'POST',
                    data: JSON.stringify(mydata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/save',
                    id: mydata.id,
                    success : function(result) {

                        $("#resultsStatus").html("<i class='fa  fa-check fa-fw DashListRowPass'></i> Save Complete");

                        var resultJSON = JSON.parse(result);
                        $("#id").val(resultJSON.id);
                        $("#text").val(resultJSON.text);

                        $('#jstree_div').jstree(true).refresh(true);


                        $.get('/fileList', { id: $('#buildCode').val() }, function(data) {
                            $('#resourceFiles').val(data);
                            populateFileList($('#buildCode').val(), data, false, "#fileList");
                        });
                        $.get('/fileList', { id: $('#id').val() }, function(data) {
                            populateFileList($('#id').val(), data, false, "#fileCompList");
                        });
                    },
                    error : function(error) {

                        console.log(error);
                        $("#resultsStatus").html("<i class='fa  fa-times fa-fw DashListRowFail'></i> Save Failed! See console log");

                    }
                });
            });

            //save Sys
            $("#save_sys_button").click(function(event){
                //console.log("submitting");
                var mydata = {};
                mydata.id = $("#id").val();
                mydata.parent = $("#parent").val();
                mydata.name = $("#sysName").val();
                mydata.comType = $("#comType").val();

                var delta = sysDescription.getContents();
                mydata.description = delta;

                //find changed/new variables and add them to currentSysVarArr;
                for(var idn in currentSysVarArr){

                    if(currentSysVarArr[idn].changed){
                        var currentRowCntStr = currentSysVarArr[idn].changed;
                        delete currentSysVarArr[idn].changed;

                        if($("#newSysVarName"+currentRowCntStr).val().trim() !== "" ){
                            delete currentSysVarArr[idn];
                            var newVarsObj = {};
                            newVarsObj["private"] = $("#newSysVarPrivateInput"+currentRowCntStr)[0].checked ? true : false;
                            newVarsObj["type"] = "";
                            newVarsObj["value"] = $("#newSysVarValue"+currentRowCntStr).val();

                            currentSysVarArr[$("#newSysVarName"+currentRowCntStr).val()]  = newVarsObj;
                        }else{
                            delete currentSysVarArr[idn];
                        }
                    }
                }

                //push sysVariables
                mydata.sysVariables = currentSysVarArr;

                mydata.text = $("#text").val();
                mydata.iconURL = $("#iconURL").val();

                $.ajax({
                    type: 'POST',
                    data: JSON.stringify(mydata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/save',
                    success : function(result) {
                        //readModeSys();
                        var resultJSON = JSON.parse(result);
                        $("#id").val(resultJSON.id);
                        $("#text").val(resultJSON.text);
                        $('#jstree_div').jstree(true).refresh();
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            })

            //re-sort components
            $("#moveUp_button, #moveUp_sys_button").click(function(event){
                //console.log("up");
                $.get('/Move', { id: selectedNode, direction: 'up' }, function(data) {
                    var newPos = data.newPos;
                    var oldPos = data.oldPos;
                    var otherId = data.otherId;
                    if (otherId !== '') {
                        var nodeInst = $('#jstree_div').jstree(true).get_node(selectedNode);
                        var otherInst = $('#jstree_div').jstree(true).get_node(otherId);
                        nodeInst.original.sort = newPos;
                        otherInst.original.sort = oldPos;
                        var parent = $("#parent").val() == "#" ? "local" : $("#parent").val();
                        $('#jstree_div').jstree("move_node", nodeInst, parent, newPos);
                        $('#jstree_div').jstree("move_node", otherInst, parent, oldPos);
                    }
                })
            })

            $("#moveDn_button, #moveDn_sys_button").click(function(event){
                //console.log("down");
                $.get('/Move', { id: selectedNode, direction: 'down' }, function(data) {
                    var newPos = data.newPos;
                    var oldPos = data.oldPos;
                    var otherId = data.otherId;
                    if (otherId !== '') {
                        var nodeInst = $('#jstree_div').jstree(true).get_node(selectedNode);
                        var otherInst = $('#jstree_div').jstree(true).get_node(otherId);
                        nodeInst.original.sort = newPos;
                        otherInst.original.sort = oldPos;
                        var parent = $("#parent").val() == "#" ? "local" : $("#parent").val();
                        $('#jstree_div').jstree("move_node", nodeInst, parent, newPos);
                        $('#jstree_div').jstree("move_node", otherInst, parent, oldPos);
                    }
                })
            })

            //save id
            $("#changeIdSaveButton").on("click",function() {
                console.log("saving id");
                var myIddata = {};
                myIddata.newPassword = $("#newPassword").val();
                myIddata.newPasswordAgain = $("#newPasswordAgain").val();

                $.ajax({
                    type: 'POST',
                    data: JSON.stringify(myIddata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/saveId',
                    success : function(result) {

                            $("#saveProfileResults").text(result)

                        },
                    error : function(error) {
                        console.log(error)
                    }
                });
            });

            //Insert Var
            $("#insertVarButton").on("click",function() {

                var pasteText = '';
                var scopeRadioVal = $('input[name="insertScope"]:checked').val();
                var scopeCode;
                if (scopeRadioVal === 'Component'){scopeCode = 'c'};
                if (scopeRadioVal === 'Parent'){scopeCode = 'p'};
                if (scopeRadioVal === 'Ancestors'){scopeCode = 'a'};
                if (scopeRadioVal === 'Same System'){scopeCode = 's'};
                $('.varCheckbox:checkbox:checked').each(function () {
                    var thisLink = scopeCode + '.' + $(this).val().split('.')[1];
                    if (thisLink !== ""){
                        pasteText += '<%%' + thisLink + '%> '
                    }
                });

                $('#varModal').modal('toggle');
                //insertAtCaret('script', pasteText);
                scriptEditor.insert(pasteText);

            });

            $('#varModal').on('shown.bs.modal', function() {
                getVariables("Parent");
                //console.log('got vars');
            });

            $( 'input[name="insertScope"]:radio' ).change(function(){
                getVariables(this.value);
            });

            //populates variables in the Insert Variables modal
            function getVariables(scope){
                var mydata = {systemId: $("#ft").val().split("/")[1]};
                var scopeRadioVal = $('input[name="insertScope"]:checked').val();
                var html = "<div class='varBody'><table style='width: 100%;' aria-describedby='insertVarTable_info' role='grid' class='table table-striped table-bordered table-hover dataTable no-footer dtr-inline var_Table' id='insertVarTable' width='100%'>";
                html += "<thead>";
                html += "<tr role='row'>" +
                    "<th aria-label='Path: activate to sort column descending' aria-sort='ascending' style='width: 10%;' colspan='1' rowspan='1' aria-controls='insertVarTable' tabindex='0' class=''>Path</th>" +
                    "<th aria-label='Variable: activate to sort column ascending' style='width: 30%;' colspan='1' rowspan='1' aria-controls='insertVarTable' tabindex='0' class='sorting'>Variable</th>" +
                    "<th aria-label='Current Value: activate to sort column ascending' style='width: 60%;' colspan='1' rowspan='1' aria-controls='insertVarTable' tabindex='0' class='sorting'>Current Value</th>" +
                    "</tr>";
                html += "</thead>";
                html += "<tbody>";
               // $("#insertVarBody").html(html) ;

                if(scopeRadioVal === "Component" ){
                   // var compVarsArr = [];
                    for(var cVar in currentCompVarObj){
                    //    compVarsArr.push(currentCompVarObj[cVar])
                        var currentVal = currentCompVarObj[cVar].value;
                        html += "<tr role='row' class='gradeA odd'><td width = '10%'>"
                        html +="<input value='c."  + cVar + "' type='checkbox' class='varCheckbox pull-right'>";
                        html +="</td><td class='var_Table_td' width = '30%'>" + cVar + '</td>' + "<td class='var_Table_td' width = '60%'>" + currentVal  + '</td>'
                        html += "</tr>";

                    }

                    html += "</tbody></table></div>"
                    $("#insertVarBody").html(html)

                }else{
                    $.ajax({
                        type: 'get',
                        data: mydata,
                        dataType : "text",
                        insertScope : scopeRadioVal,
                        headers: {
                            "content-type": "application/json",
                        },
                        url: '/getVars',
                        success : function(result) {

                            var ResultsJson = JSON.parse(result);

                            if (this.insertScope == 'Parent'){
                                for (var key in ResultsJson) {
                                    if (ResultsJson.hasOwnProperty(key)) {
                                        if (ResultsJson[key].link !== $('#parent').val()) {
                                            delete ResultsJson[key]
                                        }
                                    }
                                }
                            }

                            if (this.insertScope === 'Ancestors'){
                                for (var key in ResultsJson) {
                                    if (ResultsJson.hasOwnProperty(key)) {
                                        var currentFtArr = $('#ft').val().split('/');
                                        if(jQuery.inArray(ResultsJson[key].link, currentFtArr) === -1){
                                            delete ResultsJson[key]
                                        }
                                    }
                                }
                            }

                            var thisSid = $('#ft').val().split('/')[1];
                            if (this.insertScope == 'Same System'){
                                for (var key in ResultsJson) {
                                    if (ResultsJson.hasOwnProperty(key)) {

                                        if (ResultsJson[key].ft.split('/')[1] !== thisSid && ResultsJson[key].link !== thisSid ) {
                                            delete ResultsJson[key]
                                        }
                                    }
                                }
                            }

                            for (var key in ResultsJson) {
                                if (ResultsJson.hasOwnProperty(key)) {
                                    if(ResultsJson[key].path !== last_path){
                                        html += "<tr role='row' class='gradeA odd' >";
                                        html += "<td  class='var_Table_td ' colspan=3 >" + ResultsJson[key].path + '</td></tr>'
                                    }
                                    var last_path = ResultsJson[key].path;
                                    var currentVal = ResultsJson[key].row.trim().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
                                    html += "<tr role='row' class='gradeA odd'><td width = '10%'>"
                                    html +="<input value='" + ResultsJson[key].link + '.' + ResultsJson[key].varName + "' type='checkbox' class='varCheckbox pull-right'>";
                                    html +="</td><td class='var_Table_td' width = '30%'>" + ResultsJson[key].varName + '</td>' + "<td class='var_Table_td' width = '60%'>" + currentVal  + '</td>'
                                    html += "</tr>";
                                }
                            }
                            html += "</tbody></table></div>"
                            $("#insertVarBody").html(html) ;
                        },
                        error : function(error) {
                            console.log(error)
                        }
                    })
                }

            }

            //Updates the list of results when a component is selected
            function updateResultsList(targetID){
                $("#results-group").html("");
                $.get('/resultsList', { id: targetID }, function(data) {
                    var html = " <div class='panel panel-default'>";
                    html += "       <div class='panel-heading cust-panel-heading'><i class='fa  fa-calendar fa-fw'></i>Build History</div>";
                    html += "       <div class='panel-body results-list-body'>";
                    html += "           <div id='results-group' class='list-group results-group'>";

                    data.forEach(function(row){
                        var selectedFile = row.file;
                        var timeStr = selectedFile.split('_')[1];
                        var pass = selectedFile.split('_')[2];
                        // var formattedTimeStr = formatTimeStr(timeStr);

                        var formattedTimeStr = new Date(timeStr).toLocaleString();
                        html += "               <a href='#' class='list-group-item resultsListRow' data-ID='" + selectedFile+"'>";
                        if(pass == 'p'){
                            html += "               <i class='fa  fa-check fa-fw'></i>"  ;
                        }else{
                            html += "               <i class='fa  fa-times fa-fw'></i>"  ;
                        }
                        html += "               <span class='pull-right  small'><em>" + formattedTimeStr + "</em>";
                        html += "               </span>";
                        html += "               </a>";
                    });

                    html += "</div></div></div>";

                    var prevHeight = $('#results-group').height();

                    $("#results-list").html(html);
                    $('#results-group').height(prevHeight);

                    $('.resultsListRow').on('click', function(){
                        var id = $(this).attr('data-ID');
                        $("#results_html").html('');
                        $("#results_codes").html('');
                        $('#messageSpan').html('');
                        $("#codes_btn").show();

                        $.get('/getResults', { id: id }, function(data) {
                            var results = JSON.parse(data);
                            //var htmlrows="";

                            results.forEach(function(row){

                                if (typeof row.results !== 'undefined') {
                                    var htmlRow = ansi_up.ansi_to_html(row.results);
                                    if (row.x === '') {
                                        $("#results_html").html($("#results_html").html() + htmlRow)
                                    } else {
                                        $("#results_html").html($("#results_html").html() + "var:" + row.x + ":" + htmlRow)
                                    }
                                }

                                if (typeof row.cc !== 'undefined'){
                                    if(row.cc !== ''){
                                        var coderows="";
                                        row.cc.data.forEach(function(ccode){
                                            coderows += ('0'+ccode.toString(16)).slice(-2)+ ' ';
                                        })
                                        $("#results_codes").html($("#results_codes").html() + coderows.replace(/0d (?!0a)/g,'0d<br/>').replace(/0d 0a /g,'0d 0a<br/>'));
                                    }
                                }

                                if (typeof row.m !== 'undefined') {
                                    $("#results_html").append("message:" + row.m + "<br/>")
                                    $("#results_codes").append("<br/>")
                                }
                            });

                            $("#results_codes").html( $("#results_codes").html() +'<br/><br/><br/>');
                            $("#results_html").addClass('result_history');
                            $("#results_html").removeClass('result_fresh');
                        });
                    });
                });
            };

            //sync result and codes scroll
            $('.scroller').scroll(function(e) {
                $('.scroller').scrollTop(e.target.scrollTop);
            });

            $("#sys-form-panel").scroll(function(){
                updateAllPopovers();
            });
            $("#job-form-panel").scroll(function(){
                updateAllPopovers();
            });
            $("#dashBoardBottomRow").scroll(function(){
                updateAllPopovers();
            });
            $("#dashRow").scroll(function(){
                updateAllPopovers();
            });

            $("#new_button, #new_sys_button").on("click",function() {
                var mydata = {};
                mydata.id = "NewChild";
                mydata.parent = selectedNode;
                mydata.name = "New Component";
                mydata.description = "";
                mydata.script = "";
                mydata.text = "New Component";
                mydata.comType = "job";
                createNode(mydata);
            });

            $("#sysScreen").hide(); 
            $("#jobScreen").hide();

            var currentCopyObj = {};
            var currentCopySysObj = {};
            $("#paste_button, #paste_to_sys_button").hide();
            $("#paste_sys_button").hide();
            $("#paste_sys_lib_button").hide();
            $("#copy_button").on("click",function() {
                currentCopyObj = {"id":$("#id").val(), "lib":"working", "name": $("#text").val()};
                $("#paste_button").show();
                $("#paste_to_sys_button").show();
                $("#paste_button, #paste_to_sys_button").popover('dispose').popover({
                    animation: true,
                    content: currentCopyObj.lib + " : " + $("#text").val(),
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $(this).popover('dispose').popover({
                    animation: true,
                    content: "Copied "+currentCopyObj.lib + " : " + $("#text").val(),
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $(this).popover("show");
            });
            $("#paste_button, #paste_to_sys_button").on("click",function() {
                const targetNodeId = $("#id").val();
                const pos = 1;
                const targetNode =  $('#jstree_div').jstree(true).get_node(targetNodeId);
                const fromNode =  $('#jstree_div').jstree(true).get_node(currentCopyObj.id);
                $('#copyModal_newPosition').val(pos);

                showCopyModal(fromNode, targetNodeId,targetNode );
            });

            $("#copy_sys_button").on("click",function() {
                currentCopySysObj = {"id":$("#id").val(), "lib":"working", "name": $("#text").val()};
                $("#paste_sys_button, #paste_sys_lib_button").popover('dispose').popover({
                    animation: true,
                    content: "System : " + $("#text").val(),
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $(this).popover('dispose').popover('dispose').popover({
                    animation: true,
                    content: "Copied System : " + $("#text").val(),
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $(this).popover("show");
            });
            $("#paste_sys_button").on("click",function() {
                const targetNodeId = "local";
                const pos = 1;
                const targetNode =  $('#jstree_div').jstree(true).get_node(targetNodeId);
                const fromNode =  $('#jstree_div').jstree(true).get_node(currentCopySysObj.id);
                $('#copyModal_newPosition').val(pos);

                showCopyModal(fromNode, targetNodeId,targetNode );
            });

            $("#paste_sys_lib_button").on("click",function() {
                const targetNodeId = "lib";
                const pos = 1;
                const targetNode =  $('#jslibtree_div').jstree(true).get_node(targetNodeId);
                const fromNode =  $('#jstree_div').jstree(true).get_node(currentCopySysObj.id);
                $('#copyModal_newPosition').val(pos);

                showLibCopyModal(fromNode, targetNodeId,targetNode );
            });

            $('.newSys').on('click', function(){
                var mydata = {};
                mydata.id = "NewSys";
                mydata.parent = '#';
                mydata.name = "New System";
                mydata.description = "";
                mydata.script = "";
                mydata.text = "new Sys";
                mydata.comType = "system";
                createNode(mydata);
            });
            $(".newSys").popover({
                animation: true,
                content: "Create a new system",
                delay: { "show": 500, "hide": 100 },
                trigger: 'hover',
                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            });

            //new custom template
            $('.newCust').on('click', function(){

                var nextValidIndex = 0;

                //reuse the first ace instance where isValid not equ true
                while(currentTemplatesArr[nextValidIndex]){
                    if( ! currentTemplatesArr[nextValidIndex].isValid){
                        break;
                    }
                    nextValidIndex++;
                }
                if (nextValidIndex > 99){
                    alert("error: too many templates");
                }else{

                    if(!currentTemplatesArr[nextValidIndex]){
                        var inHtml = authorTemplateHTML(nextValidIndex, false);

                        $('#custTemplates').append(inHtml);

                        currentTemplatesArr.push(ace.edit("template"+nextValidIndex.toString()));

                        currentTemplatesArr[currentTemplatesArr.length-1].session.setMode("ace/mode/text");
                        document.getElementById("template"+nextValidIndex.toString()).style.fontSize='14px';

                        loadjobTempTypeDropdown(nextValidIndex);
                        setAceStyle(currentStyleName);

                        $("#templateWindowMax"+nextValidIndex.toString()).click( function(){
                            var inx = parseInt($(this).attr('data-inx'), 10);
                            setTempAceHeight(inx, "max")
                        })
                        $("#templateWindowMin"+nextValidIndex.toString()).click( function(){
                            var inx = parseInt($(this).attr('data-inx'), 10);
                            setTempAceHeight(inx, "min")
                        })
                    }else{
                        $("#templateBlock" + nextValidIndex.toString()).show();
                    }


                }
            });

            function authorTemplateHTML(x, disabled){
                var inHtml = "<div class='form-group' id='templateBlock"+x.toString()+"'>";
                inHtml += "     <div>";
                inHtml += "         <label class='build-label'>Template "+ (x > 0 ? (x + 1).toString() : "") +"</label>";
                inHtml += "         <input type='hidden' id='templateType"+x.toString()+"'>"
                inHtml += "         <button "+ (disabled ? "disabled": "") +" class='dropdown-toggle templateTypeDropdownButton' type='button' id='dropdownTemplateTypeButton"+x.toString()+"' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'>"
                inHtml += "Pick..."
                inHtml += "         </button>"
                inHtml += "     <span class='templateWindowSizeButtons'>" +
                    "<a href='#' id='templateWindowMin"+x.toString() + "' data-inx='"+x.toString()+"'><i class=' fa fa-window-minimize fa-fw'></i></a>" +
                    "<a href='#' id='templateWindowMax"+x.toString() + "' data-inx='"+x.toString()+"'><i class=' fa fa-window-maximize fa-fw'></i></a>" +
                    "</span>";
                inHtml += "     <div id='dropdownTemplateTypeMenu"+x.toString()+"' class='dropdown-menu dropdownTemplateTypeMenu' aria-labelledby='dropdownTemplateTypeButton"+x.toString()+"'></div>"
                inHtml += "     </div>";
                inHtml += "     <div class='card templateCard' id='templateCard"+ x.toString() +"'>"
                inHtml += "         <div id='template"+x.toString()+"' class='jobCodeEditor'></div>"
                inHtml += "     </div>"
                inHtml += "</div>";
                return(inHtml);
            }

            //min codes window
            $('.codes_btn_min').on('click', function(){
                const container = $('#rowContainer');
                bottomMinimizedFlag = true;
                setWindowHeight(container.height()- 28 ,  true);
                currentHeight = container.height()- 28
                currentRatio = currentHeight / container.height();
            });

            //max codes window
            $('.codes_btn_max').on('click', function(){
                const container = $('#rowContainer');
                bottomMinimizedFlag = false;
                setWindowHeight(container.height()/2 ,  true);
                currentHeight = container.height() / 2
                currentRatio = currentHeight / container.height();
            });

            //click show code button
            $('.codes_btn').on('click', function(){
                if($("#results_codes").is(":visible")){
                    hideCodes()
                }else{
                    showCodes()
                }
            });

            function hideCodes(){
                $("#results_codes").hide();
                $("#results_html").css("width", "100%");
                $("#results_html").css("overflow-y", "auto");
            }
            function showCodes(){
                $("#results_codes").show();
                $("#results_html").css("width", "50%");
                $("#results_html").css("overflow-y", "hidden");
            }
            hideCodes();

            //Define the current selected working node for several functions
            var selectedWorkingNode = "#"; //default Root

            //Define the current selected node for several functions
            var selectedNode = "#"; //default Root

            //Define the current selected tree for several functions
            var selectedTree = "working"; //default 'working' (aka local aka dashboard) tree

            //Create new component or system
            function createNode(mydata) {
                $.ajax({
                    type: 'POST',
                    data: JSON.stringify(mydata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/save',
                    success : function(result) {
                        $('#jstree_div').jstree(true).open_node(mydata.parent, false);
                        var resultJSON = JSON.parse(result);
                        var node = { "id" : resultJSON.id };
                        node.name = resultJSON.name;
                        node.text = resultJSON.text;
                        node.comType = resultJSON.comType;

                        $('#jstree_div').jstree('create_node', resultJSON.parent, node, 'last', function(){

                            var newNode = $("#jstree_div").jstree(true).get_node(resultJSON.id);

                            $('#jstree_div' + " li[id=" + resultJSON.id + "] a").click();
                            $('#jstree_div').jstree(true).refresh(true);
                        });
                    },
                    error : function(error) {
                        console.log(error)
                    }
                });
            }

            var ansi_up = new AnsiUp;
            var isResizingHeight = false;
            var isResizingWidth = false;
            var isResizingLibWidth = false;
            var treeWidth = 240;
            var libTreeWidth = 240;
            const container = $('#rowContainer');
            var currentHeight = container.height()- 30   //container.height() * .75; //default height
            currentHeight += currentHeight < 10 ? 10 - currentHeight : 0;
            currentRatio = currentHeight / container.height();

            //drag height & width events
            $(function () {
                var heightHandle = $('#rowHandle');
                var widthHandle = $('#treePanelHandle');
                var libWidthHandle = $('#libTreePanelHandle');



                heightHandle.on('mousedown', function (e) {
                    isResizingHeight = true;
                    //lastDownY = e.clientY;
                });
                widthHandle.on('mousedown', function (e) {
                    isResizingWidth = true;
                });
                libWidthHandle.on('mousedown', function (e) {
                    isResizingLibWidth = true;
                });

                $(".container-fluid-custom").height(window.innerHeight);
                $("#dashboard").height(window.innerHeight - 30);
                $(window).on('resize', function(){
//                    window.addEventListener(orientationEvent, function() {
//                        alert('HOLY ROTATING SCREENS BATMAN:' + window.orientation + " " + screen.width);
//                    }, false);
                    $(".container-fluid-custom").height(window.innerHeight);
                    $("#dashboard").height(window.innerHeight - 30);
                    const container = $('#rowContainer');
                    if(bottomHiddenFlag){
                        setWindowHeight(container.height() ,  false);
                    }else{
                        setWindowHeight(container.height() * currentRatio ,  false);
                    }
                    
                    updateAllPopovers();

                });

                $(document).on('mousemove', function (e) {
                    const container = $('#rowContainer');
                    if (!isResizingHeight && !isResizingWidth && !isResizingLibWidth)
                        return;
                    if(isResizingHeight){
                        e.preventDefault();
                        var topHeight = e.clientY;
                        currentHeight = e.clientY;
                        currentHeight += currentHeight < 10 ? 10 - currentHeight : 0
                        currentRatio = currentHeight / container.height();
                        bottomMinimizedFlag = false;
                        setWindowHeight(topHeight-5, false);
                    }

                    if(isResizingLibWidth){
                        e.preventDefault();
                        var leftWidth = e.clientX;
                        setLibWindowWidth(leftWidth , container);
                        updateAllPopovers()
                    }

                    if(isResizingWidth){
                        e.preventDefault();
                        var leftWidth = e.clientX;
                        const container = $('#rowContainer');

                        if($( "#sidebar" ).hasClass( "show" )){
                            setWindowWidth(leftWidth - $("#sidebar").width() - 2, container, false);
                        }else{
                            setWindowWidth(leftWidth - 2, container, false);
                        }

                        updateAllPopovers();
                        setWindowHeight(container.height() * currentRatio ,  false);
                    }

                }).on('mouseup', function (e) {
                    isResizingHeight = false;
                    isResizingWidth = false;
                    isResizingLibWidth = false;
                });
            });

            function updateAllPopovers(){
                //incase the window changed during tour
                if(currentGhostEle !== ""){
                    var eleJObj = $("#"+currentGhostEle);
                    var eleObj = document.getElementById(currentGhostEle);
                    var ghostObj = $("#floatingPopover");
                    var bounds = getOffset(eleObj)

                    var width = eleJObj.width();
                    var height = eleJObj.height();
                    ghostObj.css({'width':width + 'px'});
                    ghostObj.css({'height':height + 'px'});
                    ghostObj.css({'top':bounds.top + 'px', 'left':bounds.left + 'px' });
                }
                //update all popovers because why not
                $(".popover").popover("update");
            }

            //Calling this function will set the height of each element in the view
            function setWindowHeight(topHeight, AnimateIt){
                //console.log(topHeight);
                const container = $('#rowContainer');
                var heightAniDuration = 0 ;
                if(AnimateIt){heightAniDuration = 300}

                var mainSysPanel = document.getElementById("sysPanel");
                var heightOffsetSys  =  mainSysPanel.getBoundingClientRect().top;

                var mainJobPanel = document.getElementById("mainJobPanel");
                var heightOffsetJob  =  mainJobPanel.getBoundingClientRect().top;

                var leftCol = document.getElementById("jstree_div");
                var leftHeightOffset  =  leftCol.getBoundingClientRect().top;

                if(bottomMinimizedFlag == true){
                    topHeight = currentHeight = container.height() - 28;
                }

                if(!bottomHiddenFlag){
                    if (topHeight > (container.height() - 32) ){
                        topHeight = container.height() - 32;
                        bottomMinimizedFlag = true;
                    }

                    if (topHeight < (container.height() * .2)){
                        topHeight = container.height() * .2
                    }

                    $("#jstree_div").animate({height: (topHeight - leftHeightOffset )},heightAniDuration);

                    $("#job-form-panel").animate({height: (topHeight - heightOffsetJob)},heightAniDuration);

                    $("#leftResultsCol").animate({height: (topHeight - (15 + 33 + 38))},heightAniDuration);

                    $("#build-results-row").animate({height: (topHeight - (15 + 33 + 21))},heightAniDuration);

                    $('#results_html').animate({height: container.height() - topHeight - (34 + 15)},heightAniDuration);

                    $('#results-group').animate({height: container.height() - topHeight - (34 + 15)},heightAniDuration);
                }else{

                    var winHeight = $(window).height();
                    $("#jstree_div").height(winHeight - leftHeightOffset);

                    $("#job-form-panel").height(winHeight -heightOffsetSys );
                }
            }

            function setLibWindowWidth(leftWidth, container){
                if (leftWidth < (container.width() * .8) && leftWidth > 19 ){
                    libTreeWidth = leftWidth;

                    $("#leftLibCol").css('width',leftWidth  - 2);
                    
                    $("#libTreePanel").css('width',leftWidth - 7);

                }
            }
            setLibWindowWidth(20, container);

            function setWindowWidth(leftWidth, container){
//                console.log(leftWidth);
                if (leftWidth < (container.width() * .5) && leftWidth > 0 ){
                    treeWidth = leftWidth;
                    $("#treePanel").css('width',treeWidth -3);
                    localStorage['locTreeWidth'] = JSON.stringify({width:leftWidth});
                }
            }
            if(!localStorage['locTreeWidth']){
                setWindowWidth(250, container);
            }else{
                setWindowWidth(JSON.parse(localStorage['locTreeWidth']).width, container);
            }

            //Resource file management
            function populateFileList(id, data, editMode, target){
                var fList =''
                $(target).html('')
                try{
                    fList = JSON.parse(data);
                } catch (e) {
                    return false
                }
                if(fList.length > 0){
                    for(let x in fList){
                        let fHtml = '<div class="fileList" data-index="'+x+'"><input type="checkbox" class="CheckboxFileList" value="' + fList[x].name + '"/>'
                        fHtml += '<a class="fileListLink" href="/uploads/' + id + '/' + fList[x].name + '" target="_new"></a>'
                        fHtml += '</div>'
                        $(target).append(fHtml);
                    }

                    $(target).find(".fileList").each(function(){
                        index = $(this).attr("data-index")
                        $(this).find(".fileListLink").text(fList[index].name)
                    })
                    if(!editMode){
                        $(target).find(".CheckboxFileList").hide()
                    }

                }else{
                    return false
                }
                return true
            }

            function populateLibFileList(data){
                var fileNamesHtmlHeader = "<div><table style='width: 50%;'  role='grid' class='table table-striped table-bordered table-hover dataTable no-footer dtr-inline var_Table' id='dataTables-fileList' width='50%'><tbody>";
                var fileNamesHtmlFooter = "</tbody></table></div>";
                var fileNamesHtml = "";
                var fileNamesHtmlEmpty = "<tr role='row' class='gradeA odd'><td width = '10%'><br/></td></tr>";
                try{
                    var fList = JSON.parse(data);
                    if(fList.length > 0){
                        fList.forEach(function(fName){
                            fileNamesHtml += "<tr role='row' class='gradeA odd'><td width = '10%'>"
                            fileNamesHtml += "<a href='/library/" + pickedLib + "/uploads/" + $('#buildCode').val() + "/" + fName.name + "' target='_new'>" + fName.name + "</a>";
                            fileNamesHtml +="</td></tr>";
                        })
                    }else{
                        fileNamesHtml += fileNamesHtmlEmpty;
                    }
                    $('#fileList').html(fileNamesHtmlHeader + fileNamesHtml + fileNamesHtmlFooter);
                } catch (e) {
                    $('#fileList').html(fileNamesHtmlHeader + fileNamesHtmlEmpty + fileNamesHtmlFooter);
                }
            }

            $("#fileUpload").hide();
            $('.newFile').on('click', function(){
                //  $("#fileUpload").show();
                $('#upload-input').click();
                $('.progress-bar').text('0%');
                $('.progress-bar').width('0%');
            });
            $("#delCompFileButton").on('click', function(){
                var filesString ='';
                var id=$("#id").val();
                $('#fileCompList .CheckboxFileList:checkbox:checked').each(function () {
                    filesString +=  $(this).val() + ';';
                });
                var mydata = {id:id, files:filesString};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/delFiles',
                    success : function(data) {
                        populateFileList($('#id').val(), data, true, "#fileCompList");
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            });
            $("#delFileButton").on('click', function(){
                var filesString ='';
                var id=$("#buildCode").val();
                $('#fileList .CheckboxFileList:checkbox:checked').each(function () {
                    filesString +=  $(this).val() + ';';
                });
                var mydata = {id:id, files:filesString};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/delFiles',
                    success : function(data) {
                        $('#resourceFiles').val(data);
                        populateFileList($('#buildCode').val(), data, true, "#fileList");
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            });
            $('#upload-input').on('change', function(){

                var files = $(this).get(0).files;
                if (files.length > 0){
                    var formData = new FormData();
                    formData.append('id', $('#id').val());

                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];

                        // add the files to formData object for the data payload
                        formData.append('uploads[]', file, file.name);
                    }
                    $.ajax({
                        url: '/upload',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function(data){
                            //console.log('upload successful!\n' + data);
                            $('#resourceFiles').val(data);
                            populateFileList($('#buildCode').val(), data, true, "#fileList");
                            $("#fileUpload").hide();
                        },
                        xhr: function() {
                            // create an XMLHttpRequest
                            var xhr = new XMLHttpRequest();

                            // listen to the 'progress' event
                            xhr.upload.addEventListener('progress', function(evt) {

                                if (evt.lengthComputable) {
                                    $("#fileUpload").show();
                                    // calculate the percentage of upload completed
                                    var percentComplete = evt.loaded / evt.total;
                                    percentComplete = parseInt(percentComplete * 100);

                                    // update the Bootstrap progress bar with the new percentage
                                    $('.progress-bar').text(percentComplete + '%');
                                    $('.progress-bar').width(percentComplete + '%');

                                    // once the upload reaches 100%, set the progress bar text to done
                                    if (percentComplete === 100) {
                                        $('.progress-bar').html('Done');
                                    }
                                }

                            }, false);

                            return xhr;
                        }
                    });
                }
            });

            //pem Key file management
            $('#newKeyButton').on('click', function(){
                $('#upload-key').click();
            });
            $('#upload-key').on('change', function() {
                if($(this)[0].files[0].name !== ""){
                    $('#keyList').html($(this)[0].files[0].name);
                }
            });

            //settings Style Top Page Pick event
            $('.stylePickTop').on('click', function(evt){
                //evt.preventDefault();
                var pickedStyle = $(this).attr('data-ID');
                setStyle(pickedStyle);
            });

            //settings - set time out button event in settings
            $('#set_timeout').on('click', function(){
                const timeout = $("#timeout").val();
                setShutdownTimeout(timeout);
            });

            function setShutdownTimeout(timeout){
                var mydata = {};
                mydata.timeout = timeout;
                $.ajax({
                    type: 'post',
                    data: JSON.stringify(mydata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/setTimeout',
                    success : function(result) {
                        $("#set_timeout_results")[0].innerText = result;
                    },
                    error : function(error) {
                        $("#set_timeout_results")[0].innerText = "Error setting timeout";
                        console.log(error)
                    }
                });
            }

            $('#set_noClientTimeout').on('click', function(){
                const noClientTimeout = $("#noClientTimeout").val();
                setnoClientTimeout(noClientTimeout);
            });

            function setnoClientTimeout(noClientTimeout){
                var mydata = {};
                mydata.noClientTimeout = noClientTimeout;
                $.ajax({
                    type: 'post',
                    data: JSON.stringify(mydata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/setnoClientTimeout',
                    success : function(result) {
                        $("#set_noClientTimeout_results")[0].innerText = result;
                    },
                    error : function(error) {
                        $("#set_noClientTimeout_results")[0].innerText = "Error setting no client timeout";
                        console.log(error)
                    }
                });
            }

            //settings - set username button event
            $('#set_username').on('click', function(){
                const username = $("#username").val();
                if(username.trim() === ""){
                    alert("Enter your preferred username");
                }else{
                    setUsername(username.trim());
                }
            });
            function setUsername(username){
                var mydata = {};
                mydata.username = username
                $.ajax({
                    type: 'post',
                    data: JSON.stringify(mydata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/setUsername',
                    success : function(result) {
                        $("#set_username_results")[0].innerText = result;
                    },
                    error : function(error) {
                        $("#set_username_results")[0].innerText = "Error setting username";
                        console.log(error)
                    }
                });
            }

            //Settings - populate fields on modal open
            $('#setupModal').on('shown.bs.modal', function() {
                var mydata = {};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/settings',
                    success : function(data) {

                        const respJson = JSON.parse(data);

                        //set the timeout value
                        if(respJson.hasOwnProperty("timeout")){
                            $("#timeout").val(respJson.timeout);
                        }

                        //set the noClientTimeout value
                        if(respJson.hasOwnProperty("noClientTimeout")){
                            $("#noClientTimeout").val(respJson.noClientTimeout);
                        }


                        //set the username value
                        if(respJson.hasOwnProperty("username")){
                            $("#username").val(respJson.username);
                        }
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })

            });

            //Set value of top style radio to the value in settings
            function setTopPageStyle(){
                var mydata = {};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/settings',
                    success : function(data) {

                        const respJson = JSON.parse(data);

                        //set the style radion btn
                        if(respJson.hasOwnProperty("currentStyle")){
                            if(respJson.currentStyle === "dark"){
                                $("#darkStyleRadioTop").prop('checked',true);
                            }else{
                                $("#defaultStyleRadioTop").prop('checked',true);
                            }
                            currentStyleName = respJson.currentStyle;
                            setAceStyle(currentStyleName)
                        }
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            };
            setTopPageStyle();

            var preferedPopPos = "";
            //Check first run and run firstRunTasks() if required
            var currentGhostEle = "";

            function checkFirstRun(){

                //query server for first run setting
                var mydata = {};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/settings',
                    success : function(data) {

                        const respJson = JSON.parse(data);

                        if (respJson.firstRun === 1){

                        }else{
                            firstRunTasks(data)
                        }
                    },
                    error : function(error) {
                        console.log(error)
                    }
                });

                function firstRunTasks(result){

                    //open either welcome modal or demo welcome modal
                    var mydata = {};
                    $.ajax({
                        type: 'get',
                        data: mydata,
                        dataType : "text",
                        headers: {
                            "content-type": "application/json"
                        },
                        url: '/settings',
                        success : function(data) {
                            const respJson = JSON.parse(data);
                            if(respJson.hasOwnProperty("clientMode")){
                                if (respJson.clientMode === "demo"){
                                    $("#demoWelcomeModal").modal();
                                }else{
                                    $("#welcomeModal").modal();
                                }
                            }
                        },
                        error : function(error) {
                            console.log(error)
                        }
                    })

                    $("#sysScreen").hide(200);
                    $("#jobScreen").hide(200);
                    $("#dashBtn").click();

                    //pick first system
                    $.get("/getPromotedSystems",{},function(data){
                        const promoted = JSON.parse(data);

                        if(Object.keys(promoted).length > 0){
                            var id = Object.keys(promoted)[0];
                            var sysName = promoted[Object.keys(promoted)[0]];

                            var urlString = "'/uploads/" + id + "/icon.png'";
                            $("#dropdownMenuButton")[0].innerHTML = '<img id="dashSystemIcon" class="dashSystemIcon" src='+urlString+'></img>';
                            $("#dropdownMenuButton")[0].innerHTML += sysName;
                            loadDashTable(id);
                            // loadDashSystemDetails(id);
                            loadDashSystemFunctions(id);

                            localStorage['dashSystemDropItemClicked'] = JSON.stringify({ id:id, sysName:sysName }) ;
                            currentSysId = id;
                        }

                    });

                    setFirstRun();

                }

                //Things to do after demo welcome modal
                function afterDemoWelcomeModal(){
                    $('.popover').popover('hide');
                    var options = { mode: 'no-cors' };
                    fetch('https://ezstacksystems.com/message?demoStarted',options).then(function (response) {
                        return response.text();
                    }).then(function (html) {
                        console.log("demo started");
                    }).catch(function (err) {
                        console.warn('Error sending https://ezstacksystems.com/message?demoStarted ', err);
                    });

                    $("#dashBtn").click();
                    
                    function showFloatDashMenu(){

                        setWindowWidth(260, container);
                        preferedPopPos = "left";
                        floatPop("dashBtn",  "This is the Dashboard. The Dashboard provides a high level view of your 'promoted' components and the ability to make quick changes.")

                        $(".floatPopMenuRow").remove();
                        $(".floatPop").append('<div class = "floatPopMenuRow"><button id="floatPopStop" class="btn btn-default jobFormbtn floatPopMenuItem">stop<i class="fa fa-fw fa-stop "></i></button><button id="floatPopOk" class="btn btn-default jobFormbtn floatPopMenuItem">next<i class="fa fa-fw fa-fast-forward"></i></button></div>')

                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},8000);

                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);
showFloatDashTable();
// showFloatFoundComp();
                        })
                        $("#floatPopStop").click(function(event){
                            $('.popover').popover('hide');
                            clearTimeout(floatPopOkTimeout);
                        })

                    }
                    function showFloatDashTable(){
                        $("#dashBtn").click();
                        preferedPopPos = "bottom";
                        floatPop("dashListCol","This is a list of web applications and services that have been built or are ready to be built for the specified system. In this demo none of the applications have been built or deployed yet.");
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},11000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout)
showFloatDashCompBuildApps();
                        });

                        $('#dashTable').animate({ scrollLeft:  $('#dashTable').prop('scrollWidth')  }, 8000);
                        setTimeout(function(){
                            $('#dashTable').animate({ scrollLeft: 0  }, 900);
                        },8000);
                    }
                    
                    function showFloatDashCompBuildApps(){
                        $("#dashBtn").click();
                        $(".dashContentRow")[0].click();

                        $("#floatPopOk").unbind();
                        setTimeout(function(){
                            preferedPopPos = "bottom";
                            floatPop("dashTableBuildButton","ezStack Home is one example application that you can build and deploy in this demo. For practise build and deploy ezStack home on this server.<br><br><b class='floatPopTaskLabel'>Practise:</b> Click this build<i class='fa  fa-wrench fa-fw'></i> button and then click 'build' in the dialog to install 'ezStack Home' on this server.")
                            
                            floatPopOkTimeout = setTimeout(function(){
                                $("#floatPopOk").click();
                                if($("#resultsStatus").text() === "Idle" && currentSettings.clientMode == "demo"){
                                    $("#dashTableBuildButton").click();
                                    setTimeout(function(){$("#runConfirmButton").click();},1000);
                                }
                            },60*1000);
                        
                            const eleObj = document.getElementById("dashTableBuildButton");
                            eleObj.scrollIntoView(false);

                        },1500)


                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);
showFloatCPU();
                        })
                    }


                    function showFloatCPU(){
                                            $("#dashBtn").click();
                                            floatPop("osCPUValue", "This displays the current CPU load of your private builder server.");
                                            $("#floatPopOk").unbind();
                                            floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},7000);
                                            $("#floatPopOk").click(function(event){
                                                clearTimeout(floatPopOkTimeout);
                    showFloatMem()
                    //showFloatVideoClick()
                                            })
                                        }
                    function showFloatMem(){
                        $("#dashBtn").click();
                        floatPop("osFMValue", "This shows the amount of free memory available for builder to use.");
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},7000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);

showFloatSys()
                        })
                    }
                    function showFloatSys(){
                                            $("#dashBtn").click();
                                            floatPop("dropdownMenuButton", "The systems (servers) you have setup are listed here. You can drag and drop applications onto a system to add them. Each system can host many applications.");
                                            $("#floatPopOk").unbind();
                                            floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},10000);
                                            $("#floatPopOk").click(function(event){
                                                clearTimeout(floatPopOkTimeout);
showFloatFunc()
                                            })
                                        }

                                        function showFloatFunc(){
                                            $("#dashBtn").click();
                                            floatPop("dropdownFuncButton", "Server maintenance functions like reboot or backup are accessed from here.");
                                            $("#floatPopOk").unbind();
                                            floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},8000);
                                            $("#floatPopOk").click(function(event){
                                                clearTimeout(floatPopOkTimeout);
showFloatStatus()
                                            })
                                        }
                                        
                    
                    function showFloatStatus(){
                        $("#dashBtn").click();
                        floatPop("resultsStatus", "When components are being built the status of each build is displayed here.");
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},12000);

                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);
showFloatStyle()
                        })
                    }
    
                    function showFloatStyle(){
                        $("#dashBtn").click();
                        floatPop("stylePickMenu", "Both light and dark themes are available.<br><br><b class='floatPopTaskLabel'>Practise:</b> Change to dark theme if that is your preference.  ");
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},10000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);

showFloatUser()
                        })
                    }
                    function showFloatUser(){
                        $("#dashBtn").click();
                        $("#userMenuDrop").addClass('show');
                        preferedPopPos = "left";
                        floatPop("userMenuDrop", "The user menu contains personal preferences.");
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},8000);
                        $("#floatPopOk").click(function(event){
                            preferedPopPos = "";
                            clearTimeout(floatPopOkTimeout);

                            $("#userMenuDrop").removeClass('show');
showFloatVideo()
                        })
                    }

                    function showFloatVideo(){
                        // $("#dashBtn").click();
                        preferedPopPos = "left";
                        floatPop("videoCanvas", "ezStack Builder provides a live instance of headless-chrome to aid in building your web applications. You can interact with this instance in the browser window. " +
                            "Headless-chrome gives you a live view of your apps being built. You can scroll and click the browser window like a real browser. " +
                            "You can also find components by clicking on the displayed web page elements. When browsing components, elements will be highlighted when a component, that created it, is selected.")
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},30000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);

showFloatVideoClick()
                        })
                    }
                    

/* 
                    function showFloatCompMenu(){
                        $("#dashBtn").click();
                        floatPop("componentsBtn",  "The Components screen allows you to dive deeper into the code by providing a tree view of all components that are installed.")
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},10000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);

                            $("#showFloatCompTree").click();
                            setTimeout(function(){
                                $("#componentsBtn").click();
                                showFloatCompTree();
                            }, 500);
                        })
                    }
                    function showFloatCompTree(){
                        $("#jstree_div").jstree("close_all", '#');
                        $('#jstree_div').jstree(true).open_node("local", false);
                        setTimeout(function(){
                            floatPop("local",  "In the Components screen is a tree that allows you to browse all installed systems and components.")
                        }, 500);
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},8000);
                        $("#floatPopOk").click(function(event){
                            $("#componentsBtn").click();
                            clearTimeout(floatPopOkTimeout);

$("#componentsBtn").click();
                            setTimeout(function(){
                                showFloatCompTreeSys()
                            }, 500);
                        })
                    }
                    function showFloatCompTreeSys(){
                        $('#jstree_div').jstree(true).open_node("local", false);
                        var childrens = $("#jstree_div").jstree("get_children_dom","local");

                        $('#jstree_div').jstree("deselect_all");
                        $("#jstree_div").jstree("select_node", childrens[0].id);

                        setTimeout(function(){
                            var childrens = $("#jstree_div").jstree("get_children_dom","local");
                            floatPop(childrens[0].attributes.id.value,  "The first level of the tree are the systems.")
                        }, 500);

                        preferedPopPos = "right";
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},5000);
                        $("#floatPopOk").click(function(event){
                            $("#componentsBtn").click();
                            clearTimeout(floatPopOkTimeout);

$("#componentsBtn").click();
                            showFloatCompSysTitle()
                        })
                    }
                    function showFloatCompSysTitle(){
                        var childrens = $("#jstree_div").jstree("get_children_dom","local");
                        setTimeout(function(){
                            $('#jstree_div').jstree("deselect_all");
                            $("#jstree_div").jstree("select_node", childrens[0].id);
                            floatPop("sysName",  "Systems have a name ...");
                        }, 500);


                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},4000);
                        $("#floatPopOk").click(function(event){

                            clearTimeout(floatPopOkTimeout);

$("#componentsBtn").click();
                            showFloatCompSysDesc()
                        })
                    }
                    function showFloatCompSysDesc(){

                        floatPop("sysDescription",  "... and a description.");

                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},4000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);

$("#componentsBtn").click();
                            showFloatCompSysVari()
                        })
                    }
                    function showFloatCompSysVari(){

                        floatPop("sysVariablesForm",  "System variables define important system wide settings. Host, username and port are needed to connect to the target server.");

                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},8000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);

$("#componentsBtn").click();
                            showFloatCompTreeComp()
                        })
                    }
                    function showFloatCompTreeComp(){
                        $("#componentsBtn").click();
                        $('#jstree_div').jstree("deselect_all");
                        $("#jstree_div").jstree("open_node", "local", false, true);
                        var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                        // var childrens = $("#jstree_div").jstree("get_children_dom",sysId);
                        $("#jstree_div").jstree("open_node", sysId, false, true);

                        setTimeout(function(){

                            var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                            var childrens = $("#jstree_div").jstree("get_children_dom",sysId);
                            $("#jstree_div").jstree("select_node", childrens[1]);

                            floatPop(childrens[1].attributes.id.value,  "Under the systems are the components.");
                        },500);
                        preferedPopPos = "right";
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},4000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);

                            $("#componentsBtn").click();
                            showFloatCompTreeComp2();
                        })
                    }

                    function showFloatCompTreeComp2(){
                        $("#jstree_div").jstree("open_node", "local", false, true);
                        var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                        // var childrens = $("#jstree_div").jstree("get_children_dom",sysId);
                        $("#jstree_div").jstree("open_node", sysId, false, true);
                        $('#jstree_div').jstree("deselect_all");

                        setTimeout(function(){
                            var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                            var childrens = $("#jstree_div").jstree("get_children_dom",sysId);
                            $("#jstree_div").jstree("select_node", childrens[1]);
                            floatPop(childrens[1].attributes.id.value,  "Components connected to a system can be built on that system.");
                        },500);
                        preferedPopPos = "right";
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},6000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);
                            preferedPopPos = "";
                            $("#componentsBtn").click();
                            showFloatCompName();
                        })
                    }
                    function showFloatCompName(){
                        $("#componentsBtn").click();
                        $("#jstree_div").jstree("open_node", "local", false, true);
                        var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                        // var childrens = $("#jstree_div").jstree("get_children_dom",sysId);
                        $("#jstree_div").jstree("open_node", sysId, false, true);
                        $('#jstree_div').jstree("deselect_all");

                        setTimeout(function(){
                            $('#job-form-panel').animate({ scrollTop: $("#name").offset().top  + $('#job-form-panel').scrollTop() -  ($('#job-form-panel').height() * 0.8) }, 1000);

                            var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                            var childrens = $("#jstree_div").jstree("get_children_dom",sysId);
                            $("#jstree_div").jstree("select_node", childrens[1]);
                            floatPop("name",  "Each component has a name ...");
                        },500);
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},4000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);

                            $("#componentsBtn").click();
                            showFloatCompDescription();
                        })
                    }
                    function showFloatCompDescription(){
                        $("#componentsBtn").click();
                        $("#jstree_div").jstree("open_node", "local", false, true);
                        var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                        // var childrens = $("#jstree_div").jstree("get_children_dom",sysId);
                        $("#jstree_div").jstree("open_node", sysId, false, true);
                        $('#jstree_div').jstree("deselect_all");

                        setTimeout(function(){
                            var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                            var childrens = $("#jstree_div").jstree("get_children_dom",sysId);
                            $("#jstree_div").jstree("select_node", childrens[1]);
                            floatPop("description",  "... and a description.");
                        },500);
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},4000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);

                            $("#componentsBtn").click();
showFloatVideo();
                        })
                    }
                    
                    
                    function showFloatCompVars(){
                        $("#componentsBtn").click();
                        $("#jstree_div").jstree("open_node", "local", false, true);
                        var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                        var childrens = $("#jstree_div").jstree("get_children_dom",sysId);
                        $("#jstree_div").jstree("open_node", sysId, false, true);
                        $('#jstree_div').jstree("deselect_all");
                        $("#jstree_div").jstree("select_node", childrens[1]);

                        setTimeout(function(){
                            $('#job-form-panel').animate({ scrollTop: $("#compVariables").offset().top  + $('#job-form-panel').scrollTop() -  ($('#job-form-panel').height() * 0.8) }, 1000);
                            floatPop("compVariables",  "Developers define component variables that allow you to control component builds from a high level.");
                        },500);
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},8000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);
                            showFloatCompBuildCode();
                        })
                    }
                    function showFloatCompBuildCode(){
                        $("#componentsBtn").click();
                        $("#jstree_div").jstree("open_node", "local", false, true);
                        var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                        var childrens = $("#jstree_div").jstree("get_children_dom",sysId);
                        $("#jstree_div").jstree("open_node", sysId, false, true);
                        $('#jstree_div').jstree("deselect_all");
                        $("#jstree_div").jstree("select_node", childrens[1]);
                        $("#codeCollapse").addClass("show");

                        setTimeout(function(){

                            $('#job-form-panel').animate({ scrollTop: $("#codeHeading").offset().top  + $('#job-form-panel').scrollTop() -  ($('#job-form-panel').height() * 0.8) }, 1000);
                            floatPop("codeHeading",  "The code that builds each component is stored here.");
                        },500);
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},6000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);

                            $("#componentsBtn").click();
                            showFloatCompBuildCodePick();
                        })
                    }
                    function showFloatCompBuildCodePick(){
                        $("#componentsBtn").click();
                        $("#jstree_div").jstree("open_node", "local", false, true);
                        var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                        var childrens = $("#jstree_div").jstree("get_children_dom",sysId);
                        $("#jstree_div").jstree("open_node", sysId, false, true);
                        $('#jstree_div').jstree("deselect_all");
                        $("#jstree_div").jstree("select_node", childrens[1]);
                        $("#codeCollapse").addClass("show");

                        setTimeout(function(){
                            floatPop("buildCodeNameRead",  "A build code record is a seperate record and is shared by components.");
                        },500);
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},6000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);

                            $("#componentsBtn").click();
                            showFloatCompBuildCodeSwitches();
                        })
                    }
                    function showFloatCompBuildCodeSwitches(){
                        $("#componentsBtn").click();
                        var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                        var childrens = $("#jstree_div").jstree("get_children_dom",sysId);
                        $("#jstree_div").jstree("open_node", sysId, false, true);
                        $('#jstree_div').jstree("deselect_all");
                        $("#jstree_div").jstree("select_node", childrens[1]);
                        $("#jstree_div").jstree("open_node", childrens[1]);
                        $("#codeCollapse").addClass("show");

                        setTimeout(function(){
                            $("#edit_button").click();
                            $('#job-form-panel').animate({ scrollTop: $("#buildCodeSwitches").offset().top  + $('#job-form-panel').scrollTop() -  ($('#job-form-panel').height() * 0.8) }, 1000);
                            preferedPopPos = "left"
                            floatPop("buildCodeSwitches",  "In edit mode a developer can define how the build code will be executed.");
                        },500);
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},8000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);

                            $("#componentsBtn").click();
                            showFloatCompBuildCodeScript();
                        })
                    }
                    function showFloatCompBuildCodeScript(){
                        $("#componentsBtn").click();
                        $("#jstree_div").jstree("open_node", "local", false, true);
                        var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                        var childrens = $("#jstree_div").jstree("get_children_dom",sysId)[1];
                        var chChildrens = $("#jstree_div").jstree("get_children_dom",childrens);
                        $('#jstree_div').jstree("deselect_all");
                        $("#jstree_div").jstree("select_node", chChildrens[1]);
                        $("#codeCollapse").addClass("show");

                        setTimeout(function(){
                            $("#edit_button").click();
                            $('#job-form-panel').animate({ scrollTop: $("#script").offset().top + $('#job-form-panel').scrollTop() -  ($('#job-form-panel').height() * 0.3) }, 1000);
                            preferedPopPos = "left"
                            floatPop("script",  "Build code script is executed on the system line by line. Inserting variables allows the developer to integrate each component.");
                        },500);

                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},10000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);
                            showFloatCompBuildCodeTemplates();
                        })
                    }
                    function showFloatCompBuildCodeTemplates(){
                        $("#componentsBtn").click();
                        var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                        var childrens = $("#jstree_div").jstree("get_children_dom",sysId)[1];
                        var chChildrens = $("#jstree_div").jstree("get_children_dom",childrens);
                        $('#jstree_div').jstree("deselect_all");
                        $("#jstree_div").jstree("select_node", chChildrens[1]);
                        $("#codeCollapse").addClass("show");

                        setTimeout(function(){
                            $("#edit_button").click();
                            $('#job-form-panel').animate({ scrollTop: $("#custTemplates").offset().top  + $('#job-form-panel').scrollTop() -  ($('#job-form-panel').height() * 0.8) }, 500);
                            preferedPopPos = "left";
                            floatPop("custTemplates",  "Developers can attach code that can be moved to the system and altered by the build script.");
                        },500);

                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},10000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);
                            showFloatCompBuildCodeRes();
                        })
                    }
                    function showFloatCompBuildCodeRes(){
                        $("#componentsBtn").click();
                        var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                        var childrens = $("#jstree_div").jstree("get_children_dom",sysId)[1];
                        var chChildrens = $("#jstree_div").jstree("get_children_dom",childrens);
                        $('#jstree_div').jstree("deselect_all");
                        $("#jstree_div").jstree("select_node", chChildrens[1]);

                        $("#codeCollapse").removeClass("show");

                        setTimeout(function(){
                            $('#job-form-panel').animate({ scrollTop: $("#resHeading").offset().top  + $('#job-form-panel').scrollTop() -  ($('#job-form-panel').height() * 0.8) }, 1000);
                            preferedPopPos = "left";
                            floatPop("resHeading",  "Resource file attachment can be added to a build code record.");
                        },300);

                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},7000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);
                            showFloatCompBuildCodeTest()
                        })
                    }
                    function showFloatCompBuildCodeTest(){
                        $("#componentsBtn").click();
                        var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                        var childrens = $("#jstree_div").jstree("get_children_dom",sysId)[1];
                        var chChildrens = $("#jstree_div").jstree("get_children_dom",childrens);
                        $('#jstree_div').jstree("deselect_all");
                        $("#jstree_div").jstree("select_node", chChildrens[1]);

                        $("#codeCollapse").removeClass("show");

                        setTimeout(function(){
                            $('#job-form-panel').animate({ scrollTop: $("#testHeading").offset().top  + $('#job-form-panel').scrollTop() -  ($('#job-form-panel').height() * 0.8) }, 1000);
                            preferedPopPos = "left";
                            floatPop("testHeading",  "Test scripts are stored here.");
                        },300);

                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},5000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);
                            showFloatCompBuildCodeMeta();
                        })
                    }
                    function showFloatCompBuildCodeMeta(){
                        $("#componentsBtn").click();
                        var sysId = $("#jstree_div").jstree("get_children_dom",'local')[0];
                        var childrens = $("#jstree_div").jstree("get_children_dom",sysId)[1];
                        var chChildrens = $("#jstree_div").jstree("get_children_dom",childrens);
                        $('#jstree_div').jstree("deselect_all");
                        $("#jstree_div").jstree("select_node", chChildrens[1]);

                        $("#codeCollapse").removeClass("show");

                        setTimeout(function(){
                            $('#job-form-panel').animate({ scrollTop: $("#metaHeading").offset().top  + $('#job-form-panel').scrollTop() -  ($('#job-form-panel').height() * 0.8) }, 1000);
                            preferedPopPos = "left";
                            floatPop("metaHeading",  "This section contains meta data on the component like history etc.");
                        },300);

                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},8000);
                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);
                            showFloatCompMenu2();
                        })
                    }
                    
                    function showFloatCompMenu2(){
                        $("#componentsBtn").click();

                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},10000);

                        setTimeout(function(){
                            $('#job-form-panel').animate({ scrollTop: 0 }, 1000);
                            preferedPopPos = "bottom";
                            floatPop("dashBtn",  "Back at the dashboard...");
                            $(".dashContentRow").first().click(); 
                        },500);

                        setTimeout(function(){
                            $(".lastBuildUrl").first().click();  
                        },1200);

                        $(".lastBuildUrl").first().click(); 

                        setTimeout(function(){
                            $("#dashBtn").click();
                        },5000);

                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);
                            $("#showFloatCompTree").click();
                            showFloatVideoClick();
                        })
                    }
 */                    



                    function showFloatVideoClick(){
                        $("#dashBtn").click();
                        $("#videoCanvas").parent().append('<div id="vidMiddle" style="position:absolute"></div>');
                        var eleJObj = $("#vidMiddle");
                        var width = $(".dashThumb").first().width();
                        var height = $(".dashThumb").first().height();
                        eleJObj.css({'top':(height/4+30) + 'px', 'left':width/10 + 'px'});

                        setTimeout(function(){ 
                            $(".lastBuildUrl").first().click(); 
                            preferedPopPos = "left";
                            floatPop("vidMiddle", "You can find components by clicking on elements in the browser window.<br><br><b class='floatPopTaskLabel'>Practise:</b> Click on the highlighted paragraph to find the component that built it.")
                        },500);
                        setTimeout(function(){ 
                            $.get('/highlight', { id: "intro-p-span" }, function(data) {});
                        },2000);

                        $("#floatPopOk").unbind();

                        vidMiddleTimeout = setTimeout(function(){
                            sendVideoMouseClick(width*.20/width ,height*.20/height, false);
                        },18000);
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},20000);

                        $("#floatPopOk").click(function(event){
                            clearTimeout(vidMiddleTimeout);
                            clearTimeout(floatPopOkTimeout);
                            sendVideoMouseClick(width*.20/width ,height*.20/height, false);

                            showFloatVideoClickResults()
                        })
                    }

                    function showFloatVideoClickResults(){

                        preferedPopPos = "left";
                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},10000);

                        setTimeout(function(){
                            floatPop("codeInspectLabel", "All components that have a matching ID are listed here.")
                        },1000);

                        matchTimeout = setTimeout(function(){
                            $("#vidMenuMatch").dropdown('toggle');
                        },3000);

                        $("#floatPopOk").click(function(event){
                            clearTimeout(matchTimeout);
                            clearTimeout(floatPopOkTimeout);

showFloatFoundComp()
                        })
                    }
                    
//                     function showFloatVideoMatchClick(){
//                         // $("#dashBtn").click();
// //
//                         preferedPopPos = "left";
//                         $("#floatPopOk").unbind();
//                         floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},10000);

//                         setTimeout(function(){
//                             $("#vidMenuMatch").dropdown('toggle');
//                         },300);

//                         setTimeout(function(){
//                             floatPop($(".matchTreeA-found").first().attr('id'), "Clicking on the matched row will open the component in the components view.")
//                         },500);

//                         $("#floatPopOk").click(function(event){
//                             clearTimeout(floatPopOkTimeout);
//                             $(".matchTreeA-found").first().click();

//                             showFloatFoundComp()
//                         })
//                     }
                    
                    function showFloatFoundComp(){
                        // $("#componentsBtn").click();

                        $("#floatPopOk").unbind();
                        floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},60000);
                        
                        setTimeout(function(){
                            preferedPopPos = "top";
                            floatPop("compDashVariables", "The paragraph can be changed by the following this procedure: <ul><li>Click the edit icon <i class='fa fa-pencil'></i></li><li>Expand the text box by clicking the expand icon <i class='fa fa-expand'></i></li><li>Then edit the text. </li><li>Then click the save icon <i class='fa fa-save'></i></li><li>Then build <i class='fa fa-wrench'></i></li></ul> ");

                        },1000);

                        $("#floatPopOk").click(function(event){
                            clearTimeout(floatPopOkTimeout);

showFloatEnd()
                        })
                    }


                    // function showFloatFoundCompVar(){
                    //     $("#componentsBtn").click();
                    //     $("#floatPopOk").unbind();
                    //     floatPopOkTimeout = setTimeout(function(){$("#floatPopOk").click();},8000);
                    //     setTimeout(function(){
                    //         preferedPopPos = "top";
                    //         floatPop("compVariables", "The text of the paragraph can be edited here.")
                    //     },500);

                    //     $("#floatPopOk").click(function(event){
                    //         clearTimeout(floatPopOkTimeout);

                    //         showFloatEnd()
                    //     })
                    // }


                    function showFloatEnd(){
                        $('.popover').popover('hide');
                        $("#dashBtn").click();
                        $("#DemoDoneModal").modal('show');
                        $("#floatPopOk").unbind();
                    }

                    showFloatDashMenu();
                }

                var floatPopOkTimeout;
                var preferedPopPos = "";
                function floatPop(ele, text){
                    var ghost = document.querySelector("#floatingPopover");

                   // var eleObj = document.querySelector("#"+ele); //why no work?
                    var eleObj = document.getElementById(ele);

                    var eleJObj = $("#"+ele);
                    var bounds = getOffset(eleObj)
                    var ghostObj = $("#floatingPopover");

                    var popObj = $(".floatPop");
                    var popEle = document.querySelector(".floatPop");

                    var options = {
                        container: "#floatingPopoverField",
                        boundary: "viewport",
                        placement: function (context, source) {
                            if(preferedPopPos !== ""){
                                let tmp = preferedPopPos;
                                preferedPopPos = "";
                                return tmp
                            }
                            var position = $(source).offset();
                            if (position.top < 50) {
                                return "bottom";
                            }
                            return "auto";
                        },
                        animation: true,
                        content: text,
                        delay: { "show": 500, "hide": 50 },
//                        offset: "0,0",
                        trigger: 'manual',
                        template: '<div class="popover floatPop" role="tooltip"><div class="arrow floatPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                    }

                    setTimeout(function(){
                        $("#floatPopOk").focus();
                    },500)

                    currentGhostEle = ele;
                    var width = eleJObj.width();
                    var height = eleJObj.height();
                    ghostObj.css({'top':bounds.top + 'px', 'left':bounds.left + 'px' });
                    ghostObj.css({'width':width + 'px'});
                    ghostObj.css({'height':height + 'px'});
                    popObj.css({'transition': 'transform 1.0s ease-out' });

                    if(popObj.length > 0){
                        ghostObj.data('bs.popover').config.html=true;
                        ghostObj.data('bs.popover').config.content = text;
                        ghostObj.popover("show");
                        ghostObj.popover("update");
                    }else{
                        ghostObj.popover(options);
                        ghostObj.data('bs.popover').config.html=true;
                        ghostObj.data('bs.popover').config.content = text;
                        ghostObj.popover("show");
                    }

                }


                $("#welcome-nav-Comp").on("click",function(evt){
                    $("#componentsBtn").click();
                    $('#jstree_div').jstree('open_node',"local");
                })

                $("#welcome-nav-Dash").on("click",function(evt){
                    $("#dashBtn").click();
                })

                $("#welcome-nav-Brow").on("click",function(evt){
                    $("#dashBtn").click();
                    $("#videoCanvas").css("border","14px dashed #E91E63");
                    $("#videoCanvas").animate({borderWidth : "0px"}, 2000);
                })

                $("#welcome-nav-Icon").on("click",function(evt){
                    $("#ezStackTopIcon").css("border","14px dashed #E91E63");
                    $("#ezStackTopIcon").animate({borderWidth : "0px"}, 2000);
                })

                $("#welcome-nav-Syst").on("click",function(evt){
                    $("#dashBtn").click();
                    $("#dropdownMenuButton").dropdown("toggle");
                    $("#dashSystemsDropdownMenu").css("border","14px dashed #E91E63");
                    $("#dashSystemsDropdownMenu").animate({borderWidth : "0px"}, 2000);
                     evt.stopPropagation();
                })




                //Tell server to set firstRun flag for admin user settings
                function setFirstRun(){  //signal server to set 'firstRun' flag in settings
                    $.ajax({
                        type: 'post',
                        data: "",
                        dataType : "text",
                        headers: {
                            "content-type": "application/json",
                        },
                        url: '/firstRun',
                        success : function(result) {
//                            console.log(result);
                        },
                        error : function(error) {
                            comsole.log("Error: in setFirstRun() - Cannot signal server to set 'firstRun' flag in settings")
                            console.log(error)
                        }
                    });
                }


                //Welcome modal close event will run afterWelcomeModal()
                $('#demoWelcomeModal').on('hidden.bs.modal', function() {
                    afterDemoWelcomeModal();
                });


                $('#demoWelcomeModal').on('shown.bs.modal', function() {
                    $('.popover').popover('hide');
                });

            };

            function getOffset(el) {
                const rect = el.getBoundingClientRect();
                return {
                    left: rect.left + window.scrollX,
                    top: rect.top + window.scrollY
                };
            }
            checkFirstRun()

            $("#search-icon").on("click",function(){
                $('#jstree_div').jstree(true).refresh(true);
            //    $('#jstree_div').jstree(true).redraw(true);
            });
            $("#searchInput").on('keyup', function (e) {
                if (e.keyCode == 13) {
                    $('#jstree_div').jstree(true).refresh(true);
                }
            });

            $("#dashBtn").addClass("active");
            $("#componentsRowContainer").hide();
            $("#buildCodeRow").hide();
            loadDashboard();

            //Main menu selections
            $("#dashBtn").on("click",function(){
                localStorage["topMenuViewSelected"] = "Dashboard"
                // loadDashboard();
                hideBottom();
                $("#componentsRowContainer").hide(200);
                $("#buildCodeRow").hide(200);
                $("#dashRow").show(200, function(){
                    $(".nav-link").removeClass("active");
                    $("#dashBtn").addClass("active");
                    $('#jslibtree_div').hide();
                    $('#jstree_div').show();

                    setWindowHeight(currentHeight, false);

                    //move video screen to dash
                    // $(".dashThumb").find("img").show();  
                    // if($(".selectedDashRow").length > 0){
                    //     $("#videoScreen").detach().appendTo($(".selectedDashRow").find(".dashThumb"));
                    //     $(".selectedDashRow").find("img").hide();
                    // }        

                });
                $("#snapButton").hide();
            });
            $("#buildCodeBtn").on("click",function(){
                loadBuildCodeRows();
                hideBottom();
                $("#componentsRowContainer").hide(200);
                $("#dashRow").hide(200);
                $("#buildCodeRow").show(200, function(){
                    $(".nav-link").removeClass("active");
                    $("#buildCodeBtn").addClass("active");
                    $('#jslibtree_div').hide();

                    setWindowHeight(currentHeight, false);

                });
                $("#snapButton").hide();
            });
            $("#componentsBtn").on("click",function(){
                localStorage["topMenuViewSelected"] = "Components";
                
                //move video screen to components ui
                $("#videoScreen").detach().appendTo('#screenShotImageHolder');
                $(".dashThumb").find("img").show();
                
                $("#dashRow").hide(200);
                $("#buildCodeRow").hide(200);

                $("#componentsRowContainer").show(200, function(){

                    $('#jstree_div').jstree('select_node',selectedWorkingNode);

                    $(".nav-link").removeClass("active");
                    $("#componentsBtn").addClass("active");
                    $('#jslibtree_div').hide();
                    $('#jstree_div').show( function(){
                        selectedNode = $('#jstree_div').jstree('get_selected', true);
                    });

                    if(!bottomHiddenFlag){
                        showBottom()
                    }

                    setWindowHeight($(window).height(),  false);

                    
                });

            });

            $("#buildCodeSearchInput").on("keyup",function(key){

                var searchString = $("#buildCodeSearchInput").val();
                $(".buildCodeListItem").each(function(i){
                    // var thisRow = $(".buildCodeListItem")[i]
                    if(searchString === "" || $(this).find(".buildCodeRowName").text().toUpperCase().includes(searchString.toUpperCase())){
                        $(this).show();
                    }else{
                        $(this).hide();
                    }
                })
            });

            $("#deleteBuildCodes").popover({
                animation: true,
                content: "Delete selected Build Codes",
                delay: { "show": 50, "hide": 100 },
                trigger: 'hover',
                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            });

            function loadBuildCodeRows(){
                $.get('/BuildCode', { id: '#' }, function(data) {
                    for(let i in data){
                        if($("#BuildCode-" + data[i].id).length > 0){
                            //this row exists, update it
                            if (data[i].hasOwnProperty('compList')){
                                count = data[i].compList.length > 0 ? data[i].compList.length.toString() : '';
                            }else{
                                count = '';
                            }
                            row += '<div class="buildCodeRowCount">' + count +'</div>'
                            $("#BuildCode-" + data[i].id).find(".buildCodeRowCount").text(count);

                            $("#BuildCode-"+data[i].id).find(".buildCodeRowName").text(data[i].name);

                            if(data[i].hasOwnProperty('lastUpdated')){
                                $("#BuildCode-"+data[i].id).find(".buildCodeRowLastUpdated").text((new Date(data[i].lastUpdated.ds)).toLocaleDateString('en-US'));
                            }
                        }else{
                            //this row is new, create it
                            var row = '';
                            row += '<div class="buildCodeListItem" id="BuildCode-' + data[i].id + '">' ;
                            row += '<input type="checkbox" class="buildCodeRowCheck" >' ;
                            var count='';
                            if (data[i].hasOwnProperty('compList')){
                                count = data[i].compList.length > 0 ? data[i].compList.length.toString() : '';
                            }
                            row += '<div class="buildCodeRowCount">' + count +'</div>'
                            row += '<div class="buildCodeRowName"></div>';

                            if(data[i].hasOwnProperty('lastUpdated')){
                                row += '<div class="buildCodeRowLastUpdated">'+(new Date(data[i].lastUpdated.ds)).toLocaleDateString('en-US')+'</div>';
                            }else{
                                row += '<div class="buildCodeRowLastUpdated"></div>';
                            }

                            row += '<div class="buildCodeListCopy"><i class="fa  fa-copy fa-fw"></i></div>'

                            row += '</div>';


                            $("#buildCodes").append(row);

                            $("#BuildCode-"+data[i].id).find(".buildCodeRowName").text(data[i].name);

                            $("#BuildCode-"+data[i].id).click(function(){
                                var selectedEle = this;
                                $(this).css({'background-color':'#00000055'});
                                $(".buildCodeListItem").each(function(ele){
                                    var thisEle = $($(".buildCodeListItem")[ele]);
                                    if (thisEle.get(0) !== selectedEle){

                                        thisEle.css({'background-color':'#00000000'});

                                    }
                                })

                                const id = $(this).attr("id").replace("BuildCode-","");
                                loadBuildCodeClick(id);
                            })
                            $("#deleteBuildCodes").click(function(){
                                const checked = $("#buildCodes").find(".buildCodeRowCheck:checked");
                                var boxes = []
                                checked.each(function(box){
                                    boxes.push($(this).parent().attr('id').replace("BuildCode-",""))
                                })

                                $.ajax({
                                    type: 'POST',
                                    data: JSON.stringify({boxes:boxes}),
                                    dataType : "text",
                                    headers: {
                                        "content-type": "application/json",
                                    },
                                    url: '/deleteBuildCodes',
                                    success : function(results) {

                                        var deleted = JSON.parse(results)
                                        for(let bc in deleted ){

                                            console.log("Deleted BuildCode; "+deleted[bc]);
                                            $("#BuildCode-"+deleted[bc]).remove();
                                        }

                                    },
                                    error : function(error) {
                                        console.log(error)
                                    }
                                });
                            })

                            $("#BuildCode-"+data[i].id).find(".buildCodeListCopy").click(function(evt){
                                copyCodeId = $(this).parent().attr('id').replace("BuildCode-","")
                                $("#buildCodePasteButton").show();

                                $(this).data('bs.popover').config.content = "Copied '"+data[i].name+"'";
                                $(this).popover("show");

                                $("#buildCodePasteButton").popover('dispose').popover({
                                    animation: true,
                                    content: "Paste '"+data[i].name+"'",
                                    delay: { "show": 50, "hide": 100 },
                                    trigger: 'hover',
                                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                                });

                                evt.stopPropagation();


                            });

                            $("#BuildCode-"+data[i].id).find(".buildCodeListCopy").popover('dispose').popover({
                                animation: true,
                                content: "Copy '"+data[i].name+"' to clipboard",
                                delay: { "show": 50, "hide": 100 },
                                trigger: 'hover',
                                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                            });
                        }
                    }
                });
            };
            setTimeout(loadBuildCodeRows, 2000);

            var scriptDisplay = ace.edit("buildCodeDisplay-script");
            scriptDisplay.setTheme("ace/theme/clouds");
            scriptDisplay.session.setMode("ace/mode/sh");
            document.getElementById('buildCodeDisplay-script').style.fontSize='14px';
            $("#buildCodeDisplay-script").addClass("aceDisabled");

            var buildCodeDisplayTemps = [];
            $("#buildCodeDisplayCol").hide();
            function loadBuildCodeClick(id){

                $.get('/BuildCode', { id: id }, function(data) {


                    if(data[0].hasOwnProperty("id")){
                        $("#buildCodeDisplayCol").show(200);

                        $('#buildCodeDisplayTitle').text(data[0].name);

                        if(data[0].rerunnable === 1){
                            $('#buildCodeDisplay-rerunnableVal').html('<label>Rerunnable: Yes</label>');
                        }else{
                            $('#buildCodeDisplay-rerunnableVal').html('<label>Rerunnable: No</label>');
                        }

                        if(data[0].systemFunction === 1){
                            $('#buildCodeDisplay-sysFuncVal').html('<label>System Function: Yes</label>');
                        }else{
                            $('#buildCodeDisplay-sysFuncVal').html('<label>System Function: No</label>')
                        }

                        if(data[0].runLocal === 1){
                            $('#buildCodeDisplay-runLocVal').html('<label>Run Locally: Yes</label>')
                        }else{
                            $('#buildCodeDisplay-runLocVal').html('<label>Run Locally: No</label>');
                        }

                        if(data[0].hasOwnProperty('script')){
                            scriptDisplay.session.setValue(data[0].script);
                            $("#buildCodeDisplay-script").show();
                        }else{
                            scriptDisplay.session.setValue('');
                            $("#buildCodeDisplay-script").hide();
                        }

                        $('#buildCodeTemplates').html('');
                        if(data[0].hasOwnProperty('templates')){
                            buildCodeDisplayTemps = [];
                            var tempObjArr = data[0].templates.tempArr;
                            var x = 0;
                            tempObjArr.forEach(function(tempObj){

                                var mode = tempObj.t === "" ? "text" : tempObj.t;
                                var inHtml = "<div class='form-group' id='buildCodeDisplay-templateBlock"+x.toString()+"'>";

                                inHtml += "         <label class='build-label'>Template "+ (x > 0 ? (x + 1).toString() : "") +"</label>";
                                inHtml += "         <label class='build-label'>("+mode+")</label>"


                                inHtml += "     <div class='' id='buildCodeDisplay-templateCard"+ x.toString() +"'>"
                                inHtml += "         <div class='buildCodeDisplay-template' id='buildCodeDisplay-template"+x.toString()+"' class=''></div>"
                                inHtml += "     </div>"
                                inHtml += "</div>";

                                $('#buildCodeTemplates').append(inHtml);

                                var thisTemplate = ace.edit('buildCodeDisplay-template'+x.toString());
                                buildCodeDisplayTemps.push(thisTemplate);

                                $('#buildCodeDisplay-template'+x.toString()).addClass("aceDisabled");

                                thisTemplate.session.setMode("ace/mode/" + mode);
                                document.getElementById('buildCodeDisplay-template'+x.toString()).style.fontSize='14px';

                                thisTemplate.renderer.$cursorLayer.element.style.display = "none"
                                thisTemplate.session.setValue(tempObj.c);
                                thisTemplate.isValid = true;
                                x++;
                            });

                            setAceStyle(currentStyleName);
                        }else{

                        }

                    }
                });

                loadUsedInTree(id);
            }

            //create usedInMatchLink tree
            var currectMatchTreeObjArr = [];
            $("#usedInMatchLink_jstree_div").jstree({
                "core" : {
                    "themes": {
                        "name": "default",
                        "dots": true,
                        "icons": true,
                        "variant" : "small"
                    },
                    "data" : currectMatchTreeObjArr,
                    'check_callback': function(operation, node, node_parent, node_position, more) {
                        return true;  //allow all other operations
                    }
                },
                "types" : {
                    "system" : {
                        "icon" : "fa fa-server ",
                        "a_attr": { class : " systemRow "}
                    },
                    "job" : {
                        "icon" : "fa fa-check-circle-o jobRow"
                    },
                    "needfull" : {
                        "icon" : "fa fa-wrench",  //play-circle-o
                        "a_attr": { class : " needfull "},
                        "li_attr": { class : " needfull "}
                    },
                    "rerunnable" : {
                        "icon" : "fa fa-repeat rerunnableRow",
                        "a_attr": { class : " rerunnableRow "}
                    },
                    "root" : {
                        "icon" : "fa fa-server"
                    },
                    "disabled" : {
                        "icon" : "fa fa-times-circle-o disabledRow",
                        "li_attr": { class : "  "}
                    }
                },
                "sort" : function(a, b) {
                    a1 = this.get_node(a);
                    b1 = this.get_node(b);
                    return (a1.original.sort < b1.original.sort) ? -1 : 1;

                },
                "plugins" : [ "sort", "types", "wholerow"]
            }).on(  'create_node.jstree', function(e, data) {
                //console.log('saved');
            }  );

            $('#usedInMatchLink_jstree_div').bind("refresh.jstree", function (e, data) {
                $(this).jstree("open_all");
            })

            $('#usedInMatchLink_jstree_div').on("select_node.jstree", function (e, data) {

                $('#videoModal').modal('hide');

                var selectedMatchNode = data.selected[0];

                if( ! $("#componentsBtn").hasClass('active')){
                    $("#componentsBtn").click();
                }
                setTimeout(function(){
                    $('#jstree_div').jstree("deselect_all");
                    $('#jstree_div').jstree('select_node', selectedMatchNode);
                    $('#jstree_div').jstree(true).get_node(selectedMatchNode, true).children('.jstree-anchor').focus();
                }, 500);
            });

            function loadUsedInTree(buildId){
                $.get("/componentsTreeByBcId",{buildId:buildId},function(resp){

                    var respObj = JSON.parse(resp);


                    var matchingComponents = respObj.matchingComponents;
                    var matchingComponentsCount = respObj.matchingComponentsCount;


                    $('#usedInMatchLink_jstree_div').jstree(true).settings.core.data = matchingComponents;
                    $('#usedInMatchLink_jstree_div').jstree(true).refresh();

                    if(matchingComponentsCount < 1){
                        $("#usedInMatch").text('0 components');
                    }else if(matchingComponentsCount === 1){
                        $("#usedInMatch").text('1 component');
                    }else{
                            $("#usedInMatch").text(matchingComponentsCount.toString() +" components")
                        }

                })
            }

            if(localStorage["topMenuViewSelected"]){
                if(localStorage["topMenuViewSelected"] === "Components"){
                    $("#componentsBtn").click();
                }else{
                    $("#dashBtn").click();
                }

            }

            function loadjobTempTypeDropdown(templateNumber){
                var mydata = {};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    templateNumber:templateNumber,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/getTempTypes',
                    success : function(data) {
                        var indexNumStr = this.templateNumber.toString();

                        const types = JSON.parse(data).types;
                       // var pCompHtml = "";
                        var dropDownListHtml = "";

                        var y = 0;
                        for (var aType in types) {
                                var thisType = types[aType];
                                dropDownListHtml += "<div><a id='templateTypeDropdownItem"+indexNumStr+y.toString() + "'  class='dropdown-item templateTypeDropdownItem' href='#' data-type='"+ thisType +"' data-index='"+ indexNumStr +"'>" + thisType +" </a></div>"
                        }
                        $("#dropdownTemplateTypeMenu"+indexNumStr)[0].innerHTML = dropDownListHtml;

                        $(".templateTypeDropdownItem").on('click', function(){
                            var atype = $(this).attr('data-type');
                            var templateNumber = $(this).attr('data-index');

                            $("#dropdownTemplateTypeButton"+templateNumber)[0].innerHTML = atype;
                            $("#templateType"+templateNumber).val(atype);
                            currentTemplatesArr[parseInt(templateNumber, 10)].session.setMode("ace/mode/" + atype);
                        });

                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            }

            //glabal array to hold all ace.edit templates
            var currentTemplatesArr = [];

            //enable Ace editor Build Script
            var scriptEditor = ace.edit("script");
            scriptEditor.setTheme("ace/theme/clouds");
            scriptEditor.session.setMode("ace/mode/sh");
            document.getElementById('script').style.fontSize='14px';

            scriptEditor.on("change", function() {
                setAceBuildCodeHeight();
            })

            function setAceBuildCodeHeight(){
                let newHeight;

                newHeight = scriptEditor.getSession().getScreenLength() * scriptEditor.renderer.lineHeight + 17; //+ (scriptEditor.renderer.scrollBar.getWidth() * 2);
                newHeight = newHeight < 80 ? 80 : newHeight;
                newHeight = newHeight > 1200 ? 1200 : newHeight;
                $(".codeCard").height(newHeight);
                scriptEditor.resize();

            }

            function setTempAceHeight(tempNum, level){
                if(level == "max"){
                    newHeight = currentTemplatesArr[tempNum].getSession().getScreenLength() * currentTemplatesArr[tempNum].renderer.lineHeight + currentTemplatesArr[tempNum].renderer.scrollBar.getWidth();
                    newHeight = newHeight < 40 ? 40 : newHeight;
                    newHeight = newHeight > 800 ? 800 : newHeight;
                }else{
                    newHeight = 40;
                }

                $("#templateCard"+ tempNum.toString()).height(newHeight);
                currentTemplatesArr[tempNum].resize();
            }

            var currentStyleName = "";
            function setAceStyle(styleName){
                if(styleName === "dark"){
                    scriptDisplay.setTheme("ace/theme/twilight");
                    scriptEditor.setTheme("ace/theme/twilight");
                    for(var inx in currentTemplatesArr){
                        currentTemplatesArr[inx].setTheme("ace/theme/twilight");
                    }
                    for(var inx in buildCodeDisplayTemps){
                        buildCodeDisplayTemps[inx].setTheme("ace/theme/twilight");
                    }
                }else{
                    scriptDisplay.setTheme("ace/theme/clouds");
                    scriptEditor.setTheme("ace/theme/clouds");
                    for(var inx in currentTemplatesArr){
                        currentTemplatesArr[inx].setTheme("ace/theme/clouds");
                    }
                    for(var inx in buildCodeDisplayTemps){
                        buildCodeDisplayTemps[inx].setTheme("ace/theme/clouds");
                    }
                }
            }

            //Apply Style
            function setStyle(name){
                const styleName = name;

                currentStyleName = styleName;
                setAceStyle(styleName);

                var mydata = {styleName:styleName};

                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/getStyle',
                    success : function(data) {

                        var sheet;
                        if (lastStyleSheet){
                            sheet = lastStyleSheet;
                        }else{
                            sheet = document.createElement('style');
                            document.body.appendChild(sheet);
                        }
                        lastStyleSheet = sheet;

                        const respJson = JSON.parse(data);
                        cssUnsortTxt = respJson.css;
                        var cssArr= cssUnsortTxt.split("}")
                        shuffleArray(cssArr);
                        cssTxt = cssArr.join("}");

                        loadCssParts( 0, lastStyleSheet);
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })

            }
            setStyle('');

            $('.jobCard').on('shown.bs.collapse', function () {
                setAceBuildCodeHeight();
            })


            //glabal array to hold all dashboard promoted description quill instances
            var currentPromotedDashDescriptionsArr = [];

            var sysDescription = new Quill('#sysDescription', {
                theme: 'snow'
            });
            var description = new Quill('#description', {
                theme: 'snow'
            });

            //Send key presses to /keySend service
            var lastKeys  = "";
            $(document).keydown(function (e) {
                lastKeys = $("#fakeInput").val();
            });
            $(document).keyup(function (e) {
                var KeyObj = {
                    key: e.key,
                    code: e.originalEvent.code,
                    ctrlKey: e.ctrlKey,
                    shiftKey: e.shiftKey,
                    altKey: e.altKey,
                    charCode: e.charCode,
                    keyCode: e.keyCode
                }

                //mobile does not send delete key:-(
                if(lastKeys.length > $("#fakeInput").val().length){
                    KeyObj = { key: 'Backspace',
                        code: 'Backspace',
                        ctrlKey: 'false',
                        shiftKey: 'false',
                        altKey: 'false',
                        charCode: '0',
                        keyCode: '8' }

                }

                //https://stackoverflow.com/questions/30743490/capture-keys-typed-on-android-virtual-keyboard-using-javascript
                if(KeyObj.keyCode === 229){
                    var fi = $("#fakeInput").val();
                    //KeyObj.key = $("#fakeInput").val();
                    KeyObj.keyCode = fi.charCodeAt(fi.length-1);
                }else{

                }

                if(vidHoverFlag){
                    if(KeyObj.key === "Enter"){
                        $("#fakeInput").blur();
                        $("#fakeInput").val("");
                    }
                    e.preventDefault();
                    e.stopPropagation();
                    $.get("/keySend",{KeyObj:KeyObj},function(resp){

                    });
                }
                //console.log({vidHoverFlag})

            });


            var webStreamCanvas = document.getElementById("videoCanvas");
            var webStreamCtx = webStreamCanvas.getContext("2d");

            webStreamCanvas.width = 1280; // target width
            webStreamCanvas.height = 720; // target height

            var webStreamCanvasImageContainer = new Image();

            webStreamCanvasImageContainer.onload = function(e) {
                webStreamCtx.drawImage(webStreamCanvasImageContainer,
                    0, 0, webStreamCanvasImageContainer.width, webStreamCanvasImageContainer.height,
                    0, 0, webStreamCanvas.width, webStreamCanvas.height
                );
            };

            //call ajax /video and process the returned chuncked json video frames
            function startStream(){
               // console.log("starting stream: "  );
//                $("#playButton").hide();
//                $("#pauseButton").show();
//                videoPaused = false;
                $.ajax({
                    url: '/video',
                    processData: false,
                    contentType: false,
                    type: 'GET',
                    data: "",
                    xhr: function () {

                        var xhr = $.ajaxSettings.xhr();

                        var currentRespText = '';

                        var buffer = ""
                        xhr.onprogress = function(e) {
//                            if(videoPaused === true){
//                                xhr.abort();
//                            }else{
                                var rText = xhr.responseText

                                var imgData = rText.substr(currentRespText.length)
                                currentRespText = rText;

                                x = imgData.split('<-->').length;

                                buffer += imgData;
                                var x = 0;
                                while (buffer.split("<-->").length > 1){

                                    var imgBlock = buffer.split("<-->")[0];
                                    var remainderBlocks = buffer.split("<-->");
                                    remainderBlocks.shift();
                                    buffer = remainderBlocks.join("<-->");

                                    if(imgBlock.charAt(0) == "{" && imgBlock.charAt((imgBlock.length)-1) == "}" ){

                                        // console.log("processing block: " + imgBlock.length.toString());

                                        imgObj = JSON.parse(imgBlock);
                                        //console.log("setting image#: " + imgObj.frameCount.toString());

                                        if(imgObj.hasOwnProperty("data")){
                                            webStreamCanvasImageContainer.src = 'data:image/jpeg;base64,' + imgObj.data;
                                        }
                                    }
                                }
//                            }

                        };
                        return xhr;
                    }
                }).done(function (e) {
                    //console.log("startStream Done -> restart");
                    setTimeout(startStream, 1000);
                }).fail(function (e) {
                        setTimeout(startStream, 5000);
                        console.log("startStream Fail"  )
                        $("#playButton").show();
                        $("#pauseButton").hide();
                });
            };
            setTimeout(startStream, 5000);

            function navigate(url){
                if(url === 'pausedUrl' ){
                    url = 'https://localhost:8443/images/tvoff.gif';
                    $.get('/navigate', {url:url}, function(data) {});
                }else{
                    pausedUrl = url;
                }
                localStorage['appLink'] = url;
                $.get('/navigate', {url:url}, function(data) {});
            }
            $("#inspectLink").on('click', function(e){
                $("#inspectLink").addClass('active');
                $.get("/inspect")
            });
            $("#inspectLink").popover({
                animation: true,
                content: "Enable inspect mode then select element to inspect",
                delay: { "show": 500, "hide": 100 },
                trigger: 'hover',
                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            });


            $("#snapButton").on('click', function(e){
                const id = $("#id").val();
                $.get("/snapComp",{'id': id});
                $("#snapButton").addClass('active');
                setTimeout(function(){
                    $("#snapButton").removeClass('active'); }
                , 300);
                $(this).data('bs.popover').config.content = "Snapped thumbnail";
                $(this).popover("show");
            });
            $("#snapButton").hide();

            $("#videoRefreshLink").on('click', function(e){
                $.get("/endChrome");
                var videoCanvas = document.getElementById('videoCanvas');
                var ctx = videoCanvas.getContext('2d');
                ctx.fillStyle = '#777';
                ctx.fillRect(0, 0, videoCanvas.width, videoCanvas.height);
                setTimeout(function(){ $.get("/startChrome");
                    $("#videoRefreshLink").addClass('active');
                    $("#videoRefreshLink").removeClass('active'); }
                , 3000)
            });
            $("#videoRefreshLink").popover({
                animation: true,
                content: "Kill and restart Chrome",
                delay: { "show": 500, "hide": 100 },
                trigger: 'hover',
                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            });

            $("#inspectMaximizeLink").on('click', function(e){
                $('#videoModal').modal('show');
                $("#videoScreen").detach().appendTo('#videoBody');
                $("#inspectMaximizeLink").hide()
            });
            $("#inspectMaximizeLink").popover({
                animation: true,
                content: "Expand Chrome window",
                delay: { "show": 500, "hide": 100 },
                trigger: 'hover',
                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            });

            var pausedUrl = "";
            $("#playButton").hide();
            $("#playButton").on('click', function(e){
//                startStream();
                $("#playButton").hide();
                $("#pauseButton").show();
                navigate(pausedUrl);
            })
            $("#playButton").popover({
                animation: true,
                content: "Play stream",
                delay: { "show": 500, "hide": 100 },
                trigger: 'hover',
                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            });
            $("#pauseButton").on('click', function(e){
                $("#playButton").show();
                $("#pauseButton").hide();
                navigate('pausedUrl');

            })
            $("#pauseButton").popover({
                animation: true,
                content: "Pause stream",
                delay: { "show": 500, "hide": 100 },
                trigger: 'hover',
                template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
            });
            function updateLaunchLink(url){
                var appLink = "<a href='" + url +"' alt='" + url +"' target='_new' ><i class='fa  fa-external-link fa-fw '></i>" + "</a>";
                $("#launchLink").html( appLink);
                var copyLink = "<i id='launchLinkCopy' class='fa  fa-copy fa-fw'>";
                $("#launchLinkCopyContainer").html( copyLink);

                localStorage['launchLink'] = url;

                $("#launchLinkCopy").click(function(event){
                    
                    $("#launchLinkHiddenCopy").val($("<div/>").html(url).text());

                    var copyText = document.getElementById("launchLinkHiddenCopy");
                    copyText.select();
                    copyText.setSelectionRange(0, 99999);
                    document.execCommand("copy");
//                    console.log(copyText.value)
                });
                $("#launchLink").popover('dispose').popover({
                    animation: true,
                    content: "launch "+url,
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
                $("#launchLinkCopy").popover('dispose').popover({
                    animation: true,
                    content: "copy '"+url+"' to clipboard",
                    delay: { "show": 500, "hide": 100 },
                    trigger: 'hover',
                    template: '<div class="popover hoverPop" role="tooltip"><div class="arrow hoverPopArrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                });
            }

            if(localStorage['appLink']){
                navigate(localStorage['appLink'])
            }
            if(localStorage['launchLink']){
                updateLaunchLink(localStorage['launchLink'])
            }

            //Video mouse click events
            var videoClickIsDown = false;
            var videoHoverX = 0, videoHoverY = 0;
            var lastVideoHoverX = 0, lastVideoHoverY = 0;
            var xVideo1, yVideo1, xVideo2, yVideo2;

            var vidHoverFlag=false;

            var currentVideoScroll = 0;

            function setCanvasUIEvents(){

               document.body.addEventListener('wheel', function(e){
                    if(e.target.id == "videoCanvas"){

                    currentVideoScroll += e.deltaY;
                    e.preventDefault();

                    }
                }, {passive: false}) //https://github.com/inuyaksa/jquery.nicescroll/issues/799#issuecomment-522275951

                $("#videoCanvas").mousemove( videoHover);

                $("#videoCanvas").mouseenter( function(e){vidHoverFlag=true});
                $("#videoCanvas").mouseleave( function(e){vidHoverFlag=false});


                $("#videoCanvas").on('mousedown', function(e){
                    if (videoClickIsDown === false) {

                        videoClickIsDown = true;

                        var pos = getMousePos(webStreamCanvas, e);
                        xVideo1 = pos.x;
                        yVideo1 = pos.y;
                    }
                });

                $(window).on('mouseup', function(e){

                    if (videoClickIsDown === true) {

                        var pos = getMousePos(webStreamCanvas, e);
                        xVideo2 = pos.x;
                        yVideo2 = pos.y;
                        var width = pos.width;
                        var height = pos.height;

                        videoClickIsDown = false;

                        //signal server of mouse click x,y as ratios of width & hight
                        sendVideoMouseClick(xVideo2/width ,yVideo2/height, e.ctrlKey);
                        //consol.log(xVideo1 + ',' + yVideo1 + ',' +xVideo2 + ',' +yVideo2);

                        $("#inspectLink").removeClass('active');
                    }
                });

            }
            setCanvasUIEvents();

            function getMousePos(canvas, evt) {
                var rect = canvas.getBoundingClientRect();
                return {
                    x: evt.clientX - rect.left,
                    y: evt.clientY - rect.top,
                    width: rect.right - rect.left,
                    height: rect.bottom - rect.top
                };
            }

            function videoHover(e){
                var pos = getMousePos(webStreamCanvas, e);
                videoHoverX = pos.x/pos.width;
                videoHoverY = pos.y/pos.height;
            }

            setInterval(sendMouse,200);
            function sendMouse(){
                if(videoHoverX !== lastVideoHoverX || videoHoverY !== lastVideoHoverY){
                    $.get("/mouseMove",{x:videoHoverX, y:videoHoverY})
                    lastVideoHoverX = videoHoverX
                    lastVideoHoverY = videoHoverY
                }
            }

            setInterval(sendScroll,200);
            function sendScroll(){
                if(currentVideoScroll !== 0){

                    $.get("/VideoScroll",{delta:currentVideoScroll})
                    currentVideoScroll = 0;
                }
            }

           $('#videoModal').on('hidden.bs.modal', function() {
                if($("#componentsBtn").hasClass('active')){
                    $("#videoScreen").detach().appendTo('#screenShotImageHolder');
                }else{
                    // $("#videoScreen").detach().appendTo('#screenshot-panel-body');
                    $("#videoScreen").detach().appendTo($("#dashScreen"));
                };
                $("#inspectMaximizeLink").show();
            });

            //create matchlink tree
            var currectMatchTreeObjArr = [];
            $("#matchLink_jstree_div").jstree({
                "core" : {
                    "themes": {
                        "name": "default",
                        "dots": true,
                        "icons": true,
                        "variant" : "small"
                    },
                    "data" : currectMatchTreeObjArr,
                    'check_callback': function(operation, node, node_parent, node_position, more) {
                        return true;  //allow all other operations
                    }
                },
                "types" : {
                    "system" : {
                        "icon" : "fa fa-server ",
                        "a_attr": { class : " systemRow "}
                    },
                    "job" : {
                        "icon" : "fa fa-check-circle-o jobRow"
                    },
                    "needfull" : {
                        "icon" : "fa fa-wrench", //-circle-o",
                        "a_attr": { class : " needfull "},
                        "li_attr": { class : " needfull "}
                    },
                    "rerunnable" : {
                        "icon" : "fa fa-repeat rerunnableRow",
                        "a_attr": { class : " rerunnableRow "}
                    },
                    "root" : {
                        "icon" : "fa fa-server"
                    },
                    "disabled" : {
                        "icon" : "fa fa-times-circle-o disabledRow",
                        "li_attr": { class : "  "}
                    }
                },
                "sort" : function(a, b) {
                    a1 = this.get_node(a);
                    b1 = this.get_node(b);
                    return (a1.original.sort < b1.original.sort) ? -1 : 1;

                },
                "plugins" : [ "sort", "types", "wholerow"]
            }).on(  'create_node.jstree', function(e, data) {
                //console.log('saved');
            }  );

            $('#matchLink_jstree_div').bind("refresh.jstree", function (e, data) {
                $(this).jstree("open_all");
            })

            $('#matchLink_jstree_div').on("select_node.jstree", function (e, data) {

                    $('#videoModal').modal('hide');

                    var selectedMatchNode = data.selected[0];

                    if(  $("#componentsBtn").hasClass('active')){

                        setTimeout(function(){
                            $('#jstree_div').jstree("deselect_all");
                            $('#jstree_div').jstree('select_node', selectedMatchNode);
                            $('#jstree_div').jstree(true).get_node(selectedMatchNode, true).children('.jstree-anchor').focus();
                        }, 500);

                    }else{


                    }
                });

            function sendVideoMouseClick(x ,y, ctrlKey){

                var selectedComp = "";
                if(  $("#componentsBtn").hasClass('active')){
                    selectedComp = $("#id").val();
                }else{
                    selectedComp = $(".selectedDashRow").parent().attr("data-id");                                
                }

                $(".varRowCompHeader").css({"font-size":".8em"})
                $.get("/VideoClick",{x:x, y:y, ctrlKey:ctrlKey, selectedComp:selectedComp},function(resp){ 

                    var respObj = JSON.parse(resp);
                    if(!respObj.hasOwnProperty('attributes')) {

                    }else{

                        if(respObj.hasOwnProperty('matchingSelectedComp')){
                            const element = document.getElementById("varRowCompHeader_" + respObj.matchingSelectedComp);
                            if (element){
                               
                                // const elementTop = element.offsetHeight ;

                                const compDashVariables = document.getElementById('compDashVariables');
                                const middle = element.offsetTop  - (compDashVariables.offsetHeight / 2) - compDashVariables.offsetTop;

                                compDashVariables.scrollTo(0, middle);

                                $(".varRowCompHeader").css({"font-size":".8em"})
                                $("#varRowCompHeader_" + respObj.matchingSelectedComp ).css({"font-size":"1.2em"})    
                            }
                        }

                        var inspectAttributes = respObj.attributes;
                        var inspectHtml = respObj.outerHtml;
                        var inspectDomObjDesc = respObj.domData.object.description
                        var matchingComponents = respObj.matchingComponents;
                        var matchingComponentsCount = respObj.matchingComponentsCount;
                        var idHtml =  '<div id="codeInspectLabel" class="codeInspectLabel">' + inspectDomObjDesc+ '</div>';




                        $("#componentLinks").html(idHtml);

                        if(inspectDomObjDesc.substr(0,5) === "input" || inspectDomObjDesc.substr(0,8) === "textarea"){
                            // if the clicked element is an input try to raise mobile kb
                            $("#fakeInput").focus();
                        }

                        currectMatchTreeObjArr = matchingComponents;

                        $('#matchLink_jstree_div').jstree(true).settings.core.data = currectMatchTreeObjArr;
                        $('#matchLink_jstree_div').jstree(true).refresh();

                        if(currectMatchTreeObjArr.length < 1){
                            $('#vidMenuMatch').hide();
                            $("#vidMenuDesc").html(inspectDomObjDesc);
                        }else{
                            $('#vidMenuMatch').show();
                            $("#vidMenuDesc").html("");
                            $("#vidMenuMatchNum").html(" ("+ matchingComponentsCount.toString() +")")
                        }
                    
                    
                    
                    
                    }
                })
            }

            $("#HtmlLabel").hide();
            $("#AttributesLabel").hide();
            $('#vidMenuMatch').hide();

            //user picks build code. Show modal. Load build code table
            $("#buildCodePickButton").click(function(evt){

                $('#buildCodePickModal').modal('toggle');

                var id = $('#id').val();

                var mode = $("input[name='buildCodeFilter']:checked"). val();
                loadBuildCodeModalList(id, mode);

                evt.stopPropagation();
            });


            //Upon clicking the filter radio the function loadBuildCodeModalList(id, pickedMode) is called
            $('.buildCodeFilter').on('click', function(evt){
                var pickedMode = $(this).attr('data-ID');
                $("#buildCodeFilter-"+pickedMode).prop("checked", true);
                evt.stopPropagation();
            });

            $(".buildCodeFilterRadio").click(function(evt){
                //var pickedMode = $(this).attr('value');
               // $("#buildCodeFilter-"+pickedMode).prop("checked", true);
                var id = $('#id').val();
                var mode = $("input[name='buildCodeFilter']:checked").val();
                loadBuildCodeModalList(id, mode);
                evt.stopPropagation();
            });

            //user clicks build code fork. Show warning modal.
            $("#buildCodeForkButton").click(function(evt){
                $('#buildCodeForkModal').modal('toggle');
                evt.stopPropagation();
            });

            //user clicks copy code btn.
            var copyCodeId = ""
            $("#buildCodeCopyButton").click(function(evt){
                copyCodeId = $("#buildCode").val();
                $("#buildCodePasteButton").show();
                evt.stopPropagation();
            });

            //user clicks paste code btn.
            $("#buildCodePasteButton").hide();
            $("#buildCodePasteButton").click(function(evt){
                $("#buildCode").val(copyCodeId);
                loadBuildCode(copyCodeId);
                editModeJob();
                evt.stopPropagation();
            });


            function loadBuildCodeModalList(node, mode){
                $("#buildCodeList").html("");
                $('#buildCodeList').scrollTop(0);
                var mydata = {id:"#", node:node, mode:mode};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/BuildCode',
                    success : function(data) {

                        const buildCodes = JSON.parse(data);

                        var codesSorted = buildCodes.sort(function (a, b) //sort by date + name
                        {
                            var aBuildCodeHist = [];
                            var aBuildCodeLastDS = "2000-02-20T20:20:20.200Z";
                            if(a.hasOwnProperty("hist")){
                                aBuildCodeHist = a.hist;
                                if(aBuildCodeHist.length > 0){
                                    aBuildCodeLastDS = aBuildCodeHist[aBuildCodeHist.length -1].ds
                                }
                            }
                            var bBuildCodeLastDS = "2000-02-20T20:20:20.200Z";
                            if(b.hasOwnProperty("hist")){
                                bBuildCodeHist = b.hist;
                                if(bBuildCodeHist.length > 0){
                                    bBuildCodeLastDS = bBuildCodeHist[bBuildCodeHist.length -1].ds
                                }
                            }

                            //return a.name.toLowerCase().localeCompare( b.name.toLowerCase()) && bBuildCodeLastDS.split("T")[0].localeCompare(aBuildCodeLastDS ) ;

                            if(a.name.toLowerCase() == b.name.toLowerCase())
                            {
                                return (aBuildCodeLastDS.split("T")[0] > bBuildCodeLastDS.split("T")[0]) ? -1 : (aBuildCodeLastDS.split("T")[0] < bBuildCodeLastDS.split("T")[0]) ? 1 : 0;
                            }
                            else
                            {
                                return (a.name.toLowerCase() < b.name.toLowerCase()) ? -1 : 1;
                            }
                        });


                        codesSorted.forEach(function(row){
                            var thisBuildCodeId = row.id;
                            var thisBuildCodeRR = row.rerunnable;
                            var thisBuildCodeSF = row.systemFunction;
                            var thisBuildCodeName = row.name;
                            var thisBuildCodeHist = [];
                            var thisBuildCodeLastDS = "2020-02-20T20:20:20.200Z";
                            if(row.hasOwnProperty("hist")){
                                thisBuildCodeHist = row.hist;
                                if(thisBuildCodeHist.length > 0){
                                    thisBuildCodeLastDS = thisBuildCodeHist[thisBuildCodeHist.length -1].ds
                                }
                            }
                            var dropDownListHtml = "";

                            dropDownListHtml += '<tr class="d-flex"><td class="col-2 buildCodeListDSCol">' ;
                            dropDownListHtml += thisBuildCodeLastDS.split("T")[0] + '</td>';

                            dropDownListHtml += '<td class="col-6 buildCodeListNameCol" >' ;

                            dropDownListHtml += '<div class="form-group"><div data-id="'+ thisBuildCodeId +'" class="radio buildCodePickItem">'
                            dropDownListHtml += '    <input name="buildCodeSelect" type="radio">   ' + thisBuildCodeName
                            dropDownListHtml += '</div> </div>'
                            //dropDownListHtml += "<a class='dropdown-item buildCodePickItem' href='#' data-id='"+ thisBuildCodeId +"' data-buildCodeName='"+ thisBuildCodeName +"'>"+ thisBuildCodeName +"</a>";
                            dropDownListHtml += '</td>'

                            dropDownListHtml += '<td class="col-2 buildCodeListRRCol">' ;
                            dropDownListHtml += thisBuildCodeRR === 1 ? "Yes" : "No";
                            dropDownListHtml += '</td>';

                            dropDownListHtml += '<td class="col-2 buildCodeListSFCol">' ;
                            dropDownListHtml += thisBuildCodeSF === 1 ? "Yes" : "No";
                            dropDownListHtml += '</td>';

                            $("#buildCodeList").append(dropDownListHtml);
                        });
                        selectedBuildCode = "";


                        if($("#buildCode").val() !== ""){
                            var rowpos = $('div[data-id="' + $("#buildCode").val() + '"]').offset();
                            var listpos = $('#buildCodeList').offset();
                            $('#buildCodeList').animate({scrollTop: rowpos.top - listpos.top - 30}, 500);

                            $('div[data-id="' + $("#buildCode").val() + '"]').find("input").prop("checked", true);
                        }

                        $(".buildCodePickItem").on('click', function(evt){
                            selectedBuildCode = $(this).attr('data-Id');

                            $(this).find("input").prop("checked", true);

                            evt.stopPropagation();
                        });

                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            }

            var selectedBuildCode = "";
            $("#buildCodeSelectBtn").on('click', function(evt){
                if(selectedBuildCode !== ""){
                    $("#buildCode").val(selectedBuildCode);
                    loadBuildCode(selectedBuildCode);
                    editModeJob();
                }
            });

            $("#buildCodeNameRead").click(function(evt){
                evt.stopPropagation();
            });

            $("#buildCodeNameEdit").click(function(evt){
                evt.stopPropagation();
            });

            $('#compFocus').on('click', function(){
                var id = $("#id").val();

                var runningNode =  $('#jstree_div').jstree(true).get_node(id, true);
                $("#jstree_div").jstree("_open_to", id);
                runningNode.children('.jstree-anchor').focus();
            });

            $("#buildCodeForkBtn").on('click', function(evt){
                $("#buildCode").val("");
                $("#newBuildCodeName").val("copy of " + $("#newBuildCodeName").val());
                $("#alsoUsedInMess").text("Not used in any other component")
                $("#buildCodeMatch").html("");
                $("#buildCodeCopyButton").hide();
                $("#buildCodeForkButton").hide();

            });

            document.body.addEventListener('wheel', function(e){
                var csX = e.deltaX;
                var csY = e.deltaY;
                if(Math.abs(csX) > Math.abs(csY)){

                    if(componentDetailsHoverFlag){
                        e.preventDefault();
                        setWindowWidth(JSON.parse(localStorage['locTreeWidth']).width - csX/2, container);
                        updateAllPopovers();
                    }
                }
            }, {passive: false}) //https://github.com/inuyaksa/jquery.nicescroll/issues/799#issuecomment-522275951

            var ts=0;
            $("#treePanelHandle").bind('touchstart', function(e) {
                ts = e.originalEvent.touches[0].clientX;
            });

            $("#treePanelHandle").bind('touchmove', function(e) {
                var te = e.originalEvent.changedTouches[0].clientX;
                if($( "#sidebar" ).hasClass( "show" )){
                    setWindowWidth(te - $("#sidebar").width() - 2, container, false);
                }else{
                    setWindowWidth(te - 2, container, false);
                }
            });

            var componentDetailsHoverFlag = false;
            $("#rightCol").mouseenter( function(e){
                componentDetailsHoverFlag=true
            });
            $("#rightCol").mouseleave( function(e){componentDetailsHoverFlag=false});

            var currentSettings = {};
            $.ajax({
                type: 'get',
                data: {},
                dataType : "text",
                headers: {
                    "content-type": "application/json"
                },
                url: '/settings',
                success : function(data) {
                    currentSettings = JSON.parse(data);
                },
                error : function(error) {
                    console.log(error)
                }
            });

            //redirect user to ezstack when demo finishes
            $('#serverUnavailableDemoModal').on('hidden.bs.modal', function() {
                if (currentSettings.hasOwnProperty("clientMode")){
                    if (currentSettings.clientMode === "demo"){
                        window.location.replace("https://ezstacksystems.com?demo=done");
                    }
                }
            });

            $('.modal').on('shown.bs.modal', function() {
                $(this).find('[autofocus]').focus();
            });

            $('.navbar-collapse').on('shown.bs.collapse', function() {

                var main = $("main")
                main.css({'transition': 'padding-left 0.2s ease-out', 'padding-left':'220px' });
                $("#navLeftIcon").detach().prependTo('#sidebar');
            });

            $('.navbar-collapse').on('hidden.bs.collapse', function() {
                $("#navLeftIcon").detach().appendTo('#navTopIcon');
            });
            $('.navbar-collapse').on('hide.bs.collapse', function() {

                var main = $("main")
                main.css({'transition': 'padding-left 0.2s ease-in', 'padding-left':'0px' });
            });

            $("#setImageBtn").click(function(){
                var mydata = {};
                mydata.id = $("#buildCode").val();
                mydata.iconURL = $("#newImageURL").val();
                mydata.fileName = $("#pasteNewImage").val();
                $.ajax({
                    type: 'POST',
                    data: JSON.stringify(mydata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/setNewImage',
                    success : function(result) {

                        $.get('/fileList', { id: $('#buildCode').val() }, function(data) {
                            $('#resourceFiles').val(data);
                            populateFileList($('#buildCode').val(), data, true, "#fileList");
                        });

                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            })


        });


        //-------------------------------------------   doc ready -------------------------------------------

        /**
         * Randomize array element order in-place.
         * Using Durstenfeld shuffle algorithm. https://stackoverflow.com/a/12646864
         */
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        var cssTxt="";
        var cssUnsortTxt="";
        //var sheetPart = 0;
        function loadCssParts( part, sheet){

            var cssTxtPart = cssTxt.split("}")[part];
            var totRows = cssTxt.split("}").length;
            if( totRows > part){
                sheet.innerHTML += cssTxtPart + "}";
                setTimeout('loadCssParts('+(part+1).toString()+', lastStyleSheet)', 500/totRows);
            }else{
                sheet.innerHTML = "";
                sheet.innerHTML = cssUnsortTxt
            }
        }

        function formatTimeStr(timeStr){
            var timeStrAr = timeStr.split("-");
            if (timeStrAr.length != 6 ){
                return "";
            }else{
                var timeDate = new Date(timeStrAr[0], timeStrAr[1]-1, timeStrAr[2], timeStrAr[3], timeStrAr[4], timeStrAr[5]);
                if ( !(timeDate instanceof Date && !isNaN(timeDate.valueOf())) ){return ""}else{
                    var newStr =  timeDate.toUTCString()  ;
                    return(newStr);
                }
            }
        }

    </script>

    <!-- paste icom image -->
    <script type = "text/javascript" language = "javascript" >
        // Created by STRd6
        // MIT License
        // jquery.paste_image_reader.js
        (function($) {
            var defaults;
            $.event.fix = (function(originalFix) {
                return function(event) {
                    event = originalFix.apply(this, arguments);
                    if (event.type.indexOf('copy') === 0 || event.type.indexOf('paste') === 0) {
                        event.clipboardData = event.originalEvent.clipboardData;
                    }
                    return event;
                };
            })($.event.fix);
            defaults = {
                callback: $.noop,
                matchType: /image.*/
            };
            return $.fn.pasteImageReader = function(options) {
                if (typeof options === "function") {
                    options = {
                        callback: options
                    };
                }
                options = $.extend({}, defaults, options);
                return this.each(function() {
                    var $this, element;
                    element = this;
                    $this = $(this);
                    return $this.bind('paste', function(event) {
                        var clipboardData, found;
                        found = false;
                        clipboardData = event.clipboardData;
                        return Array.prototype.forEach.call(clipboardData.types, function(type, i) {
                            var file, reader;
                            if (found) {
                                return;
                            }
                            if (type.match(options.matchType) || clipboardData.items[i].type.match(options.matchType)) {
                                file = clipboardData.items[i].getAsFile();
                                reader = new FileReader();
                                reader.onload = function(evt) {
                                    return options.callback.call(element, {
                                        dataURL: evt.target.result,
                                        event: evt,
                                        file: file,
                                        name: file.name
                                    });
                                };
                                reader.readAsDataURL(file);
                                return found = true;
                            }
                        });
                    });
                });
            };
        })(jQuery);


        $("html").pasteImageReader(function(results) {
            var focused = $(':focus')[0];
            if (focused.id === "pasteIcon" ){
                var dataURL, filename;
                filename = results.filename;
                dataURL = results.dataURL;


                var canvas = document.createElement("canvas");
                var ctx = canvas.getContext("2d");

                canvas.width = 21; // target width
                canvas.height = 21; // target height

                var image = new Image();

                image.onload = function(e) {
                    ctx.drawImage(image,
                        0, 0, image.width, image.height,
                        0, 0, canvas.width, canvas.height
                    );
                    // create a new base64 encoding
                    var resampledImage = new Image();
                    var newdataURL = canvas.toDataURL();
                    resampledImage.src = newdataURL;
                    $('#iconURL').val(newdataURL);
                    var rs = document.getElementById("resampled");
                    rs.innerHTML = '';
                    rs.appendChild(resampledImage);
                };
                image.src = dataURL;
            }

            if (focused.id === "pasteNewImage" ){
                var dataURL, filename;
                filename = results.filename;
                dataURL = results.dataURL;


                var canvas = document.createElement("canvas");
                var ctx = canvas.getContext("2d");

                var image = new Image();

                image.onload = function(e) {
                    canvas.width = image.width;
                    canvas.height = image.height;
                    ctx.drawImage(image,
                        0, 0, image.width, image.height, 
                        0, 0, image.width, image.height
                    );
                    // create a new base64 encoding
                    var resampledImage = new Image();
                    var newdataURL = canvas.toDataURL();
                    resampledImage.src = newdataURL;
                    $('#newImageURL').val(newdataURL);
                    var rs = document.getElementById("resampledNewImage");
                    rs.innerHTML = '';
                    rs.appendChild(resampledImage);
                    $("#setImageBtn").show();
                };
                image.src = dataURL;


            }


        });

    </script>

</head>

<body>
    <svg aria-hidden="true" style="position: absolute; width: 0; height: 0; overflow: hidden;" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <defs>
        <symbol id="icon-EZStack" viewBox="0 0 10 40">
            <title>EZStack</title>
            <path d="M26.438 14.385l-13.152-7.046-13.152 7.046 13.152 7.046zM13.285 9.677l8.786 4.708-8.786 4.708-8.786-4.708zM13.285 26.715v0l-13.152-7.046 2.635-1.411 10.518 5.635c0 0 0-9.132 0 2.822zM23.803 23.543l2.635 1.411-13.152 7.046-13.152-7.046 2.635-1.411 10.518 5.635z"></path>
            <path d="M0.133 14.385h3.288v5.284h-3.288v-5.284z"></path>
            <path d="M0.133 19.669h3.288v5.284h-3.288v-5.284z"></path>
            <path d="M13.285 29.178l10.958-14.793h2.194l-10.958 14.793h-2.194z"></path>
        </symbol>
    </defs></svg>


    <input type="text" id="fakeInput" style="position: absolute; opacity: 0; height: 0px; font-size: 16px; right: 25%; top: 25%;">
    <div id="floatingPopoverField"  width="100%" height="100%" style="position: absolute">
        <div id="floatingPopover"></div>
    </div>

    <div id="rowContainer" class="container-fluid container-fluid-custom">

        <div id="mainRow" class="wrapper">
            <nav id="sidebar" class=" col-sm-2 sidebar navbar-collapse show">
                <div id="navLeftIcon">
                    <a href="#" class="navbar-brand col-sm-3 col-md-2 mr-0" data-toggle="modal" data-target="#demoWelcomeModal"><svg id="ezStackTopIcon" class="icon icon-EZStack"><use xlink:href="#icon-EZStack"></use></svg> ezStack</a>
                </div>

                <div class="sidebar-sticky">
                    <ul class="nav flex-column">

                        <li class="nav-item">
                            <a id="dashBtn" class="nav-link active" href="#">
                                <i class="fa fa-home fa-fw"></i>
                                Dashboard <span class="sr-only">(current)</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a id="componentsBtn" class="nav-link" href="#">
                                <i class="fa fa-th-large fa-fw"></i>
                                Components
                            </a>
                        </li>
                        <li class="nav-item">
                            <a id="buildCodeBtn" class="nav-link" href="#">
                                <i class="fa fa-code fa-fw"></i>
                                Build Code
                            </a>
                        </li>
                    </ul>

                    <h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 nav-text-muted">
                        <span>Libraries</span>
                        <a id="LibDropDownPick" class="d-flex align-items-center nav-text-muted" href="#">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-plus-circle"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="16"></line><line x1="8" y1="12" x2="16" y2="12"></line></svg>
                        </a>
                    </h6>
                    <ul id="LibListNav" class="nav flex-column mb-2"></ul>
                </div>
            </nav>

            <main role="main" class="container-fluid  mainCol">
                <%- include topMenu.ejs %>
                <input name="dashId" id="dashId" type="hidden" />
                <input name="dashSys" id="dashSys" type="hidden" />

                <div class="" id="dashRow">

                    <div id="" class="row top-row">
                        <div class="col-2">
                            <button class="dropdown-toggle dashSystemDropdownButton" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Pick...
                            </button>
                            <div id="dashSystemsDropdownMenu" class="dropdown-menu dashSystemsDropdownMenu" aria-labelledby="dropdownMenuButton">
                                <div><a class="dropdown-item" href="#">Action</a></div>
                            </div>
                        </div>
                        <div class="col-2">
                            <button class="dropdown-toggle dashSystemDropdownButton" type="button" id="dropdownFuncButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <!--<span>&#402;</span>-->
                                Functions
                            </button>
                            <div id="dashFuncDropdownMenu" class="dropdown-menu dashSystemsDropdownMenu" aria-labelledby="dropdownFuncButton">

                            </div>
                        </div>
                    </div>
                    
                    <div id ="dashBoardBottomRow" class=" dashBoardBottomRow">
                        <div id="dashListCol" class="dashListCol">
                            <!--<div class="fadeTop"></div>-->
                            <div id="dashTable" class="dashTbody"></div>
                        </div>    
                        <div class=' dashSelected'></div>            
                    </div>
                </div>
                <div id="componentsRowContainer">

                    <div id="componentsRow" class="d-flex justify-content-between nowrap  ">

                        <!--username kept showing up in search input so https://stackoverflow.com/questions/17781077/autocomplete-off-is-not-working-on-firefox/29852908#29852908-->
                        <input type="password" hidden />

                        <div id="leftCol" class="d-flex justify-content-between nowrap top-col-fixed-240" >
                            <div id="treePanel" class='panel panel-default cust-panel locTree-panel-body' style="float: left;"  >
                                <div class='panel-heading treePanelHeading '>
                                    <div class="cust-panel-heading">
                                        Systems <a class='newSys' href='#'><i class="fa fa-plus fa-fw"></i></a>

                                        <!--<a href="#" data-toggle="modal" data-target="#welcomeModal">  <i class="fa fa-question fa-fw"></i></a>-->

                                        <i id="search-icon" class="fa fa-search  fa-fw search-icon"></i>
                                        <span id="searchCycleDiv"><i id="searchCycleUp" class="fa fa-chevron-up fa-fw searchCycleBtn"></i><i  id="searchCycleDown" class="fa fa-chevron-down fa-fw searchCycleBtn"></i></span>
                                        <span id="compSearch" class="form-group search-group">
                                    <input class="form-control form-custom searchInput" placeholder="" id="searchInput" >
                                </span>
                                    </div>
                                </div>

                                <div class='panel-body tree-panel-body'>
                                    <div id="jstree_div" class="SysTree"></div>
                                    <div id="jslibtree_div" class="SysTree"></div>
                                </div>
                            </div>
                            <div id = "treePanelHandle" class = "treePanelHandle"></div>
                        </div>

                        <div id="rightCol" class="" >

                            <button id = "paste_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-paste fa-fw"></i>Paste System</button>
                            <button id = "paste_sys_lib_button" class="btn btn-default jobFormbtn"><i class="fa fa-paste fa-fw"></i>Paste System to Library</button>
                            <!--<icon class="fa fa-th-large"></icon> Component Details-->
                            <div id="sysScreen">
                                <div class="buttonRow">
                                    <button id = "edit_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-pencil-square-o fa-fw"></i>Edit</button>
                                    <button id = "save_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-floppy-o fa-fw"></i>Save</button>
                                    <button id = "moveUp_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-chevron-up fa-fw"></i>Move Up</button>
                                    <button id = "moveDn_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-chevron-down fa-fw"></i>Move Down</button>
                                    <button id = "new_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-plus-square-o fa-fw"></i>New Comp</button>
                                    <button id = "remove_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-minus-square-o fa-fw"></i>Remove</button>
                                    <button id = "clear_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-history fa-fw"></i>Clear History</button>
                                    <button id = "copy_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-copy fa-fw"></i>Copy</button>
                                    <button id = "paste_to_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-paste fa-fw"></i>Paste</button>
                                </div>
                                <div id="sysPanel" class="panel panel-default sysPanel">
                                    <div class="panel-body sys-form-panel"  id="sys-form-panel">
                                        <form id="sysForm">
                                            <div class="col-lg-12">
                                                <div class="row">
                                                    <div class="col nomarg">
                                                        <div class="form-group">
                                                            <label class="build-label">System Name</label>
                                                            <input class="form-control form-custom" placeholder="Enter system name" id="sysName">
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-lg-12" style="padding: 0px">
                                                        <div class="form-group">
                                                            <label class="build-label">System Description</label>
                                                            <div id="sysDescription" class=""></div>

                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="row">
                                                    <div class="col-lg-12" style="padding: 0px">
                                                        <div id="sysVariablesForm" class="form-group">
                                                            <label class="build-label">System Variables</label>
                                                            <a class="newSysVarBtn" href="#"><i class="fa fa-plus fa-fw"></i></a>
                                                            <table class="table varTable">
                                                                <thead>
                                                                <tr class="d-flex">
                                                                   <th class="col-3 dashboardLabel">Name</th>
                                                                    <th class="col-1 dashboardLabel center"><div >Pri</div></th>
                                                                    <!--<th class="col-2 dashboardLabel center">Type</th>-->
                                                                    <th class="col-6 dashboardLabel">Value</th>
                                                                </tr>
                                                                </thead>
                                                                <tbody id="sysVariables" class="varTbody"></tbody>
                                                            </table>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="form-group">
                                                        <label class="build-label">Icon</label>
                                                        <div id="sysIcon"></div>
                                                        <div id="iconPaste">
                                                            <!--<p>Paste icon image: </p>-->
                                                            <span><input type="text" id="pasteIcon" class="form-control" placeholder="Paste icon image here"></span>
                                                            <div id="resampled"></div>
                                                            <input type="hidden" id="iconURL">
                                                        </div>
                                                    </div>
                                                </div>



                                                <!--TESTING-->
                                                <!--<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>-->
                                                <!--<div class="form-group">-->
                                                <!--<label class="build-label">nodeData</label>-->
                                                <!--<textarea type="disabled" class="form-control form-custom code" rows="25" id="sysNodeData"></textarea>-->
                                                <!--</div>-->


                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                            <div id="jobScreen" class="jobScreen">
                                <div class="buttonRow">

                                    <button id = "run_button" class="btn btn-default jobFormbtn"><i class="fa fa-wrench fa-fw"></i>Build</button>
                                    <button id = "edit_button" class="btn btn-default jobFormbtn"><i class="fa fa-pencil-square-o fa-fw"></i>Edit</button>
                                    <button id = "save_button" class="btn btn-default jobFormbtn"><i class="fa fa-floppy-o fa-fw"></i>Save</button>
                                    <button id = "cancelSave_button" class="btn btn-default jobFormbtn"><i class="fa fa-times-circle fa-fw"></i>Cancel</button>
                                    <button id = "moveUp_button" class="btn btn-default jobFormbtn"><i class="fa fa-chevron-up fa-fw"></i>Move Up</button>
                                    <button id = "moveDn_button" class="btn btn-default jobFormbtn"><i class="fa fa-chevron-down fa-fw"></i>Move Down</button>
                                    <button id = "new_button" class="btn btn-default jobFormbtn"><i class="fa fa-plus-square-o fa-fw"></i>New Child</button>
                                    <button id = "remove_button" class="btn btn-default jobFormbtn"><i class="fa fa-minus-square-o fa-fw"></i>Remove</button>
                                    <button id = "copy_button" class="btn btn-default jobFormbtn"><i class="fa fa-copy fa-fw"></i>Copy</button>
                                    <button id = "paste_button" class="btn btn-default jobFormbtn"><i class="fa fa-paste fa-fw"></i>Paste</button>

                                </div>
                                <div id="mainJobPanel" class="panel panel-default jobPanel">
                                    <input type="hidden" id="buildCode" ><input type="hidden" id="id" ><input type="hidden" id="parent" ><input type="hidden" id="text" ><input type="hidden" id="comType" ><input type="hidden" id="ft" ><input type="hidden" id="resourceFiles" >

                                    <div class="panel-body job-form-panel" id="job-form-panel">
                                        <form id="jobForm">
                                            <div class="row">
                                                <div id="topLeftForm" class="col topLeftForm">
                                                    <div id="breadcrumbsRow" class="row"></div>
                                                    <div class="row" id="firstRow" >
                                                        <div class="col jobCompNameCol">
                                                            <div class="form-group">
                                                                <label id='compFocus' class="build-label ">Component Name</label>
                                                                <!--<i id='compFocus' class='fa  fa-fw fa-folder-open compFocusButton'></i>-->
                                                                <input class="form-control form-custom" placeholder="Enter name" id="name">
                                                            </div>
                                                        </div>

                                                        <!--<div class="col-sm-2 switchCol">-->
                                                        <!--<div class="form-group">-->
                                                        <!--<label class="build-label">Version</label>-->
                                                        <!--<div id="version" class="statusBox"></div>-->
                                                        <!--</div>-->
                                                        <!--</div>-->
                                                        <div class="col-sm-2 switchCol">
                                                            <div class="form-group">
                                                                <label class="build-label">Enabled</label>
                                                                <div>
                                                                    <label class="switch" id="componentEnabledSlider">
                                                                        <input name="componentEnabled" id="componentEnabled" type="checkbox">
                                                                        <span class="slider round"></span>
                                                                    </label>
                                                                    <span id="componentEnabledVal" class="statusBox"></span>

                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-2 switchCol">
                                                            <div class="form-group">
                                                                <label class="build-label">Promoted</label>
                                                                <div>
                                                                    <label class="switch" id="promotedSlider">
                                                                        <input name="promoted" id="promoted" type="checkbox">
                                                                        <span class="slider round"></span>
                                                                    </label>
                                                                    <span id="promotedVal" class="statusBox"></span>

                                                                </div>
                                                            </div>
                                                        </div>


                                                        <!--     https://stackoverflow.com/questions/19865158/what-is-the-difference-among-col-lg-col-md-and-col-sm-in-bootstrap   -->
                                                    </div>

                                                    <div class="row">
                                                        <div class="col-lg-12" style="padding: 0px">
                                                            <div class="form-group">
                                                                <label class="build-label">Description</label>
                                                                <!--<textarea rows="4" class="form-control form-custom" placeholder="Enter description of this component" id="description"></textarea>-->
                                                                <div id="description" class=""></div>
                                                            </div>
                                                            <div id="compVariablesForm" class="form-group">
                                                                <label class="build-label">Component Variables</label><a class="newCompVarBtn" href="#"><i class="fa fa-plus fa-fw"></i></a>
                                                                <a href="#" id='varHelp' data-toggle="modal" data-target="#varHelpModal"><i class="fa fa-question fa-fw"></i></a>
                                                                <!--<textarea rows="4" class="form-control form-custom" placeholder="List var=value pairs" id="compVariables"></textarea>-->
                                                                <table class="table varTable">
                                                                    <thead>
                                                                    <tr class="d-flex">
                                                                        <th class="col-3 varLabel varLabelName">Name</th>
                                                                        <th class="col-2 varLabel varFlagLabels center"><div class="varFlagLabel varFlagLabel-pri">Pri</div><div class="varFlagLabel varFlagLabel-pro">Pro</div><div class="varFlagLabel varFlagLabel-ask">Ask</div></th>

                                                                        <th class="col-2 varLabel center">Type</th> 
                                                                        <th class="col-5 varLabel">Value</th>
                                                                    </tr>
                                                                    </thead>
                                                                    <tbody id="compVariables" class="varTbody"></tbody>
                                                                </table>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div id="screenShotImageHolder" class="col screenShotImageHolder"></div>
                                            </div>
                                            <div class="row">

                                                <div class="col-lg-12 ">

                                                    <div id="buildCodeAccordion">
                                                        <div class="card jobCard">
                                                            <div class="card-header buildCodeHeader" id="codeHeading" data-toggle="collapse" data-target="#codeCollapse" aria-expanded="true" aria-controls="codeCollapse">
                                                                <span class="cardLable"><i class="fa fa-tasks fa-fw"></i>Build Code</span>
                                                                <span id="buildCodeNameEdit" class="newBuildCodeName">
                                                                    <input id="newBuildCodeName" class="form-control" type="text">
                                                                    <i id="buildCodePickButton" class="fa fa-list fa-fw buildCodeButton"></i>
                                                                    <i id="buildCodeForkButton" class="fa fa-code-fork fa-fw buildCodeButton"></i>
                                                                    <i id="buildCodeCopyButton" class="fa fa-copy fa-fw buildCodeButton"></i>
                                                                    <i id="buildCodePasteButton" class="fa fa-paste fa-fw buildCodeButton"></i>
                                                                </span>
                                                                <span id="buildCodeNameRead" class="buildCodeNameRead"></span>
                                                            </div>

                                                            <div id="codeCollapse" class="collapse cardBody" aria-labelledby="codeHeading" data-parent="#buildCodeAccordion">
                                                                <div id="buildCodeBody" class="card-body">
                                                                    <div id="buildCodeSwitches" class="row" >
                                                                        <div class="col-sm-2 switchCol">
                                                                            <div class="form-group">
                                                                                <label class="build-label">Rerunnable</label>
                                                                                <div>
                                                                                    <label class="switch" id="rerunnableSlider">
                                                                                        <input name="rerunnable" id="rerunnable" type="checkbox">
                                                                                        <span class="slider round"></span>
                                                                                    </label>
                                                                                    <span id="rerunnableVal" class="statusBox"></span>

                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="col-sm-2 switchCol">
                                                                            <div class="form-group">
                                                                                <label class="build-label">System Function</label>
                                                                                <div>
                                                                                    <label class="switch" id="sysFuncSlider">
                                                                                        <input name="System Function" id="sysFunc" type="checkbox">
                                                                                        <span class="slider round"></span>
                                                                                    </label>
                                                                                    <span id="sysFuncVal" class="statusBox"></span>

                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="col-sm-2 switchCol">
                                                                            <div class="form-group">
                                                                                <label class="build-label">Run Locally</label>
                                                                                <div>
                                                                                    <label class="switch" id="runLocSlider">
                                                                                        <input name="System Function" id="runLoc" type="checkbox">
                                                                                        <span class="slider round"></span>
                                                                                    </label>
                                                                                    <span id="runLocVal" class="statusBox"></span>

                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="col-sm-6">

                                                                            <label id="alsoUsedInMess" class="build-label"></label>
                                                                            <div id="buildCodeMatch"></div>
                                                                        </div>
                                                                    </div>


                                                                    <div class="form-group">
                                                                        <label class="build-label">Build Script</label><i class="fa fa-fw"></i>
                                                                        <a href="#" id='buildHelp' data-toggle="modal" data-target="#buildHelpModal"><i class="fa fa-question fa-fw"></i></a>
                                                                        <a href="#" id='insertVariable' data-toggle="modal" data-target="#varModal">[Insert Variable]</a>
                                                                        <!--<textarea class="form-control form-custom code" rows="4" id="script"></textarea>-->

                                                                        <div class="card codeCard">
                                                                            <div id="script" class="jobCodeEditor"></div>
                                                                        </div>

                                                                    </div>

                                                                    <div id="custTemplates">
                                                                    </div>
                                                                    <div id="newTemplateButton">
                                                                        <label class="build-label">Template<a class='newCust' href='#'><i class="fa fa-plus fa-fw"></i></a></label><br><br>
                                                                    </div>

                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div id="buildResAccordion">
                                                        <div class="card jobCard">
                                                            <div class="card-header" id="resHeading" data-toggle="collapse" data-target="#resCollapse" aria-expanded="true" aria-controls="resCollapse">
                                                                <i class="fa fa-upload fa-fw"></i>Resources
                                                            </div>

                                                            <div id="resCollapse" class="collapse cardBody" aria-labelledby="resHeading" data-parent="#buildResAccordion">
                                                                <div class="card-body">

                                                                    <div class="form-group">
                                                                        <label class="build-label">File Resources<a id='newFileButton' class='newFile' href='#'><i class="fa fa-plus fa-fw"></i></a><a id='delFileButton' class='delFile' href='#'><i class="fa fa-minus fa-fw"></i></a></label>
                                                                        <div id = 'fileList' class = 'fileList'></div>
                                                                        <div id = 'fileUpload'>
                                                                            <div class="progress">
                                                                                <div class="progress-bar" role="progressbar"></div>
                                                                            </div>
                                                                            <input id="upload-input" type="file" name="uploads[]" multiple="multiple">
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <!--<label class="build-label">Thumbnail</label>-->
                                                                        <!--<div id="jobThumbnail"><img width="210" height="210" src="" style="display: none;"></div>-->
                                                                        <div id="newImagePaste" >
                                                                            <label class="build-label">New PNG Image</label>
                                                                            <!--<p>Paste thumbnail image: </p>-->
                                                                            <span><input type="text" id="pasteNewImage" class="form-control" placeholder="Paste new image here and enter new file name"><button id="setImageBtn" class="btn btn-default jobFormbtn">Set</button></span>
                                                                            <div id="resampledNewImage"></div>
                                                                            <input type="hidden" id="newImageURL" value="">
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div id="buildTestAccordion">
                                                        <div class="card jobCard">
                                                            <div class="card-header" id="testHeading" data-toggle="collapse" data-target="#testCollapse" aria-expanded="true" aria-controls="testCollapse">
                                                                <i class="fa fa- fa-check-square-o fa-fw"></i>Test
                                                            </div>
                                                            <div id="testCollapse" class="collapse cardBody" aria-labelledby="testHeading" data-parent="#buildTestAccordion">
                                                                <div class="card-body">
                                                                    <div class="form-group">
                                                                        <label class="build-label">Test Script</label>
                                                                        <textarea class="form-control form-custom code" rows="4" id="test"></textarea>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div id="buildMetaAccordion">
                                                        <div class="card jobCard">
                                                            <div class="card-header" id="metaHeading" data-toggle="collapse" data-target="#metaCollapse" aria-expanded="true" aria-controls="metaCollapse">
                                                                <i class="fa fa- fa-list fa-fw"></i>Meta
                                                            </div>
                                                            <div id="metaCollapse" class="collapse cardBody" aria-labelledby="metaHeading" data-parent="#buildMetaAccordion">
                                                                <div class="card-body">

                                                                    <div class="row ">
                                                                        <div class="col ">
                                                                            <div class="form-group"><label class="build-label">Created Date: </label><input class="form-control form-custom" id="createdDate"></div>
                                                                            <div class="form-group"><label class="build-label">Created By: </label><input class="form-control form-custom" id="createdBy"></div>
                                                                        </div>
                                                                        <div class="col ">
                                                                            <div class="form-group"><label class="build-label">ID: </label><input class="form-control form-custom" id="idDisp"></div>
                                                                            <div class="form-group"><label class="build-label">Price: </label><input class="form-control form-custom" id="price"></div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="row "><div class="col-6 ">
                                                                            <div class="form-group">
                                                                                <label class="build-label">Component File Resources
                                                                                    <!--<a id='newCompFileButton' class='newFile' href='#'><i class="fa fa-plus fa-fw"></i></a>-->
                                                                                    <a id='delCompFileButton' class='delFile' href='#'><i class="fa fa-minus fa-fw"></i></a>
                                                                                </label>
                                                                                <div id = 'fileCompList' class = 'fileList'></div>
                                                                            </div>
                                                                        </div></div>
                                                                    <!--TESTING-->
                                                                    <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
                                                                    <div class="form-group">
                                                                        <label class="build-label">nodeData</label>
                                                                        <textarea type="disabled" class="form-control form-custom code" rows="25" id="nodeData"></textarea>
                                                                        <hr>
                                                                        <textarea type="disabled" class="form-control form-custom code" rows="25" id="buildCodeData"></textarea>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="" id="buildCodeRow">
                    <div class=" buildCodeRowListCol" >
                        
                        <div id="buildCodeSearchRow">
                            <input class = "form-control searchInput buildCodeSearchInput" id="buildCodeSearchInput" type="text">
                            <i id="buildCodeSearchIcon" class="search-icon fa fa-search  fa-fw"></i>
                        </div>
                        <div class="buildCodeListHeader"><i class="fa  fa-minus fa-fw" id="deleteBuildCodes"></i> <div class="buildCodeRowCount">n</div><div class="buildCodeRowName">Build Code Title</div><div class="buildCodeRowLastUpdated">Updated</div></div>
                        <div  id="buildCodes"></div> 
                    </div>

                        <div id="buildCodeDisplayCol" class="col" >

                        <div id="buildCodeDisplay" class="">
                            <div id="buildCodeDisplayTitle" class=""></div>
                            <div id="buildCodeDisplayTop" class="">
                                <span id="buildCodeDisplay-runLocVal" class=""></span>
                                <span id="buildCodeDisplay-rerunnableVal" class=""></span>
                                <span id="buildCodeDisplay-sysFuncVal" class=""></span>
                                <div id="usedIn" class="">
                                    <label>Used In: </label>
                                    <button class="dropdown-toggle dashSystemDropdownButton" type="button" id="usedInMatch" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <div id="usedInComponentLinks"></div><div id="usedInMatchNum"></div>
                                    </button>
                                    <div id="usedInMatchOverlay" class="dropdown-menu vidMenuMatchOverlay" aria-labelledby="usedInMatch">
                                        <div class="col matchLinkCol">
                                            <div id="usedInMatchLink_jstree_div"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <label class="build-label">Build Script</label><i class="fa fa-fw"></i>
                            <div class="">
                                <div id="buildCodeDisplay-script" class=" ace_editor ace_dark ace-twilight"></div>
                            </div>

                            <div id="buildCodeTemplates"></div>

                        </div>
                    </div>
                </div>

                <div id='bottomRow'  style="display: none" class="d-flex  nowrap   ">
                    <div id="rowHandle"></div>
                    <div id="resultsDiv" class="col-fixed-240 bottom-row" >
                        <div id="results-list" class="results-list" >
                            <div class='panel panel-default cust-panel'>
                                <div class='panel-heading cust-panel-heading'><i class='fa  fa-calendar fa-fw'></i>Build History</div>
                                <div class='panel-body'>
                                    <div id='results-group' class='list-group'></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="consoleDiv" class="bottom-row">
                        <div class='panel panel-default cust-panel'>
                            <div class='panel-heading cust-panel-heading'><i class='fa  fa-tv  fa-fw'></i>Console<i class='fa  fa-fw'></i><span id="messageSpan"></span>

                                <i class='fa fa-fw navbar-right'></i>
                                <a href="#"><i id="codes_btn_max" class='codes_btn_max fa fa-window-maximize fa-fw navbar-right'></i></a>
                                <a href="#"><i id="codes_btn_min" class='codes_btn_min fa fa-window-minimize fa-fw navbar-right'></i></a>
                                <a href="#"><i id="codes_btn" class='codes_btn fa  fa-hashtag fa-fw navbar-right'></i></a>
                                <i class='fa fa-fw navbar-right'></i>

                            </div>

                            <div class='panel-body term-panel-body'>
                                <div id="terminal-container" >
                                    <div id="results_html" contentEditable="false" class='scroller'></div>
                                    <div id="results_codes" class='scroller'></div>
                                    <!--<div id="console_connect" class='' contentEditable="true">jnkjn,kjn.kb.bhb,j</div>-->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>
</body>
<div id="DemoDoneModal" class="modal fade" role="dialog">
    <div class="modal-dialog serverUnavailable-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-trophy fa-fw"></i>ezStack Builder Tour</h4>
            </div>
            <div class="modal-body">

                <p>The guided tour is complete. Feel free to deploy other applications on your server and expore some of the features ezStack builder has to offer. If you have any questions or comments let us know back at <a href="https://ezStacksystems.com/message?completedTour" target="_new">ezStacksystems.com</a> in the <a href="https://ezStacksystems.com/contact?compleatdTour" target="_new">Contact page</a>.</p>
            </div>
            <div class="modal-footer">
                <button type="button" id="demoDoneBtn" class="btn btn-default jobFormbtn" data-dismiss="modal" autofocus>Ok</button>
            </div>
        </nav>
    </div>
</div>
<div id="serverUnavailableDemoModal" class="modal fade" role="dialog">
    <div class="modal-dialog serverUnavailable-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-server fa-fw"></i>ezStack Builder Demo Server</h4>
            </div>
            <div class="modal-body">
                <p>The ezStack builder server has stopped. Thank you for trying the demo. Click Ok to return to <a href="https://ezstack.systems?demo=done">ezStack.systems</a></p>
            </div>
            <div class="modal-footer">
                <button type="button" id="serverUnavailableBtn" class="btn btn-default jobFormbtn" data-dismiss="modal">Ok</button>
            </div>
        </nav>
    </div>
</div>
<div id="buildCodeForkModal" class="modal fade" role="dialog">
    <div class="modal-dialog buildCodeForkModal-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-code-fork fa-fw"></i>Fork Build Codes</h4>
            </div>
            <div class="modal-body">

                <p>Upon saving this component, the build code will be saved in a new build code record.</p>
                <p>Do you want to create a new Build Code record? </p>


            </div>
            <div class="modal-footer">
                <button type="button" id="buildCodeForkBtn" class="btn btn-default jobFormbtn" data-dismiss="modal">Ok</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>
<div id="buildCodePickModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i id="buildCodePickButton" class="fa fa-code fa-fw"></i>Build Codes</h4>
            </div>
            <div class="modal-body">


                <div class="form-group buildCodeFilterGroup">
                    <label >Filter:</label>
                    <div class="radio">
                        <label class="buildCodeFilter" data-ID="thisParent">
                            <input name="buildCodeFilter" class="buildCodeFilterRadio" id="buildCodeFilter-thisParent" value="thisParent" checked="true" type="radio">Same Parent
                        </label>
                    </div>
                    <div class="radio">
                        <label class="buildCodeFilter" data-ID="thisBranch">
                            <input name="buildCodeFilter" class="buildCodeFilterRadio" id="buildCodeFilter-thisBranch" value="thisBranch" type="radio">Same Rerunnable Ancestor
                        </label>
                    </div>
                    <div class="radio">
                        <label class="buildCodeFilter" data-ID="thisSys">
                            <input name="buildCodeFilter" class="buildCodeFilterRadio" id="buildCodeFilter-thisSys" value="thisSys" type="radio">This System
                        </label>
                    </div>
                    <div class="radio">
                        <label class="buildCodeFilter" data-ID="allSys">
                            <input name="buildCodeFilter" class="buildCodeFilterRadio" id="buildCodeFilter-allSys" value="allSys" type="radio">All Systems
                        </label>
                    </div>
                </div>
                <table class="table buildCodeTable">
                    <thead>
                    <tr class="d-flex">
                        <th class="col-2 varLabel center">Last Save</th>
                        <th class="col-6 varLabel">Name</th>
                        <th class="col-2 varLabel center">Rerunable</th>
                        <th class="col-2 varLabel center">Sys Func</th>
                    </tr>
                    </thead>
                    <tbody id="buildCodeList" class="buildCodeTbody"></tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" id="buildCodeSelectBtn" class="btn btn-default jobFormbtn" data-dismiss="modal">Select</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>
<div id="profileModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"> <%= username %> Profile</h4>
            </div>
            <div class="modal-body">
                <nav class="navbar ">
                    <ul class="nav navbar-nav">
                        <li>
                            Change Password:
                            <ul>
                                <li> <input type='password' class="form-control" placeholder="Enter new password" id="newPassword" ></li>

                                <li><input type='password' class="form-control" placeholder="Enter new password again" id="newPasswordAgain" ></li>
                                <div id="saveProfileResults"></div>
                            </ul>
                        </li>
                    </ul>
                </nav>
            </div>
            <div class="modal-footer">
                <button type="button" id="changeIdSaveButton" class="btn btn-default jobFormbtn">Save</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>
<div id="setupModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Settings</h4>
            </div>
            <div class="modal-body">
                <div>
                    No command prompt time out (ms):
                    <div class="form-group">
                        <input class="form-control form-custom-meta" placeholder="(ms)" id="timeout" style="width:75px"> <button id = "set_timeout" class="btn btn-default jobFormbtn jobSetFormbtn">Set</button> <span id="set_timeout_results"></span>
                    </div>
                    <hr>
                    No client time out (minutes):
                    <div class="form-group">
                        <input class="form-control form-custom-meta" placeholder="(ms)" id="noClientTimeout" style="width:75px"> <button id = "set_noClientTimeout" class="btn btn-default jobFormbtn jobSetFormbtn">Set</button> <span id="set_noClientTimeout_results"></span>
                    </div>
                    <hr>
                    User Name:
                    <div class="form-group">
                        <input class="form-control form-custom-meta" placeholder="Enter your preferred user name" id="username" style="width:250px"> <button id = "set_username" class="btn btn-default jobFormbtn jobSetFormbtn">Set</button> <span id="set_username_results"></span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Close</button>
            </div>
        </nav>
    </div>
</div>
<div id="runModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-wrench fa-fw"></i>Build</h4>
                <label id="buildModalTitleName"></label>
            </div>
            <div id='runConfirmationBody' class="modal-body run-model-body">
                <form class="form">
                    <input name="idToBeRun" id="idToBeRun" type="hidden" />
                    <input name="sysToBeRun" id="sysToBeRun" type="hidden" />
                    <input name="ClosestRerunnableAn" id="ClosestRerunnableAn" type="hidden" />

                    <div class="form-group" id="runClosestAnGroup">
                        <!--<label style="padding-left: 40px">-->
                        <span class="model-label"><input name="runClosestAn" id="runClosestAn" value="yes" type="checkbox" checked/>Run from closest rerunnable ancestor?</span>
                        <div id="closestAnWarning"></div>
                    </div>
                    <div class="form-group" id="runChildrenGroup">
                        <!--<label style="padding-left: 40px">-->
                        <span class="model-label"><input name="runChildrenCb" id="runChildrenCb" value="yes" type="checkbox" checked/>Run children?</span>
                        <!--</label>-->
                    </div>
                    <div class="form-group" id="runRerunnableChGroup">
                        <!--<label style="padding-left: 40px">-->
                        <span class="model-label"><input name="runRerunnableCh" id="runRerunnableCh" value="yes" type="checkbox"/>Run rerunnable children again?</span>
                    </div>
                    <div class="form-group">
                        <!--<label style="padding-left: 40px">-->
                        <span class="model-label">SSH Key Pair File (.pem): <a id='newKeyButton' class='newKey' href='#'><i class="fa  fa-folder-open fa-fw"></i></a></span>
                        <!--</label>-->
                        <div><span id = 'keyList' class = 'keyList'></span></div>
                        <input id="upload-key" type="file" name="key" multiple="single">
                    </div>
                    <div class="form-group">
                        <!--<label style="padding-left: 40px">-->
                        <span class="model-label"><input name="localStoreKeyCb" id="localStoreKeyCb" value="yes" type="checkbox"/>Store key in browser?</span>
                        <!--</label>-->
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" id="runConfirmButton" class="btn btn-default jobFormbtn">Build</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>
<div id="copyModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-code-fork fa-fw"></i>Copy</h4>
            </div>
            <div id='copyConfirmationBody' class="modal-body">
                <div id="copyInfoText" class="text-info"></div>
                <form  class="form" id="copyModalForm">
                    <div class="form-group">
                        <div class="radio">
                            <label class="build-label"><input name="copyChildrenCb" id="copyChildrenCb" value="yes" type="checkbox"/>Copy all children?</label>
                        </div>
                    </div>
                </form>
                <br/>

                <input type="hidden" id="copyModal_listOfIds">
                <input type="hidden" id="copyModal_newParent">
                <input type="hidden" id="copyModal_newPosition">
                <input type="hidden" id="copyModal_lib">
            </div>
            <div class="modal-footer">
                <button type="button" id="copyConfirmButton" class="btn btn-default jobFormbtn">Copy</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>
<div id="copyToLibModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-code-fork fa-fw"></i>Copy To Library</h4>
            </div>
            <div id='copyToLibConfirmationBody' class="modal-body">
                <div id="copyToLibInfoText" class="text-info"></div>
                <form  class="form" id="copyToLibModalForm">
                    <div class="form-group">
                        <div class="radio">
                            <label class="build-label"><input name="copyToLibChildrenCb" id="copyToLibChildrenCb" value="yes" type="checkbox"/>Copy all children?</label>
                        </div>
                    </div>
                </form>
                <br/>

                <input type="hidden" id="copyToLibModal_listOfIds"><input type="hidden" id="copyToLibModal_newParent">
            </div><div class="modal-footer">
                <button type="button" id="copyToLibConfirmButton" class="btn btn-default jobFormbtn">Copy</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>

    </div>
</div>
<div id="delModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-del-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-minus-square-o fa-fw"></i>Remove</h4>
            </div>

            <div id='delConfirmationBody' class="modal-body">
                Are you sure you want to remove this component and all children?
            </div>
            <div class="modal-footer">
                <button type="button" id="delConfirmButton" class="btn btn-default jobFormbtn" >Remove</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>
<div id="clearModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-clear-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-history fa-fw"></i>Clear Build History</h4>
            </div>
            <div id='clearConfirmationBody' class="modal-body">
                Are you sure you want to clear all build history for this system?
            </div>
            <div class="modal-footer">
                <button type="button" id="clearConfirmButton" class="btn btn-default jobFormbtn" >Clear</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>
<div id="varModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-var">

        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-link fa-fw"></i>
                    Insert Variable
                </h4>
            </div>
            <form class="form-inline">
                <div class="form-group insertScopeGroup">
                    <label style="padding-left: 15px;padding-top: 0px;padding-bottom: 0px;">From:</label>
                    <div class="radio">
                        <label class="build-label">
                            <input name="insertScope" id="insertScope0" value="Component" checked="" type="radio">Component
                        </label>
                    </div>
                    <div class="radio">
                        <label class="build-label">
                            <input name="insertScope" id="insertScope1" value="Parent" type="radio">Parent
                        </label>
                    </div>
                    <div class="radio">
                        <label class="build-label">
                            <input name="insertScope" id="insertScope2" value="Ancestors" type="radio">Ancestors
                        </label>
                    </div>
                    <div class="radio">
                        <label class="build-label">
                            <input name="insertScope" id="insertScope3" value="Same System" type="radio">Same System
                        </label>
                    </div>
                </div>
                <!--form-group-->
            </form>
            <div id='insertVarBody' class="modal-body">

            </div>
            <div class="modal-footer">
                <button type="button" id="insertVarButton" class="btn btn-default jobFormbtn">Insert</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>

</div>
<div id="buildHelpModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title">Build Script</h1>
            </div>
            <div id='buildHelpBody' class="modal-body buildHelpBody">
                <p>The build script is created and maintained by a developer and is the set of build instructions that are sent to the system server once an SSH connection is made. Builder assumes the initial CLI is bash.</p>
                <p>One line is sent to the server at a time and the response is recorded until the prompt is detected or a timeout is exceeded. The remote system's prompt is set to a default value when the session starts. The prompt can be set by the developer to accommodate other CLIs.</p>

                <p>Each line returned is stored in a response file (Build History) that may be read by future sessions.</p>

                <h3 class="modal-title">Directives</h3>

                <p>The build script may contain optional directives for the /builder application that can help the developer control the session and deploy assets. The list of directives recognized by builder are as follows:</p>
                <ul>
                    <li><b>noWait:</b></li>
                    Usage noWait:<br/>
                    Will instruct builder to not wait for the prompt after the current command. The command on the next line will be sent to the remote host immediately.<br/>
                    Eg: noWait:ls -l

                    <li><b>^c:</b></li>
                    Usage: ^c:<br/>
                    Sends control-c to the remote host.<br/>
                    Eg. ^c:

                    <li><b>setPrompt:</b></li>
                    Usage: setPrompt:prompt_string<br/>
                    Tells builder what the expected prompt is. This is useful when a function or new CLI changes the user prompt. <br/>
                    Eg: setPrompt:[newPrompt] will set the expected prompt to '[newPrompt]'.

                    <li><b>setPromptCodes:</b></li>
                    Usage: setPromptCodes:asc_code1 asc_code2 ...<br/>
                    Tells builder what the expected prompt is. Separate 2 digit hex ascii codes with a single space. This is the same as setPrompt but the prompt is defined as ascii hex codes. <br/>
                    Eg: setPromptCodes:3e 20 will set the expected prompt to '> '.

                    <li><b>saveVar:</b></li>
                    Usage: saveVar:component_var_name:remote_file_path<br/>
                    Will launch an asynchronous process that will save the specified component variable value to a path and file name on the remote host.<br/>
                    Eg: saveVar:foo:/tmp/bar.txt will save the value of component variable foo to /tmp/bar.txt. The variable must exist in the current component or a fatal error will occur.

                    <li><b>saveTemplate:</b></li>
                    Usage: saveTemplate:remote_file_path<br/>
                    Will launch an asynchronous process that will save the string contents of the template field to a file on the remote host.<br/>
                    Eg: saveTemplate:/tmp/temp.txt will save the template field string to /tmp/temp.txt.

                    <li><b>saveTemplate:x:</b></li>
                    Usage: saveTemplate:template_num:remote_file_path<br/>
                    Same as SaveTemplate: except that a specific template field is saved other then the first. Valid values for template_num are 2-99.<br/>
                    Eg: saveTemplate:2:/tmp/temp.txt will save template 2 field string to /tmp/temp.txt.

                    <li><b>saveFile:</b></li>
                    Usage: saveFile:resource_file_name:remote_file_path<br/>
                    Will launch an asynchronous process that will save the specified file resource to a path on the remote host.<br/>
                    Eg: saveFile:myResource.gif:/tmp/ will save myResource.gif to /tmp/. The file must exist as a file resource attached to the component or a fatal error will occur.

                    <li><b>snap:</b></li>
                    Usage: snap:url<br/>
                    Instructs builder to launch an asynchronous process that will navigate to a url and take a snapshot, then save image as a component file resource called screenshot.png.<br/>
                    Eg: snap:http://google.com

                    <li><b>setTimeout:</b></li>
                    Usage: setTimeout:number-ms<br/>
                    Instructs builder to set the 'no prompt' timeout to a value other then what is defined in the user setup.
                    Eg: setTimeout:120000   will change the time out to 120000 ms (2 minutes)

                    <li><b>abort:</b></li>
                    Usage: abort:<br/>
                    Causes builder to stop processing the current build script and to terminate the SSH session.<br/>
                    Eg: abort:
                </ul>

                <h3 class="modal-title">Variables</h3>
                <p>Information can be shared by components in the same system by defining variables. When a component is build it can define name-value pairs that other components can use.
                    If any line in the results of a build script (what the remote system has returned) begins with 'var:', the line is interpreted by builder as a variable.
                    The value of this variable can be inserted into build scripts that execute in the future. When editing a component click the [Insert Variable] button to browse the list of previously defined variables. Select scope and choose variable then insert by clicking 'insert'.
                    <br/><br/>
                    The examples below are specific to a Linux CLI. <br/><br/>
                    Eg 1: echo var:myVar:1<br/>
                    This will instruct the remote Linux host to return 'var:myVar:1'. The variable 'myVar' will be defined for the component and its value will be '1'.<br/>
                    Eg 2: echo var:nowDate:$(date)<br/>
                    This will instruct the remote Linux host to return 'var:nowDate:Fri Jan 26 15:45:21 EST 2018' or what ever the current date is.
                    The variable 'nowDate' will be defined for the component and its value will be the date string.
                    <br/><br/>
                    Using variables that have been previously defined in the same system is accomplished by inserting a variable reference (tag). A variable reference has the following syntax:<br/>
                    &lt;%scope.variable-name%&gt;<br>
                    Builder will search for the variable name defined in all results that fit within the scope and replace the tag before line is sent to the server.<br/>
                    The scope can be as follows:<br/>
                    c - the current component (defined in Component Variables not as a var:)<br/>
                    p - the parent component<br/>
                    a - all direct ancestor components (parent, gr-parent, g-gr-parent, etc)<br/>
                    s - all components in the current system plus any system variable defined in the same system<br/><br/>
                    For example when builder process detects &lt;%p.staticDirectory%&gt; in a script it will cause builder to replace it with the value of the 'staticDirectory' variable in the parent component.<br/><br/>
                    Note: <br/>
                    - A variable named 'systemVar' is a special variable in a component that is flagged as a system function. If a variable named 'systemVar' is detected when builder is processing a script line, the value will be inserted into the variables section in the corresponding system.<br/>
                    - If the variable name is not found in the specified scope an error is raised and the SSH session is aborted.

                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Close</button>
            </div>
        </nav>
    </div>

</div>
<div id="varHelpModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-varHelp">

        <nav class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title">Component Variables</h1>
            </div>
            <div id='varHelpBody' class="modal-body varHelpBody" >
                <p>Component variables are used to provide configurability to each component. A build script developer can insert a component variable into the build script that can be adjusted without changing the build code.</p>
                <p>In edit mode click the + button to add a new variable. Provide a name and a text value. Setting privacy to yes will prevent the value from being seen on the builder screen and will prevent the value from being copied when components are copied.  <br></p>
                <p>Replace any hardcoded value in the build script with &lt;%c.variable-name%&gt;<br>
                    When the build script is executed the &lt;%c.variable-name%&gt; tag will be replaced with the text in the component variable list. If the matching variable is not found in the component variable list a fatal error will occur.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Close</button>
            </div>
        </nav>
    </div>

</div>
<div id="welcomeModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-welcome">

        <nav class="modal-content welcome-modal-content">
            <div id='welcomeBody' class="modal-body welcome-modal-body">
                <br/>
                <h2>Welcome to ezStack Builder</h2>
                <hr class="welcome-hr">
                <p>ezStack Builder can connect to any Linux server to build and configure it for you.
                    In ezStack Builder a 'system' represents the infrastructure of your web server. A 'component' record is arranged on a tree and is the user's implementation of a seperate 'build code' record. The build code record holds the code and resources and are shared by the components.
                    If you provide a system with a host or ip address it can connect and configure the server as specified by the components and how they are arranged.
                    As a non-technical high level user you can modify a web server's look and functionality by changing variables and rearranging components.
                    Components can be copied, moved or disabled. You can change component variable values to change how your server behaves after the next build.
                    If you want to get technical all of the under laying code for a component is modifiable via shared 'Build Code' records that are attached to each component. In edit mode resource files can be uploaded and attched to a build code record for deploment by the build script.
                </p>
                <p>Click the
                    <a id="welcome-nav-Icon" class="welcome-nav" href="#">ezStack icon</a>
                    in the upper left to open this window again.</p>

                <h3>Screen Selection</h3>
                <h6>
                    <a id="welcome-nav-Dash" class="welcome-nav" href="#">Dashboard</a>
                </h6>
                <p>The Dashboard provides a high level view of your 'promoted' components and the ability to make quick changes. You can enable/disable components or change their properties.  </p>
                <h6>
                    <a id="welcome-nav-Comp" class="welcome-nav" href="#">Components</a>
                </h6>
                <p>The Components screen allows you to dive deeper into the code by providing a tree view of all components that are installed. You can change properties and edit/author components and build code.</p>

                <h3>Integrated Chrome Browser</h3>
                <p>ezStack Builder provides a live instance of headless-chrome to aid in building your web sites. You can interact with this instance in the
                    <a id="welcome-nav-Brow" class="welcome-nav" href="#">browser window</a>.
                    Headless-chrome gives you a live view of your apps being built. You can scroll and click the browser window like a real browser.
                    You can also find components by clicking on the displayed web page elements.
                    When browsing components, elements will be highlighted when a component, that created it, is selected.</p>

                <h3>First Steps</h3>
                <p>If you are new to ezStack Builder you can learn how it works by Building a few apps and making a few changes. ezStack Builder comes with
                    <a id="welcome-nav-Syst" class="welcome-nav" href="#">two predefined system records.</a>.
                    The Builder server itself is the first system. This allows you to build components to Builder to increase its own capabilities. Its ip (host) points to localhost (its self).
                    Second is the 'Demo' system that contains components to build sample applications. The systems included in ezStack builder are intended to represent Red Hat Enterprise Linux/CentOS environments.</p>
                <ol>
                    <li>Most components can not be built if the system they are attached to does not have a host or ip address specified.
                        Enter a host name or ip address in the 'host' variable in the system. If you have an AWS account you can also build the included AWS specific components to spawn and manage AWS instances. </li>
                    <li>Select the "Prime" component and build it for each system new system including the "ezStack Builder" system. The Prime component installs some utilities to aid in building.
                        This only needs to be run once per server.</li>
                    <li>Once primed you can start building. Any change made to a component record or build code record will not be reflected on a web server until the next build.</li>
                </ol>


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Close</button>
            </div>
        </nav>
    </div>

</div>
<div id="demoWelcomeModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-welcome">

        <nav class="modal-content welcome-modal-content">
            <div id='demoWelcomeBody' class="modal-body welcome-modal-body">
                <br/>
                <h2>Welcome to ezStack Builder Demo</h2>
                <hr class="welcome-hr">
                <p>
                    In this 5 minute guided tour you will build a web software stack and deploy some applications. This ezStack Builder server will end in 15 minutes.
                </p>
                <p>
                    For demonstration purposes authentication is not required and the target server is the same as this ezStack Builder demo server (localhost).
                </p>
                <p>
                    You can click the ezStack icon in the upper left corner to restart the tour.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal" autofocus>Start Tour</button>
            </div>
        </nav>
    </div>

</div>
<div id="varEditWYSIWYGModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-VarEdit">

        <nav class="modal-content varEditWYSIWYGModal-modal-content">
            <div id='WYSIWYGBody' class="modal-body varEditWYSIWYGModal-modal-body">
                <input id="varEditWYSIWYGModalCurrentIdn" type="hidden">
                <input id="varEditWYSIWYGModalCurrentScreen" type="hidden">
                <br/>
                <textarea id="varValWYSIWYGEditor" name="content"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Close</button>
            </div>
        </nav>
    </div>

</div>
<div id="varEditModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-VarEdit">

        <nav class="modal-content varEditModal-modal-content">
            <div id='varEditBody' class="modal-body varEditModal-modal-body">
                <input id="varEditModalCurrentIdn" type="hidden">
                <input id="varEditModalCurrentScreen" type="hidden">
                <br/>
                <textarea id="varValEditor" class="varValEditorTextArea" name="content"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Close</button>
            </div>
        </nav>
    </div>

</div>
<div id="videoModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-VarEdit">

        <nav class="modal-content videoModal-modal-content">
            <div id='videoBody' class="modal-body videoModal-modal-body">
                <div class="row" id="videoScreen">

                    <div class="col videoCol">

                        <input id="launchLinkHiddenCopy"><div id="launchLink" class="videoMenuItemLeft"></div><div id="launchLinkCopyContainer"></div>
                        <div class="videoMenu">

                            <span>
                                <a id='playButton' href='#'><i class='fa fa-play fa-fw videoMenuItemRight'></i></a>
                                <a id='pauseButton' href='#'><i class='fa fa-pause fa-fw videoMenuItemRight'></i></a>
                            </span>
                            <a id='snapButton' href='#'><i class='fa fa-camera fa-fw videoMenuItemRight'></i></a>
                            <a id='videoRefreshLink' href='#'><i class='fa fa-refresh fa-fw videoMenuItemRight'></i></a>
                            <a id='inspectLink' href='#'><i class='fa fa-stethoscope fa-fw videoMenuItemRight'></i></a>
                            <a id='inspectMaximizeLink' href='#' class='launchLink'><i class='fa fa-expand fa-fw videoMenuItemRight'></i></a>

                        </div>
                        <div><canvas id="videoCanvas"></canvas></div>
                        <div id="vidMenuDesc"></div>
                        <button class="dropdown-toggle dashSystemDropdownButton" type="button" id="vidMenuMatch" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <div id="componentLinks"></div><div id="vidMenuMatchNum"></div>
                        </button>
                        <div id="vidMenuMatchOverlay" class="dropdown-menu vidMenuMatchOverlay" aria-labelledby="vidMenuMatch">
                            <div class="col matchLinkCol">
                                <div id="matchLink_jstree_div"></div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Close</button>
            </div>
        </nav>
    </div>

</div>
</html>
