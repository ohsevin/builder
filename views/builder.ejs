<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>/builder</title>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"></script>
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jstree/3.3.3/jstree.min.js"></script>
    <script src="https://pagecdn.io/lib/ace/1.4.6/ace.js" integrity="sha256-CVkji/u32aj2TeC+D13f7scFSIfphw2pmu4LaKWMSY8=" crossorigin="anonymous"></script>
    <script src='/tinymce/js/tinymce/tinymce.min.js' referrerpolicy="origin"></script>

    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="/theme/startbootstrap-sb-admin-2-gh-pages/dist/css/sb-admin-2.min.css">
    <link href="//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

    <!--Quill-->
    <script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>
    <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">

    <!-- theme  -->
    <link rel="stylesheet" href="/jstree/dist/themes/default/style.min.css" />

    <script src="/clientJs/custom.js"></script>
    <link rel="stylesheet" href="/clientCSS/custom.css" />

    <script src="ansi_up/ansi_up.js" type="text/javascript"></script>

     <!-- <link rel="stylesheet" href="/jstree/dist/themes/proton/style.min.css" /> -->

    <!-- doc.ready() -->
    <script type = "text/javascript" language = "javascript" >

        var pickedLib = '#';
        var lastStyleSheet;
        $(document).ready(function() {


            $('#jobForm').on('submit', function(e){ e.preventDefault()});
            $('#sysForm').on('submit', function(e){ e.preventDefault()});

            //create main tree
            $("#jstree_div").jstree({
                "core" : {
                    "themes": {
                        "name": "default",
                        "dots": true,
                        "icons": true
                    },
                    "data" : {
                        'url' : function (node) {
                                var searchText = $("#searchInput").val();
                                return node.id === '#' ?
                                    'jobsTree?searchSt='+searchText :
                                    'jobsTree';
                            },
                        'data' : function (node) {return { 'id' : node.id };}
                    },
                    'check_callback': function(operation, node, node_parent, node_position, more) {
                        if (operation === "copy_node") {

                            const targetNodeId = $(".jstree-hovered")[0].id;
                            const targetNode =  $('#jstree_div').jstree(true).get_node(targetNodeId);
                            if(targetNode.id === "#") {
                                return false;
                            }else{
                                $('#copyModal_listOfIds').val(node.original.id);

                                var fromTree;
                                if(node.parents[node.parents.length - 2] === 'lib'){
                                    fromTree = $('#jslibtree_div');
                                    $('#copyModal_lib').val(pickedLib)
                                }else{
                                    fromTree = $('#jstree_div');
                                    $('#copyModal_lib').val('local')
                                }
                                const treeNode = fromTree.jstree(true).get_node(node.original.id);

                                var childs = treeNode.children_d;
                                var listOfIds = [node.original.id];
                                $("#copyInfoText").html("<b>"+node.original.text + "</b> will be copied to <b>" + targetNode.text+"</b>");

                                if (childs.length > 0 ){
                                    listOfIds += ';' + childs.join(';');
                                    $('#copyModal_listOfIds').val(listOfIds);
                                    $('#copyModalForm').show()
                                }else{
                                    $('#copyModalForm').hide()
                                }

                                if(targetNode.id === "local"){
                                    $('#copyModal_newParent').val('#')
                                }else{
                                    $('#copyModal_newParent').val(targetNode.id );  //targetId
                                }



                                $('#copyModal').modal('show');
                                $('#copyChildrenCb').prop('checked', false);

                                return false;
                            }
                        }
                        return true;  //allow all other operations
                    }
                },
                "types" : {
                    "system" : {
                        "icon" : "fa fa-desktop ",
                        "a_attr": { class : " systemRow "}
                    },
                    "job" : {
                        "icon" : "fa fa-code jobRow"
                    },
                    "needfull" : {
                        "icon" : "fa fa-play-circle-o",
                        "a_attr": { class : " needfull "},
                        "li_attr": { class : " needfull "}
                    },
                    "rerunnable" : {
                        "icon" : "fa fa-repeat rerunnableRow",
                        "a_attr": { class : " rerunnableRow "}
                    },
                    "dashboard" : {
                        "icon" : "fa fa-server"
                    },
                    "disabled" : {
                        "icon" : "fa fa-hand-paper-o disabledRow",
                        "li_attr": { class : "  "},
                        "li_attr": { class : "  "}
                    }
                },
                "sort" : function(a, b) {
                    a1 = this.get_node(a);
                    b1 = this.get_node(b);
                    return (a1.original.sort < b1.original.sort) ? -1 : 1;

                },
                "state": { "key": "myTree" },
                "dnd": {
                    check_while_dragging: false,
                    always_copy:true,
                    large_drop_target:true
                },
                "plugins" : [ "sort",  "state", "types", "dnd", "wholerow"]
            }).on(  'create_node.jstree', function(e, data) {
                //console.log('saved');
            }  );

            //Create Lib Tree
            $("#jslibtree_div").jstree({
                "core" : {
                    "themes": {
                        "name": "default",
                        "dots": true,
                        "icons": true
                    },
                    "data" : {
                        'url' : function (node) {return 'getLib';},
                        'data' : function (node) {return { 'id' : node.id, 'pickedLib' : pickedLib };}
                    },
                    'check_callback': function(operation, node, node_parent, node_position, more) {
                        if (operation === "copy_node") {

                            const targetNodeId = $(".jstree-hovered")[0].id;
                            const targetNode =  $('#jslibtree_div').jstree(true).get_node(targetNodeId);
                            if(  targetNode.id === "#"){
                                return false;
                            }else{

                                var treeNode = $('#jstree_div').jstree(true).get_node(node.original.id);
                                if(!treeNode || node.original.comType !== "system"){
                                    alert("Only systems from the working tree can be copied into libraries at this time");
                                }else{
                                    $('#copyTiLibModal_listOfIds').val(node.original.id);

                                    var childs = treeNode.children_d;
                                    var listOfIds = [node.original.id];
                                    $("#copyToLibInfoText").html("<b>"+node.original.text + "</b> will be copied to <b>" + targetNode.text+"</b>");

                                    listOfIds += ';' + childs.join(';');

                                    $('#copyToLibModal_listOfIds').val(listOfIds);


                                    $('#copyToLibModalForm').show()

                                    $('#copyToLibModal_newParent').val(targetNode.id );  //targetId

                                    $('#copyToLibModal').modal('show');
                                    $('#copyToLibChildrenCb').prop('checked', false);
                                }
                                return false;
                            }
                        }
                        return true;  //allow all other operations
                    }
                },
                "types" : {
                    "system" : {
                        "icon" : "fa fa-desktop ",
                        "a_attr": { class : " systemRow "}
                    },
                    "job" : {
                        "icon" : "fa fa-code"
                    },
                    "rerunnable" : {
                        "icon" : "fa fa-repeat rerunnableRow",
                        "a_attr": { class : " rerunnableRow "}
                    },
                    "disabled" : {
                        "icon" : "fa fa-hand-paper-o disabledRow",
                        "li_attr": { class : "  "}
                    }
                },
                "sort" : function(a, b) {
                    a1 = this.get_node(a);
                    b1 = this.get_node(b);
                    return (a1.original.sort < b1.original.sort) ? -1 : 1;
                },
//              "state": { "key": "myLibTree" },
                "dnd": {
                    check_while_dragging: false,
                    always_copy:true,
                    large_drop_target:true
                },
                "plugins" : [ "sort",  "state", "types", "dnd", "wholerow"]
            }).on(  'create_node.jstree', function(e, data) {
                //console.log('saved');
            }  );

            //Lib Tree Collapse
            $("#treeCollapse").on("click",function(){
                setLibWindowWidth(20, container);
            });

            $("#copyConfirmButton").on("click",function() {
                var mydata = {};
                mydata.ids = $('#copyModal_listOfIds').val();
                mydata.parent = $('#copyModal_newParent').val();
                mydata.lib = $('#copyModal_lib').val();

                if(!$('#copyChildrenCb').is(':checked')){
                    if(mydata.ids.split(';').length > 1){
                        mydata.ids = mydata.ids.split(';')[0]
                    }
                }

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/copy',
                    data: JSON.stringify(mydata)
                }).done(function (e) {
                    //console.log('copy refresh' );
                    $('#jstree_div').jstree(true).refresh();
                }).fail(function (e) {
                    console.log('copy failed' );
                    console.log(e );
                    $('#jstree_div').jstree(true).refresh();
                });
                $('#copyModal').modal('toggle');
            });

            $("#copyToLibConfirmButton").on("click",function() {
                var mydata = {};
                mydata.ids = $('#copyToLibModal_listOfIds').val();
                mydata.parent = $('#copyToLibModal_newParent').val();
                mydata.lib = pickedLib;

                if(!$('#copyToLibChildrenCb').is(':checked')){
                    if(mydata.ids.split(';').length > 1){
                        mydata.ids = mydata.ids.split(';')[0]
                    }
                }

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/copyToLib',
                    data: JSON.stringify(mydata)
                }).done(function (e) {
                    //console.log('copy refresh' );
                    $('#jslibtree_div').jstree(true).refresh();
                    $('#copyToLibModal').modal('toggle');
                }).fail(function (e) {
                    console.log('copy to lib failed' );
                    console.log(e );
                    $('#jstree_div').jstree(true).refresh();
                });

            });

            //geLibJobByID
            function getLibJobByID(NodeID, lib){
                //const viewmode = "read"
                clearJobFields();
                $.get('/getLib', { id: NodeID, 'pickedLib':lib }, function(data) {
                    // testing vvvvvvvvvvvvvvvvvvv
                    var dispData = JSON.parse(JSON.stringify(data[0]) )  ;
                    delete dispData.script;
                    //delete dispData.custTemplates;
                    //delete dispData.template;

                    $("#nodeData").val(JSON.stringify(dispData).split(',"').join(',\n"')  );
                    // testing ^^^^^^^^^^^^^^^^^^^

                    $("#id").val(data[0].id);
                    $("#comType").val(data[0].comType);
                    $("#idDisp").val(data[0].id);
                    $("#parent").val(data[0].parent);
                    $("#name").val(data[0].name);

                    if(data[0].enabled === 1){
                        $('#componentEnabled').prop('checked', true);
                        $('#componentEnabledVal').html('Yes');
                    }else{
                        $('#componentEnabled').prop('checked', false);
                        $('#componentEnabledVal').html('No');
                    }

                    if(data[0].promoted === 1){
                        $('#promoted').prop('checked', true);
                        $('#promotedVal').html('Yes');
                    }else{
                        $('#promoted').prop('checked', false);
                        $('#promotedVal').html('No');
                    }

                    if(data[0].rerunnable === 1){
                        $('#rerunnable').prop('checked', true);
                        $('#rerunnableVal').html('Yes');
                    }else{
                        $('#rerunnable').prop('checked', false);
                        $('#rerunnableVal').html('No');
                    }

                    if(data[0].systemFunction === 1){
                        $('#sysFunc').prop('checked', true);
                        $('#sysFuncVal').html('Yes');
                    }else{
                        $('#sysFunc').prop('checked', false);
                        $('#sysFuncVal').html('No');
                    }

                    if(data[0].runLocal === 1){
                        $('#runLoc').prop('checked', true);
                        $('#runLocVal').html('Yes');
                    }else{
                        $('#runLoc').prop('checked', false);
                        $('#runLocVal').html('No');
                    }

                    if(data[0].description.hasOwnProperty("ops")){
                        description.setContents(data[0].description.ops)
                    }else{
                        description.setContents(
                            [{ insert:  data[0].description },
                                { insert: '\n' }]
                        );
                    };

                    scriptEditor.session.setValue(data[0].script);

                    $("#compVariables").val(data[0].variables);
                    $("#version").text(data[0].ver);
                    $("#templateType").val(data[0].templateType);
                    $("#text").val(data[0].text);
                    $('#resourceFiles').val(data[0].resourceFiles);
                    $("#ft").val(data[0].ft);

                    if(data[0].hasOwnProperty("hist")){
                        $("#createdBy").val(data[0].hist[0].username);
                        $("#createdDate").val(data[0].hist[0].ds)
                    }

                    populateLibFileList( $('#resourceFiles').val());

                    var timestamp = new Date().getTime();
                    $.get("/library/" + pickedLib + '/uploads/' +  $("#id").val() + "/screenshot.png?" + timestamp, '', function(data) {

                        if (data === ''){
                            $('#screenShotImageHolder').hide();
                            $('#screenShotImage')[0].src='';
                            $("#firstRow").css('width:50%;');
                            $("#topLeftForm").attr('class', 'col-lg-12');

                        }else{
                            $('#screenShotImageHolder').show();
                            $('#screenShotImage')[0].src= "/library/" + pickedLib + '/uploads/' +  $("#id").val() + '/screenshot.png?' + timestamp;
                            $("#firstRow").css('width:100%;');
                            $("#topLeftForm").attr('class', 'col-lg-6');
                        }
                    });

                    //load templates
                    var x=0;
                    var tempObjArr = data[0].templates.tempArr;

                    tempObjArr.forEach(function(tempObj){

                        if(!currentTemplatesArr[x]){
                            var inHtml = authorTemplateHTML(x);

                            $('#custTemplates').append(inHtml);

                            currentTemplatesArr.push(ace.edit("template"+x.toString()));

                            currentTemplatesArr[currentTemplatesArr.length-1].session.setMode("ace/mode/text");
                            document.getElementById("template"+x.toString()).style.fontSize='14px';

                            currentTemplatesArr[currentTemplatesArr.length-1].renderer.$cursorLayer.element.style.display = "none"

                            loadjobTempTypeDropdown(x)

                            $("#templateWindowMax"+x.toString()).click( function(){
                                var inx = parseInt($(this).attr('data-inx'), 10);
                                setTempAceHeight(inx, "max")
                            })
                            $("#templateWindowMin"+x.toString()).click( function(){
                                var inx = parseInt($(this).attr('data-inx'), 10);
                                setTempAceHeight(inx, "min")
                            })
                        }else{
                            $("#templateBlock" + x.toString()).show();
                        }

                        currentTemplatesArr[x].session.setValue(tempObj.c);

                        x++;
                    });

                    while (x < currentTemplatesArr.length ){
                        $("#templateBlock" + x.toString()).hide();
                        currentTemplatesArr[x].session.setValue("");
                        x++;
                    }

                    x=0;
                    tempObjArr.forEach(function(tempObj){
                        var tempType =  tempObj.t === "" ? "text" :  tempObj.t;
                        currentTemplatesArr[x].session.setMode("ace/mode/" + tempType);
                        $("#templateType" + x.toString()).val(tempType);
                        $("#dropdownTemplateTypeButton"+x.toString())[0].innerHTML = tempType;
                        x++;
                    })

                    setAceStyle(currentStyleName);
                    $(".ace_editor").addClass("aceDisabled");

                    for(var inx in currentTemplatesArr){
                        currentTemplatesArr[inx].renderer.$cursorLayer.element.style.display = "none";
                        currentTemplatesArr[inx].setReadOnly(true);
                    }

//                    if(viewmode === "read"){
//                        readModeJob();
//                    }else if(viewmode === "edit"){
                        readModeJob();
//                    }
                })
            }

            //Library pick
            $("#LibDropDownPick").on('click', function(){
                libDropDown();
            });
            $("#LibDropDownPickIcon").on('click', function(){
                libDropDown();
            });
            function libDropDown(){
                if (!$("#libDropDown").hasClass( "open" )) {

                    $('#LibDropDownList').show();
                    var mydata = {};

                    $.ajax({
                        type: 'get',
                        data: mydata,
                        dataType: "text",
                        headers: {
                            "content-type": "application/json"
                        },
                        url: '/libraryList',
                        success: function (data) {
                            const dataObj = JSON.parse(data);
                            const priArr = dataObj.pri;
                            const pubArr = dataObj.pub;

                            const LibDropDownListDiv = $("#LibDropDownList")[0];
                            var libListHTML = '<button type="button" class="close" id="closeLibListHTML">×</button><br>';
                            priArr.forEach(function (dir) {
                                libListHTML += '<a class="dropdown-item libListRow" data-id="private/' + dir + '" href="#">private/' + dir + '</a>';
                            })
                            pubArr.forEach(function (dir) {
                                libListHTML += '<a class="dropdown-item libListRow" data-id="public/' + dir + '" href="#">public/' + dir + '</a>';
                            })
                            LibDropDownListDiv.innerHTML = libListHTML

                            //Add click events to new row
                            $('.libListRow').on('click', function(){
                                var pickedDir = $(this).attr('data-ID');
                                pickedLib = pickedDir;
                                $('#LibDropDownList').hide();
                                $('#jslibtree_div').jstree(true).refresh();


                                setLibWindowWidth(250, container)

                            });

                            $('#closeLibListHTML').on('click', function(){
                                $('#LibDropDownList').hide();
                            });

                        },
                        error: function (error) {
                            console.log(error)
                        }
                    })
                }else{
                    $('#LibDropDownList').hide();
                }
            }

            //Lib tree click
            $('#jslibtree_div').on("select_node.jstree", function (e, data) {
                $("#rightCol").show();
                //activaTab('Component_Details');
                $('#componentTabs').hide();
                $("#introCol").hide();
                $("#screenShotCol").hide();

                selectedNode = data.selected[0];
                selectedTree = 'lib'

                if (selectedNode ==='lib'){
                    $("#sysScreen").hide();
                    $("#jobScreen").hide();
                }else {
                    clearJobFields();
                    if (data.instance.get_node(data.node.id).type === "job"
                        || data.instance.get_node(data.node.id).type === "disabled"
                        || data.instance.get_node(data.node.id).type === "needfull"
                        || data.instance.get_node(data.node.id).type === "rerunnable") {
                        getLibJobByID(selectedNode, pickedLib);
                        readModeLibJob();
                        $('#jstree_div').jstree("deselect_all");


                        $("#sysScreen").hide();
                        $("#jobScreen").show();
                        $("#comType").val('Job');
                        hideBottom()
                    }
                    else if (data.instance.get_node(data.node.id).type === "system") {
                        readModeLibSys();
                        $('#jstree_div').jstree("deselect_all");
                        $("#sysScreen").show();
                        $("#jobScreen").hide();
                        $("#comType").val('system');
                        getLibSysByID(selectedNode, pickedLib);
                        hideBottom()
                    }
                    else { //Type = Lib
                        $('#jstree_div').jstree("deselect_all");
                        hideBottom()
                    }
                }
                $("#results_html").html('');
                $("#results_codes").html('');
                $('#messageSpan').html('');

                var inputFields = $("#job-form-panel").find('textarea');
                inputFields.each(setWidth);
                function setWidth(index, element) {
                    $(element).width = '100%';
                    $(element).css('width','100%');
                    $(element).css('margin-right',0);
                }
            });

            //$('#jstree_div').on("copy_node.jstree", function (e, data) {});  //not used

            //tree ready
            $("#jstree_div").bind('ready.jstree', function(e, data) {

                //Add events for shift click expand/close
                $("#jstree_div").on("open_node.jstree", function (e, data) {
                    var evt = window.event || e  //good ol firefox
                    const shiftKey = evt.shiftKey || false;
                    if(shiftKey){
                        $("#jstree_div").jstree("open_all", data.node);
                    }
                });
                $("#jstree_div").on("close_node.jstree", function (e, data) {
                    var evt = window.event || e  //good ol firefox
                    const shiftKey = evt.shiftKey || false;
                    if(shiftKey){
                        $("#jstree_div").jstree("close_all", data.node);
                    }
                });
            })

            //tree click
            $('#jstree_div').on("select_node.jstree", function (e, data) {

                if(refreshFlag){
                    refreshFlag = false;
                }else{

                    selectedNode = data.selected[0];
                    selectedTree = 'working'

                    //deselect Lib tree
                    $('#jslibtree_div').jstree("deselect_all");

                    //console.log(data.selected);
                    if (selectedNode ==='local'){

                        $("#sysScreen").hide();
                        $("#jobScreen").hide();

                    }else{
                        if (data.instance.get_node(data.node.id).type === "job"
                            || data.instance.get_node(data.node.id).type === "disabled"
                            || data.instance.get_node(data.node.id).type === "needfull"
                            || data.instance.get_node(data.node.id).type === "rerunnable" ) {

                            //query backend for a specific job and update ui fields
                            getJobByID(selectedNode, "read");
                            $("#comType").val('Job');

                            $("#sysScreen").hide();
                            $("#jobScreen").show();
                            $('#componentTabs').show();

                            updateResultsList(selectedNode);

                            const targetNode =  $('#jstree_div').jstree(true).get_node(data.node.id);
                            const rSystemId = targetNode.parents[targetNode.parents.length - 2];
                            const rSystemNode =  $('#jstree_div').jstree(true).get_node( rSystemId);
                            if(rSystemNode.text !== 'Library'){

                                if($("#componentsBtn").hasClass('active')){
                                    showBottom()
                                }else{
                                    hideBottom()
                                }
                            }else{
                                hideBottom()
                            }

                        }else{
                            $('#componentTabs').hide()
                            readModeSys();
                            $("#sysScreen").show();
                            $("#jobScreen").hide();
                            $("#comType").val('system');
                            getSysByID(selectedNode);
                            updateResultsList(selectedNode);
                            hideBottom()
                        };
                    }

                    $("#results_html").html('');
                    $("#codes_btn").hide();

                    $("#results_codes").html('');
                    $('#messageSpan').html('');

                    var inputFields = $("#job-form-panel").find('textarea');
                    inputFields.each(setWidth);
                    function setWidth(index, element) {
                        $(element).width = '100%';
                        $(element).css('width','100%');
                        $(element).css('margin-right',0);
                    }
                }
            });

            function loadDashboard(){
                if(localStorage['lastSreenShot']) {
                    $('#screenShotImageDashboard')[0].src=localStorage['lastSreenShot']
                }else{
                    $("#screenShotImageDashboard").hide();
                };
                if(localStorage['appLink']) {
                    $("#link")[0].innerHTML=localStorage['appLink']
                };

                loadDashSystemDropdown();

                if(localStorage['dashSystemDropItemClicked']){
                    var dashSystemDropItemClickedJson = JSON.parse(localStorage['dashSystemDropItemClicked']);
                    var urlString = "'/uploads/" + dashSystemDropItemClickedJson.id + "/icon.png'";
                    $("#dropdownMenuButton")[0].innerHTML = '<img id="dashSystemIcon" class="dashSystemIcon" src='+urlString+'></img>';
                    $("#dropdownMenuButton")[0].innerHTML += dashSystemDropItemClickedJson.sysName;
                    loadDashTable(dashSystemDropItemClickedJson.id);
                    loadDashSystemDetails(dashSystemDropItemClickedJson.id);
                }
            }

            function loadDashSystemDropdown(){
                var mydata = {};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/getPromotedSystems',
                    success : function(data) {

                        const promoted = JSON.parse(data);

                        var pCompHtml = "";
                        //var oldSytemName = "";

                        var dropDownListHtml = "";
                        for (var property in promoted) {
                            if (promoted.hasOwnProperty(property)) {
                                var thisSysId = property;
                                var thisSysName = promoted[property];

                                var urlString = "'/uploads/" + thisSysId + "/icon.png'";
                                var iconHTML = '<img id="dashSystemIcon" class="dashSystemIcon" src='+urlString+'></img>';

                                dropDownListHtml += "<div><a class='dropdown-item dashSystemDropdownItem' href='#' data-id='"+ thisSysId +"' data-sysName='"+ thisSysName +"'>"+ iconHTML+" " + thisSysName +"</a></div>"


                            }
                        }
                        $("#dashSystemsDropdownMenu")[0].innerHTML = dropDownListHtml;

                        $(".dashSystemDropdownItem").on('click', function(){
                            var id = $(this).attr('data-Id');
                            var sysName = $(this).attr('data-sysName');

                            var urlString = "'/uploads/" + id + "/icon.png'";
                            $("#dropdownMenuButton")[0].innerHTML = '<img id="dashSystemIcon" class="dashSystemIcon" src='+urlString+'></img>';
                            $("#dropdownMenuButton")[0].innerHTML += sysName;
                            loadDashTable(id);
                            loadDashSystemDetails(id);

                            localStorage['dashSystemDropItemClicked'] = JSON.stringify({ id:id, sysName:sysName }) ;
                        });

                        $("#dashboardList")[0].innerHTML = pCompHtml;

                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            }

            function loadDashSystemDetails(systemId){
                $.get('/Sys', { id: systemId }, function(data) {
                    var sysJson = data[0] ;
                    if(sysJson.variables && sysJson.variables.host){
                        var host = sysJson.variables['host'].value;
                        host = host ?  host : "[Unspecified]";
                    }else{
                        host = "[Unspecified]";
                    }


                    var dashSystemDetailsHtml = '<div class="dashboardLabel">Host</div>';
                    dashSystemDetailsHtml += '<p>' + host + '</p>';
                    dashSystemDetailsHtml += '<div id="dashSystemDescription">' + description + '</div>';

                    $("#dashSystemDetails")[0].innerHTML = dashSystemDetailsHtml;

                    var dashSystemDescription = new Quill('#dashSystemDescription', {
                        theme: 'snow',
                        modules: {
                            "toolbar": false
                        }
                    });
                    dashSystemDescription.enable(false);
                    var description = sysJson.description;
                    if(description.hasOwnProperty("ops")){
                        dashSystemDescription.setContents(description.ops)
                    }else{
                        dashSystemDescription.setContents(
                            [{ insert:  description },
                                { insert: '\n' }]
                        );
                    };
                });
            }

            function loadDashTable(systemId){
                var mydata = {systemId:systemId}
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/getPromoted',
                    success : function(data) {

                        const promoted = JSON.parse(data);
                        var pCompHtml;
                        $("#dashTable").html("")

                        const dashListRowClicked = localStorage['dashListRowClicked'];

                        var clickedRowEnabled ="";

                        currentPromotedDashDescriptionsArr = [];
                        var x=0;
                        for (var row in promoted){
                            pCompHtml = "";

                            rowJson = promoted[row];

                            var thisClass = 'd-flex dashTableRow';
                            pCompHtml += "<tr id='row_" + rowJson.id +"' data-id='" + rowJson.id +"' data-runSys='"+ rowJson.systemId +"' data-runSysName='"+ rowJson.systemName + "' class='" + thisClass + "'>";

                            var thisNameColHtml = "<div>" + rowJson.name + "</div>";
                            thisNameColHtml += "<div class='dashTableNameButtonRow' >"
                            var display = rowJson.enabled == 1 ? 'style="display: inline;"' : 'style="display: none;"'
                            thisNameColHtml += "<i id='DashBuildMenu' "+display+" class='fa  fa-play fa-fw  dashTableBuildButton'></i>  "
                            thisNameColHtml += "<i id='DashOpenMenu' class='fa  fa-folder-open fa-fw dashTableOpenButton'></i></div>";


                            pCompHtml += "<td class='col-2 dashTableNameItem'>  " + thisNameColHtml + "</td>";

                            var thisEnabledSliderHTML = "<div class='dashTableEnabledButtonRow'>"
                            thisEnabledSliderHTML += rowJson.hasOwnProperty("enabled") ? (rowJson.enabled == '1' ? '<label class="switch "><input type="checkbox" checked class="success dashTableEnableButton"><span class="slider round"></span></label>':'<label class="switch "><input type="checkbox" class="success dashTableEnableButton"><span class="slider round"></span></label>') : "";
                            thisEnabledSliderHTML += "</div>";

                            if(rowJson.hasOwnProperty("enabled")){
                                if(rowJson.enabled == 1){
                                    enabledHTML = "<i class='fa fa-check-circle-o fa-fw DashListRowPass'></i>";
                                }else{
                                    enabledHTML = "<i class='fa fa-times-circle-o fa-fw DashListRowFail'></i>";
                                }
                            }

                            pCompHtml += "<td class='col-1 dashTableEnableItem'>" + enabledHTML + thisEnabledSliderHTML +  "</td>";

                            var success = rowJson.hasOwnProperty("lastBuild") ? (rowJson.lastBuild.pass ? "<i class='fa fa-check fa-fw DashListRowPass'></i>":"<i class='fa fa-times fa-fw DashListRowFail'></i>") : "";
                            pCompHtml += "<td class='col-1 dashTableSuccessItem'>" + success + "</td>";

                            pCompHtml += "<td class='col-8 dashTableDescriptionItem'><div id = 'dashTableDescriptionItem"+x.toString()+"'></div></td>";

                            pCompHtml += "</tr>"

                            $("#dashTable").append(pCompHtml);

                            if(dashListRowClicked === rowJson.id){
                                clickedRowEnabled = rowJson.enabled;
                                $("#dashSys").val(rowJson.systemId);
                            }

                            if(!currentPromotedDashDescriptionsArr[x]){
                                currentPromotedDashDescriptionsArr.push(
                                    new Quill('#dashTableDescriptionItem'+x.toString(), {
                                        theme: 'snow',
                                        modules: {
                                            "toolbar": false
                                        }
                                    })
                                );
                                currentPromotedDashDescriptionsArr[x].enable(false);
                            }
                            if(rowJson.description.hasOwnProperty("ops")){
                                currentPromotedDashDescriptionsArr[x].setContents(rowJson.description.ops)
                            }else{
                                currentPromotedDashDescriptionsArr[x].setContents(
                                    [{ insert:  rowJson.description },
                                        { insert: '\n' }]
                                );
                            };

                            x++;
                        }

                        selectDashTableRow(dashListRowClicked);

                        setRowEnablement(dashListRowClicked,clickedRowEnabled);

                        function setRowEnablement(id, enabled){
                            if (enabled === 1){
                                $("#row_"+id + " > td > div > i.dashTableBuildButton").show();
                            }else{
                                $("#row_"+id + " > td > div > i.dashTableBuildButton").hide();

                            }
                        }

                        function selectDashTableRow(id){

                            $(".dashTableRow").each(function(){
                                $(this).removeClass('dashListRowClicked');
                                $(this).addClass('dashListRowNotClicked');
                                $(this).off("click");
                            });
                            $("#row_" + id).addClass("dashListRowClicked");
                            $("#row_" + id).removeClass("dashListRowNotClicked");

                            $("#dashId").val(id);

                            $('.dashListRowNotClicked').on('click', function(){
                                var id = $(this).attr('data-Id');
                                var sys = $(this).attr('data-runSys');
                                var sysName = $(this).attr('data-runSysName');

                                $("#dashId").val(id);
                                $("#dashSys").val(sys);

                                selectDashTableRow(id);

                                localStorage['dashListRowClicked'] = id;
                            });

                        }

                        $('.dashListRowNotClicked').on('click', function(){
                            var id = $(this).attr('data-Id');
                            var sys = $(this).attr('data-runSys');
                            var sysName = $(this).attr('data-runSysName');

                            $("#dashId").val(id);
                            $("#dashSys").val(sys);

                            //loadDashDetails(id, sys, sysName);
                            selectDashTableRow(id)

                            localStorage['dashListRowClicked'] = id;
                        });

                        $('.dashTableBuildButton').on('click', function(){
                            var id = $("#dashId").val();
                            var sys = $("#dashSys").val();
                            runJob(id, sys);
                        });
                        $('.dashTableOpenButton').on('click', function(){
                            var id = $("#dashId").val();
                            $("#componentsBtn").click();
                            $('#jstree_div').jstree("deselect_all");
                            $('#jstree_div').jstree('select_node',id);
                       //     getJobByID(id, "");
                       //     $('#jstree_div').jstree(true).get_node(id, true).children('.jstree-anchor').focus();
                        });

                        $('.dashTableEnableButton').on('click', function(){
                            var id = $("#dashId").val();

                            const checked = {id:id, checked: this.checked};

                            $.ajax({
                                type: 'get',
                                data: checked,
                                dataType : "text",
                                headers: {
                                    "content-type": "application/json"
                                },
                                url: '/setEnable',
                                success : function(data) {

                                   const enabledJson = JSON.parse(data);
                                   const en = enabledJson.enabled;
                                   const id = $("#dashId").val();

                                   if (en === 1){
                                       $("#row_"+id + " > td > div > i.dashTableBuildButton").show();
                                       $("#row_"+id + " > td.dashTableEnableItem > i.fa").removeClass('fa-times-circle-o').removeClass('DashListRowFail');
                                       $("#row_"+id + " > td.dashTableEnableItem > i.fa").addClass('fa-check-circle-o').addClass('DashListRowPass');
                                   }else{
                                       $("#row_"+id + " > td > div > i.dashTableBuildButton").hide();
                                       $("#row_"+id + " > td.dashTableEnableItem > i.fa").removeClass('fa-check-circle-o').removeClass('DashListRowPass');
                                       $("#row_"+id + " > td.dashTableEnableItem > i.fa").addClass('fa-times-circle-o').addClass('DashListRowFail');
                                   }

                                },
                                error : function(error) {
                                    alert("Error changing enable property for this component");
                                    console.log(error)
                                }
                            })

                        })
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            }

            serverStats();
            setInterval(serverStats, 5000);
            function serverStats(){
                var mydata = {};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/getCPUStats',
                    success : function(data) {
                        const statsJson = JSON.parse(data);
                        if(statsJson.hasOwnProperty("last10")){
                            if(statsJson.last10 != null){
                                $("#osCPUValue")[0].innerHTML = statsJson.last10.toString()+"%"
                                $("#osFMValue")[0].innerHTML = (statsJson.freeMem/1024/1024/1024).toFixed(2).toString()+" GB"
                            }
                        }
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            }

            //var bottomHiddenFlag = true;
            function hideBottom(){
                $("#bottomRow").hide(function(){
                    var container = $('#rowContainer');
                    bottomHiddenFlag = true;
                    setWindowHeight(container.height(), container);
                });
            }
            function showBottom(){
                $("#bottomRow").show(function(){
                    var container = $('#rowContainer');
                    bottomHiddenFlag = false;
                    setWindowHeight(currentHeight, container);
                });
            }
            //hideBottom();

            function clearJobFields(){
                $("#id").val('');
                $("#parent").val('');
                $("#name").val('');
                $("#componentEnabled").val('');
                $("#componentEnabledVal").html('');
                $("#promoted").val('');
                $("#promotedVal").html('');
                $("#rerunnable").val('');
                $("#rerunnableVal").html('');
                $("#sysFunc").html('');
                $("#sysFuncVal").html('');
                $("#runLoc").html('');
                $("#runLocVal").html('');

          //      description.setContents("");

//                templates

                $("#compVariables").html('');

                $("#version").text('');
                $("#text").val('');
                $('#resourceFiles').val('');
                $("#ft").val('');
                $('#fileList').html('');
                $('#createdDate').val('');
                $('#createdBy').val('');
                $("#idDisp").val('');
                $("#price").val('')
            }

            $('#componentEnabled').change(function() {
                if(this.checked) {
                    $("#componentEnabledVal").html('Yes');
                }else{
                    $("#componentEnabledVal").html('No');
                }
            });

            $('#promoted').change(function() {
                if(this.checked) {
                    $("#promotedVal").html('Yes');
                }else{
                    $("#promotedVal").html('No');
                }
            });

            $('#rerunnable').change(function() {
                if(this.checked) {
                    $("#rerunnableVal").html('Yes');
                }else{
                    $("#rerunnableVal").html('No');
                }
            });

            $('#sysFunc').change(function() {
                if(this.checked) {
                    $("#sysFuncVal").html('Yes');
                }else{
                    $("#sysFuncVal").html('No');
                }
            });
            $('#runLoc').change(function() {
                if(this.checked) {
                    $("#runLocVal").html('Yes');
                }else{
                    $("#runLocVal").html('No');
                }
            });

            //function to create a block of var input html for new vars and edits. prvide indev str eg "0" or "1" ...
            function createVarEditHtml(currentRowCntStr){
                var newHtml = '<tr id="new_row'+currentRowCntStr+'" class="d-flex varRow newVarRow">'

                //new var name input
                newHtml += '<td class="col-2"><input id="newCompVarName'+currentRowCntStr+'" class="form-control newCompVarName" type="text"></td>'

                //New privacy switch
                newHtml += '<td class="col-2"><div class="newCompVarPrivateButtonRow">';
                newHtml += '<label class="switch" ><input id="newCompVarPrivateInput'+currentRowCntStr+'" data-inx='+currentRowCntStr+' type="checkbox"  class="success newCompVarPrivateButton"><span class="slider round"></span></label>';
                newHtml += '<span id="newCompVarPrivateDisp'+currentRowCntStr+'" class="newCompVarPrivateDisp"></span>';
                newHtml += '</div></td>';

                //New var type pick
                newHtml += '<td class="col-2 center">'
                newHtml += '<button class="dropdown-toggle newCompVarTypeButton" type="button" id="newCompVarTypeButton'+currentRowCntStr+'" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">Text</button>';
                newHtml += '<div id="newCompVarTypeDropdownMenu" class="dropdown-menu dashSystemsDropdownMenu" aria-labelledby="newCompVarTypeButton'+currentRowCntStr+'" x-placement="bottom-start" >';

                newHtml +=  '<div><a class="dropdown-item newCompVarTypeDropdownItem" data-target="newCompVarTypeButton'+currentRowCntStr+'" data-type="Text" href="#">Text</a></div>' +
                    '<div><a class="dropdown-item newCompVarTypeDropdownItem" data-target="newCompVarTypeButton'+currentRowCntStr+'" data-type="WYSIWYG" href="#" >WYSIWYG</a></div>' ;
                newHtml +=  '</div></td>'

                //New component variable value
                newHtml += '<td class="col-6"><div class="compVarEditValRow"><a href="#"><i class="fa fa-pencil fa-fw compVarEditValButton" data-idn="'+currentRowCntStr+'" style=""></i></a><input id="newCompVarValue'+currentRowCntStr+'" class="form-control newCompVarValue" type="text"></div></td>';
                newHtml += '</tr>'

                return newHtml;
            }
            $('.newCompVarBtn').on('click', function(){

                var currentRowCntStr = Object.keys(currentCompVarArr).length.toString();

                var newHtml =  createVarEditHtml(currentRowCntStr);

                var varName  = "newVar_"+currentRowCntStr
                $("#compVariables").append(newHtml);


                currentCompVarArr[varName] = {private:false, type:"", value:"", changed: currentRowCntStr};
                $("#newCompVarPrivateDisp"+currentRowCntStr).html( 'No');
                insertVarEditEvents()

            })
            function insertVarEditEvents(){

                $(".newCompVarTypeDropdownItem").on('click', function(){
                    var type = $(this).attr('data-type');
                    var target = $(this).attr('data-target');

                    $("#"+target).html(type);
                });

                $('.newCompVarPrivateButton').on('click', function(){
                    var id = $("#id").val();
                    const checked =  this.checked;
                    var inx = $(this).attr('data-inx');

                    $("#newCompVarPrivateDisp"+inx).html(checked ? 'Yes' : 'No');
                })

                $(".compVarEditValButton").on('click', function(){
                    var idn = $(this).attr('data-idn');

                    var varName = "";
                    for(var x in currentCompVarArr){
                        if (currentCompVarArr[x].idn == idn)(
                            varName = x
                        )
                    }

                    $('#varEditModal').modal('show');

                    // Sets the HTML contents of the activeEditor editor
                    tinymce.activeEditor.setContent($("#newCompVarValue"+idn).val());

                    $("#varEditModalCutrrentIdn").val(idn);

                });

                $('#varEditModal').on('hidden.bs.modal', function() {
                    var idn = $("#varEditModalCutrrentIdn").val();
                    $("#newCompVarValue"+idn).val( tinymce.activeEditor.getContent() )

                });
            }


            function createSysVarEditHtml(currentRowCntStr){
                var newHtml = '<tr id="new_row'+currentRowCntStr+'" class="d-flex varRow newVarRow">'

                //new var name input
                newHtml += '<td class="col-2"><input id="newSysVarName'+currentRowCntStr+'" class="form-control newSysVarName" type="text"></td>'

                //New privacy switch
                newHtml += '<td class="col-2"><div class="newSysVarPrivateButtonRow">';
                newHtml += '<label class="switch" ><input id="newSysVarPrivateInput'+currentRowCntStr+'" data-inx='+currentRowCntStr+' type="checkbox"  class="success newSysVarPrivateButton"><span class="slider round"></span></label>';
                newHtml += '<span id="newSysVarPrivateDisp'+currentRowCntStr+'" class="newSysVarPrivateDisp"></span>';
                newHtml += '</div></td>';

                //New var type pick
//                newHtml += '<td class="col-2 center">'
//                newHtml += '<button class="dropdown-toggle newSysVarTypeButton" type="button" id="newSysVarTypeButton'+currentRowCntStr+'" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">Text</button>';
//                newHtml += '<div id="newSysVarTypeDropdownMenu" class="dropdown-menu dashSystemsDropdownMenu" aria-labelledby="newSysVarTypeButton'+currentRowCntStr+'" x-placement="bottom-start" >';

//                newHtml +=  '<div><a class="dropdown-item newSysVarTypeDropdownItem" data-target="newSysVarTypeButton'+currentRowCntStr+'" data-type="Text" href="#">Text</a></div>' +
//                    '<div><a class="dropdown-item newSysVarTypeDropdownItem" data-target="newSysVarTypeButton'+currentRowCntStr+'" data-type="WYSIWYG" href="#" >WYSIWYG</a></div>' ;
//                newHtml +=  '</div></td>'

                //New system variable value
                newHtml += '<td class="col-6"><div class="sysVarEditValRow"><a href="#">' +
//                    '<i class="fa fa-pencil fa-fw sysVarEditValButton" data-idn="'+currentRowCntStr+'" style=""></i></a>' +
                    '<input id="newSysVarValue'+currentRowCntStr+'" class="form-control newSysVarValue" type="text"></div></td>';
                newHtml += '</tr>'

                return newHtml;
            }
            $('.newSysVarBtn').on('click', function(){

                var currentRowCntStr = Object.keys(currentCompVarArr).length.toString();

                var newHtml =  createSysVarEditHtml(currentRowCntStr);

                var varName  = "newVar_"+currentRowCntStr
                $("#sysVariables").append(newHtml);


                currentSysVarArr[varName] = {private:false, type:"", value:"", changed: currentRowCntStr};
                $("#newSysVarPrivateDisp"+currentRowCntStr).html( 'No');
                insertSysVarEditEvents()

            })
            function insertSysVarEditEvents(){

//                $(".newSysVarTypeDropdownItem").on('click', function(){
//                    var type = $(this).attr('data-type');
//                    var target = $(this).attr('data-target');
//
//                    $("#"+target).html(type);
//                });

                $('.newSysVarPrivateButton').on('click', function(){
                    var id = $("#id").val();
                    const checked =  this.checked;
                    var inx = $(this).attr('data-inx');

                    $("#newSysVarPrivateDisp"+inx).html(checked ? 'Yes' : 'No');
                })

//                $(".sysVarEditValButton").on('click', function(){
//                    var idn = $(this).attr('data-idn');
//
//                    var varName = "";
//                    for(var x in currentSysVarArr){
//                        if (currentSysVarArr[x].idn == idn)(
//                            varName = x
//                        )
//                    }
//
//                    $('#varEditModal').modal('show');
//
//                    // Sets the HTML contents of the activeEditor editor
//                    tinymce.activeEditor.setContent($("#newCompVarValue"+idn).val());
//
//                    $("#varEditModalCutrrentIdn").val(idn);
//
//                });

//                $('#varEditModal').on('hidden.bs.modal', function() {
//                    var idn = $("#varEditModalCutrrentIdn").val();
//                    $("#newCompVarValue"+idn).val( tinymce.activeEditor.getContent() )
//
//                });
            }

//            tinymce.init

            tinymce.init({
                selector: "#varValEditor",
                plugins: [
                    "advlist autolink lists link image charmap print preview anchor",
                    "searchreplace visualblocks code fullscreen",
                    "insertdatetime media table contextmenu paste"
                ],
                toolbar: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image",
                protect: [
                    /\<\/?(if|endif)\>/g, // Protect <if> & </endif>
                    /\<!\[if !mso\]\>/g, // Protect <![if !mso]>
                    /\<!\[if !vml\]\>/g, // Protect <![if !vml]>
                    /\<!\[endif\]\>/g, // Protect <![endif]>
                    /\<xsl\:[^>]+\>/g, // Protect <xsl:...>
                    // /<\?php.*?\?>/g // Protect php code
                    /<\?php[\s\S]*?\?>/g // Protect php code
                ]
            });

            //getJobByID - query backend and update fields
            var currentCompVarArr = {};
            function getJobByID(NodeID, viewmode){
                clearJobFields();
                $.get('/Jobs', { id: NodeID }, function(data) {

                    // testing vvvvvvvvvvvvvvvvvvv
                   var dispData = JSON.parse(JSON.stringify(data[0]) )  ;
                    delete dispData.script;
                    //delete dispData.custTemplates;
                    //delete dispData.template;

                    $("#nodeData").val(JSON.stringify(dispData).split(',"').join(',\n"')  );
                    // testing ^^^^^^^^^^^^^^^^^^^

                    $("#id").val(data[0].id);
                    $("#comType").val(data[0].comType);
                    $("#idDisp").val(data[0].id);
                    $("#parent").val(data[0].parent);
                    $("#name").val(data[0].name);

                    if(data[0].enabled === 1){
                        $('#componentEnabled').prop('checked', true);
                        $('#componentEnabledVal').html('Yes');
                    }else{
                        $('#componentEnabled').prop('checked', false);
                        $('#componentEnabledVal').html('No');
                    }

                    if(data[0].promoted === 1){
                        $('#promoted').prop('checked', true);
                        $('#promotedVal').html('Yes');
                    }else{
                        $('#promoted').prop('checked', false);
                        $('#promotedVal').html('No');
                    }

                    if(data[0].rerunnable === 1){
                        $('#rerunnable').prop('checked', true);
                        $('#rerunnableVal').html('Yes');
                    }else{
                        $('#rerunnable').prop('checked', false);
                        $('#rerunnableVal').html('No');
                    }

                    if(data[0].systemFunction === 1){
                        $('#sysFunc').prop('checked', true);
                        $('#sysFuncVal').html('Yes');
                    }else{
                        $('#sysFunc').prop('checked', false);
                        $('#sysFuncVal').html('No')
                    }

                    if(data[0].runLocal === 1){
                        $('#runLoc').prop('checked', true);
                        $('#runLocVal').html('Yes')
                    }else{
                        $('#runLoc').prop('checked', false);
                        $('#runLocVal').html('No');
                    }

                    if(data[0].description.hasOwnProperty("ops")){
                        description.setContents(data[0].description.ops)
                    }else{
                        description.setContents(
                            [{ insert:  data[0].description },
                                { insert: '\n' }]
                        );
                    };


                    var curTxtVal = scriptEditor.getValue();
                    var newTxtVal = data[0].script;
                    if(curTxtVal !== newTxtVal){
                        scriptEditor.session.setValue(data[0].script);
                    }

                    //load var table
                    var pCompHtml = "";
                    var x = 0;
                    //get variables obj and add an index number to each member
                    currentCompVarArr = data[0].variables;
                    for(var varName in currentCompVarArr){
                        currentCompVarArr[varName].idn = x.toString();
                        x++
                    }

                    for(var varName in data[0].variables){
                        //new row
                        var idn = currentCompVarArr[varName].idn
                        pCompHtml = "<tr id='varRow_" + idn +"'" +  " class='d-flex varRow'>";

                        //add name col
                        pCompHtml += "<td class='col-2 varNameTd'>" +
                            "<i class='fa fa-pencil fa-fw compVarEditButton' data-idn='" + idn +"'></i>" +
                            "<span id = 'varNameTd" + idn + "'></span>" +
                            "<i class='fa fa-times fa-fw compVarDelButton' data-idn='" + idn +"'></i>" +
                            "</td>";

                        //add private col
                        pCompHtml += "<td class='col-2 center'>" + (data[0].variables[varName].private ? "Yes":"No") + "</td>";

                        //add type col
                        var typeTxt = data[0].variables[varName].type;
                        pCompHtml += "<td class='col-2 center'>" + (typeTxt === "" ? "Text" : typeTxt) + "</td>";

                        //add value col
                        pCompHtml += "<td class='col-6 varValTd'>" +
                            "<span id = 'varValTd" + idn + "'></span>" +
                            "</td>";

                        pCompHtml += "</tr>";

                        $("#compVariables").append(pCompHtml);
                        $("#varNameTd" + idn).text(varName);
                        $("#varValTd" + idn).text(data[0].variables[varName].value);
                    }


                    $(".compVarDelButton").on('click', function(){
                        var idn = $(this).attr('data-idn');
                        for(varName in currentCompVarArr){
                            if (currentCompVarArr[varName].idn == idn){
                                delete currentCompVarArr[varName];break
                            }
                        }

                        $("#varRow_"+idn).remove();
                    });

                    $(".compVarEditButton").on('click', function(){
                        var idn = $(this).attr('data-idn');
                        var newHtml = createVarEditHtml(idn);

                        $("#varRow_"+idn).html(newHtml);
                        insertVarEditEvents();
                        var varName = "";
                        for(var x in currentCompVarArr){
                            if (currentCompVarArr[x].idn == idn)(
                                varName = x
                            )
                        }

                        $("#newCompVarName" + idn).val(varName);
                        $("#newCompVarPrivateInput" + idn)[0].checked = currentCompVarArr[varName].private;
                        $("#newCompVarTypeButton" + idn).val(currentCompVarArr[varName].type);
                        $("#newCompVarValue" + idn).val(currentCompVarArr[varName].value);
                        $("#newCompVarPrivateDisp"+idn).html(currentCompVarArr[varName].private ? 'Yes' : 'No');

                        currentCompVarArr[varName].changed = idn;
                    });

                    $("#version").text(data[0].ver);
                    $("#templateType").val(data[0].templateType);
                    $("#text").val(data[0].text);
                    $('#resourceFiles').val(data[0].resourceFiles);
                    $("#ft").val(data[0].ft);

                    if(data[0].hasOwnProperty("hist")){
                        $("#createdBy").val(data[0].hist[0].username);
                        $("#createdDate").val(data[0].hist[0].ds)
                    }

                    populateFileList( $('#resourceFiles').val(), false);
                    $.get('/fileList', { id: $('#id').val() }, function(data) {
                        $('#resourceFiles').val(data);
                        populateFileList(data, false);
                    });

                    var timestamp = new Date().getTime();
                    $.get('/uploads/' +  $("#id").val() + "/screenshot.png?" + timestamp, '', function(data) {

                        if (data === ''){
                            $('#screenShotImageHolder').hide();
                            $('#screenShotImage')[0].src='';
                            $("#firstRow").css('width:50%;');
                            $("#topLeftForm").attr('class', 'col-lg-12');

                        }else{
                            $('#screenShotImageHolder').show();
                            $('#screenShotImage')[0].src='/uploads/' +  $("#id").val() + '/screenshot.png?' + timestamp;
                            $("#firstRow").css('width:100%;');
                            $("#topLeftForm").attr('class', 'col-lg-6');
                        }
                    });

                    //load templates
                    var x=0;
                    var tempObjArr = data[0].templates.tempArr;

                    tempObjArr.forEach(function(tempObj){

                        //if ther is onenot an instance to reuse create a new
                        if(!currentTemplatesArr[x]){
                            var inHtml = authorTemplateHTML(x);

                            $('#custTemplates').append(inHtml);

                            currentTemplatesArr.push(ace.edit("template"+x.toString()));

                            currentTemplatesArr[currentTemplatesArr.length-1].session.setMode("ace/mode/text");
                            document.getElementById("template"+x.toString()).style.fontSize='14px';

                            currentTemplatesArr[currentTemplatesArr.length-1].renderer.$cursorLayer.element.style.display = "none"

                            loadjobTempTypeDropdown(x)

                            $("#templateWindowMax"+x.toString()).click( function(){
                                var inx = parseInt($(this).attr('data-inx'), 10);
                                setTempAceHeight(inx, "max")
                            })
                            $("#templateWindowMin"+x.toString()).click( function(){
                                var inx = parseInt($(this).attr('data-inx'), 10);
                                setTempAceHeight(inx, "min")
                            })
                        }else{
                            //unhide the old template code to reuse it
                            $("#templateBlock" + x.toString()).show();
                        }

                        currentTemplatesArr[x].session.setValue(tempObj.c);
                        currentTemplatesArr[x].isValid = true;
                        x++;
                    });

                    //mark the rest if the ace instances as invalid, hide the block and clear the values so they can be recycled
                    while (x < currentTemplatesArr.length ){
                        $("#templateBlock" + x.toString()).hide();
                        currentTemplatesArr[x].session.setValue("");
                        currentTemplatesArr[x].isValid = false;
                        x++;
                    }

                    //inset the contents of the instances and populate type dropdowns
                    x=0;
                    tempObjArr.forEach(function(tempObj){
                        var tempType =  tempObj.t === "" ? "text" :  tempObj.t;
                        currentTemplatesArr[x].session.setMode("ace/mode/" + tempType);
                        $("#templateType" + x.toString()).val(tempType);
                        $("#dropdownTemplateTypeButton"+x.toString())[0].innerHTML = tempType;
                        x++;
                    })

                    //set the style if eack instance
                    setAceStyle(currentStyleName);
                    $(".ace_editor").addClass("aceDisabled");

                    //hide the cursor for each instance
                    for(var inx in currentTemplatesArr){
                        currentTemplatesArr[inx].renderer.$cursorLayer.element.style.display = "none";
                        currentTemplatesArr[inx].setReadOnly(true);
                    }

                    //format screen for either read mode or write
                    if(viewmode === "read"){
                        readModeJob();
                    }else if(viewmode === "edit"){
                        editModeJob();
                    }
                })
            }

            function clearSysFields(){
                $("#id").val('');
                $("#parent").val('');
                $("#sysName").val('');
                $("#sysVersion").text('');
                sysDescription.setContents("");
                $("#sysVariables").html('');

                $("#text").val('');
            }

            var currentSysVarArr = {};
            //getSysByID
            function getSysByID(NodeID){
                clearSysFields();
                if(NodeID === 'local'){
                    $("#rightCol").hide();
                }else{
                    $("#rightCol").show();
                    $.get('/Sys', { id: NodeID }, function(data) {

                        // testing -----------V----------
                        var dispData = JSON.parse(JSON.stringify(data[0]) )  ;
                        $("#sysNodeData").val(JSON.stringify(dispData).split(',"').join(',\n"')  );
                        // testing ------------^---------

                        $("#id").val(data[0].id);
                        $("#comType").val(data[0].comType);
                        $("#parent").val(data[0].parent);
                        $("#sysName").val(data[0].name);
                        $("#sysVersion").text(data[0].ver);

                        if(data[0].description.hasOwnProperty("ops")){
                            sysDescription.setContents(data[0].description.ops)
                        }else{
                            sysDescription.setContents(
                                [{ insert:  data[0].description },
                                    { insert: '\n' }]
                            );
                        };

                        //load var table
                        var pSysHtml = "";
                        var x = 0;
                        //get variables obj and add an index number to each member
                        if(data[0].variables){
                            currentSysVarArr = data[0].variables;
                        }else{
                            currentSysVarArr = {};
                        }
                        for(var varName in currentSysVarArr){
                            currentSysVarArr[varName].idn = x.toString();
                            x++
                        }

                        for(var varName in currentSysVarArr){
                            //new row
                            var idn = currentSysVarArr[varName].idn
                            pSysHtml = "<tr id='varSysRow_" + idn +"'" +  " class='d-flex varRow'>";

                            //add name col
                            pSysHtml += "<td class='col-2 varSysNameTd'>" +
                                "<i class='fa fa-pencil fa-fw sysVarEditButton' data-idn='" + idn +"'></i>" +
                                "<span id = 'varSysNameTd" + idn + "'></span>" +
                                "<i class='fa fa-times fa-fw sysVarDelButton' data-idn='" + idn +"'></i>" +
                                "</td>";

                            //add private col
                            pSysHtml += "<td class='col-2 center'>" + (data[0].variables[varName].private ? "Yes":"No") + "</td>";

                            //add type col
//                            var typeTxt = data[0].variables[varName].type;
//                            pSysHtml += "<td class='col-2 center'>" + (typeTxt === "" ? "Text" : typeTxt) + "</td>";

                            //add value col
                            pSysHtml += "<td class='col-6 varValTd'>" +
                                "<span id = 'varSysValTd" + idn + "'></span>" +
                                "</td>";

                            pSysHtml += "</tr>";

                            $("#sysVariables").append(pSysHtml);
                            $("#varSysNameTd" + idn).text(varName);
                            $("#varSysValTd" + idn).text(data[0].variables[varName].value);
                        }

                        $(".newSysVarBtn").hide();
                        $(".sysVarDelButton").hide();
                        $(".sysVarEditButton").hide();
                        insertSysVarEditEvents();

                        $(".sysVarDelButton").on('click', function(){
                            var idn = $(this).attr('data-idn');
                            for(varName in currentSysVarArr){
                                if (currentSysVarArr[varName].idn == idn){
                                    delete currentSysVarArr[varName];break
                                }
                            }

                            $("#varSysRow_"+idn).remove();
                        });

                        $(".sysVarEditButton").on('click', function(){
                            var idn = $(this).attr('data-idn');
                            var newHtml = createSysVarEditHtml(idn);

                            $("#varSysRow_"+idn).html(newHtml);
                            insertSysVarEditEvents();
                            var varName = "";
                            for(var x in currentSysVarArr){
                                if (currentSysVarArr[x].idn == idn)(
                                    varName = x
                                )
                            }

                            $("#newSysVarName" + idn).val(varName);
                            $("#newSysVarPrivateInput" + idn)[0].checked = currentSysVarArr[varName].private;
//                            $("#newSysVarTypeButton" + idn).val(currentSysVarArr[varName].type);
                            $("#newSysVarValue" + idn).val(currentSysVarArr[varName].value);
                            $("#newSysVarPrivateDisp"+idn).html(currentSysVarArr[varName].private ? 'Yes' : 'No');

                            currentSysVarArr[varName].changed = idn;
                        });

                        $("#text").val(data[0].text);
                        $("#iconURL").val('');

                        if (data[0].hasOwnProperty("icon")){
                            var iconName = data[0].icon;
                            if(iconName !== ''){
                                var timestamp = new Date().getTime();
                                $("#sysIcon").html("<img width=21 height=21 src='/uploads/" + $("#id").val() +"/" + iconName + "?" + timestamp + "'>")
                            }
                        }else{
                            $("#sysIcon").html("")
                        }
                    });
                }
            }

            //getLibSysByID
            function getLibSysByID(NodeID, lib){

                clearSysFields();
                $.get('/LibSys', { id: NodeID, pickedLib:lib }, function(data) {
                    // testing -----------V----------
                    var dispData = JSON.parse(JSON.stringify(data[0]) )  ;
                    $("#sysNodeData").val(JSON.stringify(dispData).split(',"').join(',\n"')  );
                    // testing ------------^---------

                    $("#id").val(data[0].id);
                    $("#comType").val(data[0].comType);
                    $("#parent").val(data[0].parent);
                    $("#sysName").val(data[0].name);
                    $("#sysVersion").text(data[0].ver);

                    if(data[0].description.hasOwnProperty("ops")){
                        sysDescription.setContents(data[0].description.ops)
                    }else{
                        sysDescription.setContents(
                            [{ insert:  data[0].description },
                                { insert: '\n' }]
                        );
                    };

                  //  $("#sysVariables").val(data[0].variables);
                    $("#text").val(data[0].text);
                    $("#iconURL").val('');

                    if (data[0].hasOwnProperty("icon")){
                        var iconName = data[0].icon;
                        if(iconName !== ''){
                            var timestamp = new Date().getTime();
                            $("#sysIcon").html("<img width=21 height=21 src='/library/" + pickedLib + "/uploads/" + $("#id").val() +"/" + iconName + "?" + timestamp + "'>")
                        }
                    }else{
                        $("#sysIcon").html("")
                    }
                });
            }

            //run
            var refreshFlag = false;
            $("#run_button").click(function(event){
                var id = $("#id").val();
                var sys = $('#ft').val().split('/')[1];
                runJob(id, sys);
            });

            $("#runConfirmButton").on("click",function() {
                var ids = $("#idToBeRun").val();
                if($('#runClosestAn').is(':checked')){
                    if($("#ClosestRerunnableAn").val() !== ""){
                        ids = $("#ClosestRerunnableAn").val();
                    }
                }

                var sys = $("#sysToBeRun").val();

                if($('#runChildrenCb').is(':checked')){
                    var selectedNodes = $("#jstree_div").jstree(true).get_json(ids, { flat: true }); //returns parent and all children objs
                    var selectedNodesArr = selectedNodes.map(a => a.id); //extract ids into arr
                    if (selectedNodesArr.length > 0 ){
                        ids = selectedNodesArr.join(';');
                    }
                }

                $("#results_codes").html('');
                $("#resultsStatus")[0].innerHTML = '';
                $("#results_html").addClass('result_fresh');
                $("#results_html").removeClass('result_history');

                var currentRespText = "";
                var formData = new FormData();

                formData.append('ids', ids);

                if($('#localStoreKeyCb').is(':checked')){
                    formData.append('storeLocal', 'yes');
                    formData.append('localStoredKey',localStorage['key_' + sys]);
                    //console.log("key:"+localStorage['key_' + sys]);
                }else{
                    formData.append('storeLocal', 'no');
                    localStorage['key_' + sys] = '';
                    localStorage['keyName_' + sys]='';

                }

                if($('#localStoreAccessCb').is(':checked')){
                    formData.append('storeLocalAccess', 'yes');
                    formData.append('localStoredAccess',localStorage['access']);
                    //console.log("key:"+localStorage['key_' + sys]);
                }else{
                    formData.append('storeLocalAccess', 'no');
                    localStorage['access'] = '';
                    localStorage['accessName' ]='';
                }

                var files;
                files = $('#upload-key').get(0).files
                if( files.length === 1) {
                    var file = files[0];
                    // add the files to formData object for the data payload
                    formData.append('key', file, file.name);
                    if($('#localStoreKeyCb').is(':checked')) {
                        localStorage['keyName_' + sys] = file.name;
                    }
                    $('#upload-key').val("");
                }

                files = $('#upload-access').get(0).files
                if( files.length === 1) {
                    var file = files[0];
                    // add the files to formData object for the data payload
                    formData.append('access', file, file.name);
                    if($('#localStoreAccessCb').is(':checked')) {
                        localStorage['accessName'] = file.name;
                    }
                    $('#upload-access').val("");
                }

                var localKey="";
                var localAccess="";

                $('.runningJob').removeClass('runningJob').removeClass('runningJobCompleteFail').removeClass("runningJobCompleteSuccess");
                $('.runningJobCompleteSuccess').removeClass('runningJob').removeClass('runningJobCompleteFail').removeClass("runningJobCompleteSuccess");
                $('.runningJobCompleteFail').removeClass('runningJob').removeClass('runningJobCompleteFail').removeClass("runningJobCompleteSuccess");

                //Disable tree
//                $('#jstree_div li').each( function() {
//                    $("#jstree_div").jstree().disable_node(this.id);
//                });

                //Save tree state
                var prestate =  $("#jstree_div").jstree(true).get_state();

                $("#status-panel-body").show();

                $.ajax({
                    url: '/run',
                    processData: false,
                    contentType: false,
                    type: 'POST',
                    data: formData,
                    xhr: function () {

                        $('#upload-key').val('');

                        var xhr = $.ajaxSettings.xhr();

                        var buildIDRunningPrev = '';
                        var buildIDRunning = '';
                        xhr.onprogress = function e() {
                            var rText = xhr.responseText

                            var rTextNew = rText.substr(currentRespText.length)
                            currentRespText = rText;
                            var rTextNew = ansi_up.ansi_to_html(rTextNew).replace(/(?:\r\n|\r|\n)/g, '<br>');

                            var sys = $("#sysToBeRun").val();

                            rTextNew.split('<br>').forEach(function(row){

                                if(row.substr(0,17) === 'message:Building:'){
                                    $("#resultsStatus")[0].innerHTML += "<span>" + row.slice(17) + " <img src='/images/throbber.gif'></span>"
                                }else if(row.substr(0,28) === 'status:All scripts completed'){
                                    $("#resultsStatus")[0].innerHTML += "<b>All scripts completed</b>";
                                }else if(row.substr(0,22) === 'status:Scripts Aborted'){
                                    $("#resultsStatus")[0].innerHTML += "Scripts aborted"
                                }else if(row.substr(0,26) === 'message:CompletionSuccess:'){
                                    if(row.slice(26) === 'true'){
                                        $("#resultsStatus")[0].innerHTML += "<i class='fa  fa-check fa-fw DashListRowPass'></i><br>";
                                        $("#resultsStatus")[0].innerHTML = $("#resultsStatus")[0].innerHTML.replace('<img src="/images/throbber.gif">',"")

                                    }else{
                                        $("#resultsStatus")[0].innerHTML += "<i class='fa  fa-times fa-fw DashListRowFail'></i><br>";
                                        $("#resultsStatus")[0].innerHTML = $("#resultsStatus")[0].innerHTML.replace('<img src="/images/throbber.gif">',"")
                                    }
                                }

                                if(row.substr(0,4) === 'key:' &&  $("#results_html").html().split("<br>").join("") === "") {
                                    localKey += row.substr(4) + '\n';
                                }
                                else if(row.substr(0,7) === 'access:' &&  $("#results_html").html().split("<br>").join("") === "") {
                                    localAccess += row.substr(7) + '\n';
                                }
                                else if(row.substr(0,12) === 'message:url:'){
                                    var appLink = "Link: <a href='" + row.slice(12)+"' target='_new'>" + row.slice(12) + "</a>"
                                    $("#link")[0].innerHTML = appLink;
                                    localStorage['appLink'] = appLink;
                                }
                                else if(row.substr(0,16) === 'message:BuildID:'){
                                    buildIDRunning = row.substring(
                                        row.lastIndexOf("[") + 1,
                                        row.lastIndexOf("]")
                                    );
                                    if(buildIDRunning !== ''){
                                        $('#' + buildIDRunning + '_anchor').removeClass('runningJobCompleteSuccess').removeClass('runningJobCompleteFail').addClass("runningJob");
                                        if(buildIDRunningPrev !== ''){
                                            $('#' + buildIDRunningPrev + '_anchor').removeClass('runningJob').removeClass('runningJobCompleteFail').addClass("runningJobCompleteSuccess");
                                        }
                                        buildIDRunningPrev = buildIDRunning;

//                                        level = $("#jstree_div").jstree().get_node(buildIDRunning).parents.length;
                                        $("#jstree_div").jstree("open_node", buildIDRunning);
                                        $('#jstree_div').jstree(true).get_node(buildIDRunning, true).children('.jstree-anchor').focus();
//
//                                        if(lastLevel > level || lastLevel == level ){
//                                            $("#jstree_div").jstree("close_node", lastBuildIDRunning);
//                                        }
//
//                                        lastBuildIDRunning = buildIDRunning;
//                                        lastLevel = level;
                                    }
                                }
                                else if(row.substr(0,28) === 'status:All scripts completed'){

                                    refreshFlag=true;
                               //     $('#jstree_div').jstree(true).refresh(true);

                                }
                                else if(row.substr(0,22) === 'status:Scripts Aborted'){
                                    //$('#jstree_div').jstree(true).redraw(true);
                                    refreshFlag=true;
                               //     $('#jstree_div').jstree(true).refresh(true);
                                }
                                else if(row.substr(0,12) === 'message:img:'){
                                    var timestamp = new Date().getTime();
                                    var imageLink = "/uploads/" + row.replace('message:img:','') + '?' +timestamp;
                                    $('#screenShotImageDashboard')[0].src=imageLink  ;
                                    $('#screenShotImage')[0].src=imageLink  ;

                                    localStorage['lastSreenShot'] = imageLink;
                                    $("#screenShotImageDashboard").show();
                                    $("#screenShotImage").show();
                                }
                                else{
                                    if(localKey !== '' && sys.length !== 0){
                                        if($('#localStoreKeyCb').is(':checked')) {
                                            localStorage['key_' + sys] = localKey
                                        }
                                    }
                                    if(localAccess !== ''){
                                        if($('#localStoreAccessCb').is(':checked')) {
                                            localStorage['access'] = localAccess
                                        }
                                    }
                                    $("#results_html").append(row + '<br>');
                                }
                            })
                            $('#results_html').animate({scrollTop: $('#results_html').get(0).scrollHeight}, 50);
                            $('#status-panel-body').animate({scrollTop: $('#status-panel-body').get(0).scrollHeight}, 50);
                        };

                        return xhr;
                    }
                }).done(function (e) {
                    updateResultsList(selectedNode);
                    loadDashboard();

                    $("#jstree_div").jstree("close_node", selectedNode);
                    $('#jstree_div').jstree(true).get_node(selectedNode, true).children('.jstree-anchor').focus();
                        $('#jstree_div').jstree(true).refresh(true);

                    //Enable tree
//                    $('#jstree_div li').each( function() {
//                        $("#jstree_div").jstree().enable_node(this.id);
//                    })

                }).fail(function (e) {

                    //Enable tree
//                    $('#jstree_div li').each( function() {
//                        $("#jstree_div").jstree().enable_node(this.id);
//                    })
                });

                $('#runModal').modal('toggle');
            });

            function runJob(id, sys){

                $('#runModal').modal('show');

                $("#idToBeRun").val(id);
                $("#sysToBeRun").val(sys);

                $.get('/ClosestRerunnableAn', { id: id }, function(data) {

                    const dataObj = JSON.parse(data);
                    $("#ClosestRerunnableAn").val(dataObj.id );
                    if (dataObj.id === ""){
                        $('#runClosestAnGroup').hide()
                    }else{
                        $('#runClosestAnGroup').show()
                    }

                    var storedKey ='';
                    var storedKeyName = '';

                    if (sys.length !== 0){
                        storedKey = localStorage['key_' + sys];
                        storedKeyName = localStorage['keyName_' + sys];
                        if(storedKey !== '' && typeof storedKey !== 'undefined'){
                            $('#localStoreKeyCb').prop('checked', true);
                            $('#keyList').html(storedKeyName) ;
                        }else{
                            $('#localStoreKeyCb').prop('checked', false);
                            $('#keyList').html('') ;
                        }
                    }

                    var storedAccess ='';
                    var storedAccessName = '';

                    if (sys.length !== 0){
                        storedAccess = localStorage['access'];
                        storedAccessName = localStorage['accessName'];
                        if(storedAccess !== '' && typeof storedAccess !== 'undefined'){
                            $('#localStoreAccessCb').prop('checked', true);
                            $('#accessList').html(storedAccessName) ;
                        }else{
                            $('#localStoreAccessCb').prop('checked', false);
                            $('#accessList').html('') ;
                        }
                    }
                })
            }

            //remove
            $("#remove_button, #remove_sys_button").click(function(event){
                $('#delModal').modal('show');
            });

            $("#delConfirmButton").on("click",function() {

                clearJobFields();
                clearSysFields();

                var mydata = {};
                mydata.ids = selectedNode;

                if( selectedTree === 'working'){
                    var tree = $('#jstree_div');
                }else{
                    var tree = $('#jslibtree_div');
                }
                var treeNode = tree.jstree(true).get_node(selectedNode);
                var childs = treeNode.children_d;
                var parent = treeNode.parent;
                var listOfIds = selectedNode;
                if (childs.length > 0 ){
                    listOfIds += ';' + childs.join(';');
                }
                mydata.ids = listOfIds

                if( selectedTree === 'working') {
                    mydata.tree = 'working'
                }else{
                    mydata.tree = pickedLib
                }

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/remove',
                    data: JSON.stringify(mydata),
                    selectedNode:selectedNode,
                    parent:parent
                }).done(function (data) {
                    //console.log(data);

                    tree.jstree(true).delete_node(this.selectedNode);
                    tree.jstree(true).select_node(this.parent, false);
                    tree.jstree(true).redraw(true);

                }).fail(function (e) {
                    console.log('remove refresh fail' );
                    console.log(e );
                    $('#jstree_div').jstree(true).refresh()
                });

                $('#delModal').modal('toggle');
            });

            //Clear build History
            $("#clear_sys_button").click(function(event){
                $('#clearModal').modal('show');
            });
            $("#clearConfirmButton").on("click",function() {

                var mydata = {};
                mydata.ids = selectedNode;

                $.ajax({
                    type: 'post',
                    contentType: "application/json",
                    url: '/clear',
                    data: JSON.stringify(mydata),
                    selectedNode:selectedNode,
                    parent:parent
                }).done(function (data) {
                    $('#jstree_div').jstree(true).refresh(true)

                }).fail(function (e) {
                    console.log('Clear history fail' );
                    console.log(e );
                    $('#jstree_div').jstree(true).refresh()
                });

                $('#clearModal').modal('toggle');
            });

            //edit
            $("#edit_button").click(function(event){
                editModeJob()
            });
            $("#edit_sys_button").click(function(event){
                editModeSys()
            });

            function editModeJob(){
                inputFields = $("#jobForm").find("input");
                inputFields.each(enableElement);
                inputFields = $("#jobForm").find("textarea");
                inputFields.each(enableElement);
                function enableElement(index, element) {
                    element.readOnly = false;
                }

                $(".templateTypeDropdownButton").attr("disabled" , false);

                $("#createdBy")[0].readOnly = true;
                $("#createdDate")[0].readOnly = true;
                $("#idDisp")[0].readOnly = true;

                $("#componentEnabledSlider").show();
                $("#promotedSlider").show();
                $("#rerunnableSlider").show();
                $("#sysFuncSlider").show();
                $("#runLocSlider").show();

                $("#edit_button").hide();
                $("#save_button").show();
                $("#remove_button").hide();
                $("#new_button").hide();
                $("#run_button").hide();
                $("#insertVariable").show();
                $("#newTemplateButton").show();
                $("#newFileButton").show();
                $("#delFileButton").show();
                $("#moveUp_button").hide();
                $("#moveDn_button").hide();

                var checkBoxes = $(".varCheckboxFileList")
                if (checkBoxes.exists()){
                    checkBoxes.show();
                }

                $.get('/fileList', { id: $('#id').val() }, function(data) {
                    $('#resourceFiles').val(data);
                    populateFileList(data, true);
                });

                scriptEditor.renderer.$cursorLayer.element.style.display = "";
                scriptEditor.setReadOnly(false);

                description.enable(true);
                $(".ql-toolbar").show(0.3)

                for(var inx in currentTemplatesArr){
                    currentTemplatesArr[inx].renderer.$cursorLayer.element.style.display = "";
                    currentTemplatesArr[inx].setReadOnly(false);
                }

                $(".ace_editor").removeClass("aceDisabled");

                $(".newCompVarBtn").show();
                $(".compVarDelButton").show();
                $(".compVarEditButton").show();
                $(".compVarEditValButton").hide()


            }
            function readModeJob(){
                inputFields = $("#jobForm").find("input");
                inputFields.each(disableElement);
                inputFields = $("#jobForm").find("textarea");
                inputFields.each(disableElement);

                $("#componentEnabledSlider").hide();
                $("#promotedSlider").hide();

                $("#rerunnableSlider").hide();
                $("#sysFuncSlider").hide();
                $("#runLocSlider").hide();

                function disableElement(index, element) {
                    element.readOnly = true;
                }

                $("#edit_button").show();
                $("#save_button").hide();
                $("#remove_button").show();
                $("#new_button").show();

                $(".templateTypeDropdownButton").attr("disabled" , true);

                $("#run_button").show();

                $('#insertVariable').hide();
                $("#newTemplateButton").hide();
                $("#newFileButton").hide();
                $("#delFileButton").hide();
                $("#moveUp_button").show();
                $("#moveDn_button").show();
                var checkBoxes = $(".varCheckboxFileList")
                if (checkBoxes.exists()){
                    checkBoxes.hide();
                }

                scriptEditor.renderer.$cursorLayer.element.style.display = "none";
                scriptEditor.setReadOnly(true);

                description.enable(false);
                $(".ql-toolbar").hide(0.3)

                setAceBuildCodeHeight();

                $(".newCompVarBtn").hide();
                $(".compVarDelButton").hide();
                $(".compVarEditButton").hide();
                $(".compVarEditValButton").hide()


            }

            function editModeSys(){
                inputFields = $("#sysForm").find("input");
                inputFields.each(enableElement);
                inputFields = $("#sysForm").find("textarea");
                inputFields.each(enableElement);
                function enableElement(index, element) {
                    element.readOnly = false;
                }
                $("#edit_sys_button").hide();
                $("#save_sys_button").show();
                $("#remove_sys_button").hide();
                $("#clear_sys_button").hide();
                $("#new_sys_button").hide();

                $(".newSysVarBtn").show();

                $('#iconPaste').show()

                sysDescription.enable(true);
                $(".ql-toolbar").show()

                $(".newSysVarBtn").show();
                $(".sysVarDelButton").show()
                $(".sysVarEditButton").show()
            }

            function readModeSys() {
                inputFields = $("#sysForm").find("input");
                inputFields.each(disableElement);
                inputFields = $("#sysForm").find("textarea");
                inputFields.each(disableElement);

                function disableElement(index, element) {
                    element.readOnly = true;
                }

                $("#edit_sys_button").show();
                $("#save_sys_button").hide();
                $("#remove_sys_button").show();
                $("#clear_sys_button").show();
                $("#new_sys_button").show();
                $('#iconPaste').hide();

                sysDescription.enable(false);
                $(".ql-toolbar").hide()

                $(".newSysVarBtn").hide();
                $(".sysVarDelButton").hide()
                $(".sysVarEditButton").hide()
//                $(".sysVarEditValButton").hide()
            }

            function readModeLibJob(){
                inputFields = $("#jobForm").find("input");
                inputFields.each(disableElement);
                inputFields = $("#jobForm").find("textarea");
                inputFields.each(disableElement);

                $("#componentEnabledSlider").hide();
                $("#promotedSlider").hide();
                $("#rerunnableSlider").hide();
                $("#sysFuncSlider").hide();
                $("#runLocSlider").hide();

                function disableElement(index, element) {
                    element.readOnly = true;
                }

                $("#edit_button").hide();
                $("#save_button").hide();
                $("#remove_button").show();
                $("#new_button").hide();
                $("#run_button").hide();
                $("#new_button").hide();
                $("#run_button").hide();
                $('#insertVariable').hide();
                $("#newTemplateButton").hide();
                $("#newFileButton").hide();
                $("#delFileButton").hide();
                $("#moveUp_button").hide();
                $("#moveDn_button").hide();
                var checkBoxes = $(".varCheckboxFileList")
                if (checkBoxes.exists()){
                    checkBoxes.hide();
                }
            }

            function readModeLibSys(){
                inputFields = $("#sysForm").find("input");
                inputFields.each(disableElement);
                inputFields = $("#sysForm").find("textarea");
                inputFields.each(disableElement);

                function disableElement(index, element) {
                    element.readOnly = true;
                }
                $("#edit_sys_button").hide();
                $("#save_sys_button").hide();
                $("#remove_sys_button").show();
                $("#clear_sys_button").hide();
                $("#new_sys_button").hide();
                $('#iconPaste').hide()
            }

            $("#edit_button").disabled = true;
            $("#save_button").disabled = true;
            $("#remove_button").disabled = true;
            $("#new_button").disabled = true;
            $("#run_button").disabled = true;
            $("#edit_sys_button").disabled = true;
            $("#save_sys_button").hide();
            $("#remove_sys_button").disabled = true;
            $("#clear_sys_button").disabled = true;
            $("#new_sys_button").disabled = true;

            $('#iconPaste').hide();
            $("#codes_btn").hide();

            $.fn.exists = function () {
                return this.length !== 0;
            }

            //expand & collapse textareas on comp/job form if triple-clicked
//            function setTripleClickTextareaEvents(){
//                var throttle = false;
//                $('#jobForm textarea').click( function (evt) {
//                    if (!throttle && evt.detail === 3) {
//                        if(this.rows < 15 ){
//                            $(this).css({ 'height' : ''});
//                            this.rows = 20;
//                        }else{
//                            $(this).css({ 'height' : ''});
//                            this.rows = 4;
//                        }
//                        throttle = true;
//                        setTimeout(function () {
//                            throttle = false;
//                        }, 1000);
//                    }
//                });
//            }

            //save Job
            $("#save_button").click(function(event){
                //console.log("submitting");
                var mydata = {};
                var id = $("#id").val();
                mydata.id = id;
                mydata.parent = $("#parent").val();
                mydata.name = $("#name").val();
                mydata.comType = $("#comType").val();

                var delta = description.getContents();
                mydata.description = delta;

                if($('#componentEnabled').is(':checked')) {
                    mydata.enabled = 1;
                }else{
                    mydata.enabled = 0;
                }
                if($('#promoted').is(':checked')) {
                    mydata.promoted = 1;
                }else{
                    mydata.promoted = 0;
                }
                if($('#rerunnable').is(':checked')) {
                    mydata.rerunnable = 1;
                }else{
                    mydata.rerunnable = 0;
                }
                if($('#sysFunc').is(':checked')) {
                    mydata.systemFunction = 1;
                }else{
                    mydata.systemFunction = 0;
                }
                if($('#runLoc').is(':checked')) {
                    mydata.runLocal = 1;
                }else{
                    mydata.runLocal = 0;
                }

                //find changed/new variables and add them to currentCompVarArr;
                for(var idn in currentCompVarArr){

                    if(currentCompVarArr[idn].changed){
                        var currentRowCntStr = currentCompVarArr[idn].changed;
                        delete currentCompVarArr[idn].changed;

                        if($("#newCompVarName"+currentRowCntStr).val().trim() !== "" ){
                            delete currentCompVarArr[idn];
                            var newVarsObj = {};
                            newVarsObj["private"] = $("#newCompVarPrivateInput"+currentRowCntStr)[0].checked ? true : false;
                            newVarsObj["type"] = $("#newCompVarTypeButton"+currentRowCntStr).text();
                            newVarsObj["value"] = $("#newCompVarValue"+currentRowCntStr).val();

                            currentCompVarArr[$("#newCompVarName"+currentRowCntStr).val()]  = newVarsObj;
                        }else{
                            delete currentCompVarArr[idn];
                        }
                    }
                }

                //push compVariables
                mydata.compVariables = currentCompVarArr;

                //push script
                mydata.script = scriptEditor.getValue();

                //push custom templates
                var templatesArr = [];
                var x=0;
                currentTemplatesArr.forEach(function(row){
                    var aceVal = currentTemplatesArr[x].getValue().trim()+"\n";
                    if(aceVal !== "\n" ){
                        var thisIndexStr = (x).toString();

                        templatesArr.push({c:aceVal, t:$("#templateType" + thisIndexStr).val()});
                    }
                    x++;
                })

                mydata.templates = {tempArr:templatesArr};

                mydata.text = $("#text").val();
                mydata.resourceFiles = $('#resourceFiles').val();

                $.ajax({
                    type: 'POST',
                    data: JSON.stringify(mydata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/save',
                    id: mydata.id,
                    success : function(result) {
                        var resultJSON = JSON.parse(result);
                        $("#id").val(resultJSON.id);
                        $("#text").val(resultJSON.text);

                        $('#jstree_div').jstree(true).refresh(true);
                    },
                    error : function(error) {
                        console.log(error)
                    }
                });
            });

            //save Sys
            $("#save_sys_button").click(function(event){
                //console.log("submitting");
                var mydata = {};
                mydata.id = $("#id").val();
                mydata.parent = $("#parent").val();
                mydata.name = $("#sysName").val();
                mydata.comType = $("#comType").val();

                var delta = sysDescription.getContents();
                mydata.description = delta;

                //mydata.variables = $("#sysVariables").val();
                //find changed/new variables and add them to currentSysVarArr;
                for(var idn in currentSysVarArr){

                    if(currentSysVarArr[idn].changed){
                        var currentRowCntStr = currentSysVarArr[idn].changed;
                        delete currentSysVarArr[idn].changed;

                        if($("#newSysVarName"+currentRowCntStr).val().trim() !== "" ){
                            delete currentSysVarArr[idn];
                            var newVarsObj = {};
                            newVarsObj["private"] = $("#newSysVarPrivateInput"+currentRowCntStr)[0].checked ? true : false;
                            newVarsObj["type"] = "";
                            newVarsObj["value"] = $("#newSysVarValue"+currentRowCntStr).val();

                            currentSysVarArr[$("#newSysVarName"+currentRowCntStr).val()]  = newVarsObj;
                        }else{
                            delete currentSysVarArr[idn];
                        }
                    }
                }

                //push sysVariables
                mydata.sysVariables = currentSysVarArr;

                mydata.text = $("#text").val();
                mydata.iconURL = $("#iconURL").val();

                $.ajax({
                    type: 'POST',
                    data: JSON.stringify(mydata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/save',
                    success : function(result) {
                        readModeSys();
                        var resultJSON = JSON.parse(result);
                        $("#id").val(resultJSON.id);
                        $("#text").val(resultJSON.text);
                        $('#jstree_div').jstree(true).refresh();
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            })

            //re-sort components
            $("#moveUp_button, #moveUp_sys_button").click(function(event){
                //console.log("up");
                $.get('/Move', { id: selectedNode, direction: 'up' }, function(data) {
                    var newPos = data.newPos;
                    var oldPos = data.oldPos;
                    var otherId = data.otherId;
                    if (otherId !== '') {
                        var nodeInst = $('#jstree_div').jstree(true).get_node(selectedNode);
                        var otherInst = $('#jstree_div').jstree(true).get_node(otherId);
                        nodeInst.original.sort = newPos;
                        otherInst.original.sort = oldPos;
                        var parent = $("#parent").val() == "#" ? "local" : $("#parent").val();
                        $('#jstree_div').jstree("move_node", nodeInst, parent, newPos);
                        $('#jstree_div').jstree("move_node", otherInst, parent, oldPos);
                    }
                })
            })

            $("#moveDn_button, #moveDn_sys_button").click(function(event){
                //console.log("down");
                $.get('/Move', { id: selectedNode, direction: 'down' }, function(data) {
                    var newPos = data.newPos;
                    var oldPos = data.oldPos;
                    var otherId = data.otherId;
                    if (otherId !== '') {
                        var nodeInst = $('#jstree_div').jstree(true).get_node(selectedNode);
                        var otherInst = $('#jstree_div').jstree(true).get_node(otherId);
                        nodeInst.original.sort = newPos;
                        otherInst.original.sort = oldPos;
                        var parent = $("#parent").val() == "#" ? "local" : $("#parent").val();
                        $('#jstree_div').jstree("move_node", nodeInst, parent, newPos);
                        $('#jstree_div').jstree("move_node", otherInst, parent, oldPos);
                    }
                })
            })

            //save id
            $("#changeIdSaveButton").on("click",function() {
                console.log("saving id");
                var myIddata = {};
                myIddata.newPassword = $("#newPassword").val();
                myIddata.newPasswordAgain = $("#newPasswordAgain").val();

                $.ajax({
                    type: 'POST',
                    data: JSON.stringify(myIddata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/saveId',
                    success : function(result) {

                            $("#saveProfileResults").text(result)

                        },
                    error : function(error) {
                        console.log(error)
                    }
                });
            });

            //Insert Var
            $("#insertVarButton").on("click",function() {

                var pasteText = '';
                var scopeRadioVal = $('input[name="insertScope"]:checked').val();
                var scopeCode;
                if (scopeRadioVal === 'Component'){scopeCode = 'c'};
                if (scopeRadioVal === 'Parent'){scopeCode = 'p'};
                if (scopeRadioVal === 'Ancestors'){scopeCode = 'a'};
                if (scopeRadioVal === 'Same System'){scopeCode = 's'};
                $('.varCheckbox:checkbox:checked').each(function () {
                    //var thisLink = (this.checked ? $(this).val() : "");
                    var thisLink = scopeCode + '.' + $(this).val().split('.')[1];
                    if (thisLink !== ""){
                        pasteText += '<%%' + thisLink + '%> '
                    }
                });

                $('#varModal').modal('toggle');
                //insertAtCaret('script', pasteText);
                scriptEditor.insert(pasteText);

            });

//            function insertAtCaret(areaId, text) {//http://stackoverflow.com/questions/1064089/inserting-a-text-where-cursor-is-using-javascript-jquery
//                var txtarea = document.getElementById(areaId);
//                if (!txtarea) { return; }
//
//                var scrollPos = txtarea.scrollTop;
//                var strPos = 0;
//                var br = ((txtarea.selectionStart || txtarea.selectionStart === '0') ?
//                    "ff" : (document.selection ? "ie" : false ) );
//                if (br === "ie") {
//                    txtarea.focus();
//                    var range = document.selection.createRange();
//                    range.moveStart ('character', -txtarea.value.length);
//                    strPos = range.text.length;
//                } else if (br === "ff") {
//                    strPos = txtarea.selectionStart;
//                }
//
//                var front = (txtarea.value).substring(0, strPos);
//                var back = (txtarea.value).substring(strPos, txtarea.value.length);
//                txtarea.value = front + text + back;
//                strPos = strPos + text.length;
//                if (br === "ie") {
//                    txtarea.focus();
//                    var ieRange = document.selection.createRange();
//                    ieRange.moveStart ('character', -txtarea.value.length);
//                    ieRange.moveStart ('character', strPos);
//                    ieRange.moveEnd ('character', 0);
//                    ieRange.select();
//                } else if (br === "ff") {
//                    txtarea.selectionStart = strPos;
//                    txtarea.selectionEnd = strPos;
//                    txtarea.focus();
//                }
//
//                txtarea.scrollTop = scrollPos;
//            };

            $('#varModal').on('shown.bs.modal', function() {
                getVariables("Parent");
                //console.log('got vars');
            });

            $( 'input[name="insertScope"]:radio' ).change(function(){
                getVariables(this.value);
            });

            //populates variables in the Insert Variables modal
            function getVariables(scope){
                var mydata = {};
                var scopeRadioVal = $('input[name="insertScope"]:checked').val();
                var html = "<div class='varBody'><table style='width: 100%;' aria-describedby='insertVarTable_info' role='grid' class='table table-striped table-bordered table-hover dataTable no-footer dtr-inline var_Table' id='insertVarTable' width='100%'>";
                html += "<thead>";
                html += "<tr role='row'>" +
                    "<th aria-label='Path: activate to sort column descending' aria-sort='ascending' style='width: 10%;' colspan='1' rowspan='1' aria-controls='insertVarTable' tabindex='0' class=''>Path</th>" +
                    "<th aria-label='Variable: activate to sort column ascending' style='width: 30%;' colspan='1' rowspan='1' aria-controls='insertVarTable' tabindex='0' class='sorting'>Variable</th>" +
                    "<th aria-label='Current Value: activate to sort column ascending' style='width: 60%;' colspan='1' rowspan='1' aria-controls='insertVarTable' tabindex='0' class='sorting'>Current Value</th>" +
                    "</tr>";
                html += "</thead>";
                html += "<tbody>";
               // $("#insertVarBody").html(html) ;

                if(scopeRadioVal === "Component" ){
                   // var compVarsArr = [];
                    for(var cVar in currentCompVarArr){
                    //    compVarsArr.push(currentCompVarArr[cVar])
                        var currentVal = currentCompVarArr[cVar].value;
                        html += "<tr role='row' class='gradeA odd'><td width = '10%'>"
                        html +="<input value='c."  + cVar + "' type='checkbox' class='varCheckbox pull-right'>";
                        html +="</td><td class='var_Table_td' width = '30%'>" + cVar + '</td>' + "<td class='var_Table_td' width = '60%'>" + currentVal  + '</td>'
                        html += "</tr>";
                       // $("#insertVarBody").append(html)

                    }

                    html += "</tbody></table></div>"
                    $("#insertVarBody").html(html)

                }else{
                    $.ajax({
                        type: 'get',
                        data: mydata,
                        dataType : "text",
                        insertScope : scopeRadioVal,
                        headers: {
                            "content-type": "application/json",
                        },
                        url: '/getVars',
                        success : function(result) {

                            var ResultsJson = JSON.parse(result);

                            if (this.insertScope == 'Parent'){
                                for (var key in ResultsJson) {
                                    if (ResultsJson.hasOwnProperty(key)) {
                                        if (ResultsJson[key].link !== $('#parent').val()) {
                                            delete ResultsJson[key]
                                        }
                                    }
                                }
                            }

                            if (this.insertScope === 'Ancestors'){
                                for (var key in ResultsJson) {
                                    if (ResultsJson.hasOwnProperty(key)) {
                                        var currentFtArr = $('#ft').val().split('/');
                                        if(jQuery.inArray(ResultsJson[key].link, currentFtArr) === -1){
                                            delete ResultsJson[key]
                                        }
                                    }
                                }
                            }

                            for (var key in ResultsJson) {
                                if (ResultsJson.hasOwnProperty(key)) {
                                    if(ResultsJson[key].path !== last_path){
                                        html += "<tr role='row' class='gradeA odd' >";
                                        html += "<td  class='var_Table_td ' colspan=3 >" + ResultsJson[key].path + '</td></tr>'
                                    }
                                    var last_path = ResultsJson[key].path;
                                    var currentVal = ResultsJson[key].row.trim().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
                                    html += "<tr role='row' class='gradeA odd'><td width = '10%'>"
                                    html +="<input value='" + ResultsJson[key].link + '.' + ResultsJson[key].varName + "' type='checkbox' class='varCheckbox pull-right'>";
                                    html +="</td><td class='var_Table_td' width = '30%'>" + ResultsJson[key].varName + '</td>' + "<td class='var_Table_td' width = '60%'>" + currentVal  + '</td>'
                                    html += "</tr>";
                                }
                            }
                            html += "</tbody></table></div>"
                            $("#insertVarBody").html(html) ;
                        },
                        error : function(error) {
                            console.log(error)
                        }
                    })
                }

            }

            //Updates the list of results when a component is selected
            function updateResultsList(targetID){
                $("#results-group").html("");
                $.get('/resultsList', { id: targetID }, function(data) {
                    var html = " <div class='panel panel-default'>";
                    html += "       <div class='panel-heading cust-panel-heading'><i class='fa  fa-calendar fa-fw'></i>Build History</div>";
                    html += "       <div class='panel-body results-list-body'>";
                    html += "           <div id='results-group' class='list-group results-group'>";

                    data.forEach(function(row){
                        var selectedFile = row.file;
                        var timeStr = selectedFile.split('_')[1];
                        var pass = selectedFile.split('_')[2];
                        var formattedTimeStr = formatTimeStr(timeStr);
                        html += "               <a href='#' class='list-group-item resultsListRow' data-ID='" + selectedFile+"'>";
                        if(pass == 'p'){
                            html += "               <i class='fa  fa-check fa-fw'></i>"  ;
                        }else{
                            html += "               <i class='fa  fa-times fa-fw'></i>"  ;
                        }
                        html += "               <span class='pull-right text-muted small'><em>" + formattedTimeStr + "</em>";
                        html += "               </span>";
                        html += "               </a>";
                    });

                    html += "</div></div></div>";

                    var prevHeight = $('#results-group').height();

                    $("#results-list").html(html);
                    $('#results-group').height(prevHeight);

                    $('.resultsListRow').on('click', function(){
                        var id = $(this).attr('data-ID');
                        $("#results_html").html('');
                        $("#results_codes").html('');
                        $('#messageSpan').html('');
                        $("#codes_btn").show();

                        $.get('/getResults', { id: id }, function(data) {
                            var results = JSON.parse(data);
                            //var htmlrows="";

                            results.forEach(function(row){

                                if (typeof row.results !== 'undefined') {
                                    var htmlRow = ansi_up.ansi_to_html(row.results);
                                    if (row.x === '') {
                                        $("#results_html").html($("#results_html").html() + htmlRow)
                                    } else {
                                        $("#results_html").html($("#results_html").html() + "var:" + row.x + ":" + htmlRow)
                                    }
                                }

                                if (typeof row.cc !== 'undefined'){
                                    if(row.cc !== ''){
                                        var coderows="";
                                        row.cc.data.forEach(function(ccode){
                                            coderows += ('0'+ccode.toString(16)).slice(-2)+ ' ';
                                        })
                                        $("#results_codes").html($("#results_codes").html() + coderows.replace(/0d (?!0a)/g,'0d<br/>').replace(/0d 0a /g,'0d 0a<br/>'));
                                    }
                                }

                                if (typeof row.m !== 'undefined') {
                                    $("#results_html").append("message:" + row.m + "<br/>")
                                    $("#results_codes").append("<br/>")
                                }
                            });

                            $("#results_codes").html( $("#results_codes").html() +'<br/><br/><br/>');
                            $("#results_html").addClass('result_history');
                            $("#results_html").removeClass('result_fresh');
                        });
                    });
                });
            };

            //sync result and codes scroll
            $('.scroller').scroll(function(e) {
                $('.scroller').scrollTop(e.target.scrollTop);
            });

            $("#new_button, #new_sys_button").on("click",function() {
                var mydata = {};
                mydata.id = "NewChild";
                mydata.parent = selectedNode;
                mydata.name = "New Component";
                mydata.description = "";
                mydata.script = "";
                mydata.text = "New Component";
                mydata.comType = "job";
                createNode(mydata);
            });

            $('.newSys').on('click', function(){
                var mydata = {};
                mydata.id = "NewSys";
                mydata.parent = '#';
                mydata.name = "New System";
                mydata.description = "";
                mydata.script = "";
                mydata.text = "new Sys";
                mydata.comType = "system";
                createNode(mydata);
            });

            //new custom template
            $('.newCust').on('click', function(){

                var nextValidIndex = 0;

                //reuse the first ace instance where isValid not equ true
                while(currentTemplatesArr[nextValidIndex]){
                    if( ! currentTemplatesArr[nextValidIndex].isValid){
                        break;
                    }
                    nextValidIndex++;
                }
                if (nextValidIndex > 99){
                    alert("error: too many templates");
                }else{

                    if(!currentTemplatesArr[nextValidIndex]){
                        var inHtml = authorTemplateHTML(nextValidIndex);

                        $('#custTemplates').append(inHtml);

                        currentTemplatesArr.push(ace.edit("template"+nextValidIndex.toString()));

                        currentTemplatesArr[currentTemplatesArr.length-1].session.setMode("ace/mode/text");
                        document.getElementById("template"+nextValidIndex.toString()).style.fontSize='14px';

                        loadjobTempTypeDropdown(nextValidIndex);
                        setAceStyle(currentStyleName);

                        $("#templateWindowMax"+nextValidIndex.toString()).click( function(){
                            var inx = parseInt($(this).attr('data-inx'), 10);
                            setTempAceHeight(inx, "max")
                        })
                        $("#templateWindowMin"+nextValidIndex.toString()).click( function(){
                            var inx = parseInt($(this).attr('data-inx'), 10);
                            setTempAceHeight(inx, "min")
                        })
                    }else{
                        $("#templateBlock" + nextValidIndex.toString()).show();
                    }


                }
            });

            function authorTemplateHTML(x){
                var inHtml = "<div class='form-group' id='templateBlock"+x.toString()+"'>";
                inHtml += "     <div>";
                inHtml += "         <label class='build-label'>Template "+ (x > 0 ? (x + 1).toString() : "") +"</label>";
                inHtml += "         <input type='hidden' id='templateType"+x.toString()+"'>"
                inHtml += "         <button class='dropdown-toggle templateTypeDropdownButton' type='button' id='dropdownTemplateTypeButton"+x.toString()+"' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'>"
                inHtml += "Pick..."
                inHtml += "         </button>"
                inHtml += "     <span class='templateWindowSizeButtons'>" +
                    "<a href='#' id='templateWindowMin"+x.toString() + "' data-inx='"+x.toString()+"'><i class=' fa fa-window-minimize fa-fw'></i></a>" +
                    "<a href='#' id='templateWindowMax"+x.toString() + "' data-inx='"+x.toString()+"'><i class=' fa fa-window-maximize fa-fw'></i></a>" +
                    "</span>";
                inHtml += "     <div id='dropdownTemplateTypeMenu"+x.toString()+"' class='dropdown-menu dropdownTemplateTypeMenu' aria-labelledby='dropdownTemplateTypeButton"+x.toString()+"'></div>"
                inHtml += "     </div>";
                inHtml += "     <div class='card templateCard' id='templateCard"+ x.toString() +"'>"
                inHtml += "         <div id='template"+x.toString()+"' class='jobCodeEditor'></div>"
                inHtml += "     </div>"
                inHtml += "</div>";
                return(inHtml);
            }

            //Default set codes window to min
//            min_codes_window();
            $('#results_html').on('click', function(){
               // setEndOfContenteditable($('#results_html').get(0))
            })



//            function min_codes_window(){
//                var container = $('#rowContainer');
//                setWindowHeight(container.height()- 30 , container);
//                currentHeight = container.height()- 30
//                currentRatio = currentHeight / container.height();
//            }

            //min codes window
            $('.codes_btn_min').on('click', function(){
                var container = $('#rowContainer');
                setWindowHeight(container.height()- 25 , container);
                currentHeight = container.height()- 25
                currentRatio = currentHeight / container.height();
            });

            //max codes window
            $('.codes_btn_max').on('click', function(){
                var container = $('#rowContainer');
                setWindowHeight(container.height()/2 , container);
                currentHeight = container.height() / 2
                currentRatio = currentHeight / container.height();
            });

            //click show code button
            $('.codes_btn').on('click', function(){
                if($("#results_codes").is(":visible")){
                    hideCodes()
                }else{
                    showCodes()
                }
            });

            function hideCodes(){
                $("#results_codes").hide();
                $("#results_html").css("width", "100%");
                $("#results_html").css("overflow-y", "auto");
            }
            function showCodes(){
                $("#results_codes").show();
                $("#results_html").css("width", "50%");
                $("#results_html").css("overflow-y", "hidden");
            }
            hideCodes();

            //Define the current selected node for several functions
            var selectedNode = "#"; //default Root

            //Define the current selected tree for several functions
            var selectedTree = "working"; //default 'working' (aka local aka dashboard) tree

            //Create new component or system
            function createNode(mydata) {
                $.ajax({
                    type: 'POST',
                    data: JSON.stringify(mydata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/save',
                    success : function(result) {
                        $('#jstree_div').jstree(true).open_node(mydata.parent, false);
                        var resultJSON = JSON.parse(result);
                        var node = { "id" : resultJSON.id };
                        node.name = resultJSON.name;
                        node.text = resultJSON.text;
                        node.comType = resultJSON.comType;

                        $('#jstree_div').jstree('create_node', resultJSON.parent, node, 'last', function(){

                            var newNode = $("#jstree_div").jstree(true).get_node(resultJSON.id);

                            $('#jstree_div' + " li[id=" + resultJSON.id + "] a").click();
                            $('#jstree_div').jstree(true).refresh(true);
                        });
                    },
                    error : function(error) {
                        console.log(error)
                    }
                });
            }

            var ansi_up = new AnsiUp;
            var isResizingHeight = false;
            var isResizingWidth = false;
            var isResizingLibWidth = false;
            var treeWidth = 240;
            var libTreeWidth = 240;
            var container = $('#rowContainer');
            var currentHeight = container.height()- 30   //container.height() * .75; //default height
            currentHeight += currentHeight < 10 ? 10 - currentHeight : 0;
            currentRatio = currentHeight / container.height();

            //drag height & width events
            $(function () {
                var heightHandle = $('#rowHandle');
                var widthHandle = $('#treePanelHandle');
                var libWidthHandle = $('#libTreePanelHandle');

                heightHandle.on('mousedown', function (e) {
                    isResizingHeight = true;
                    //lastDownY = e.clientY;
                });
                widthHandle.on('mousedown', function (e) {
                    isResizingWidth = true;
                });
                libWidthHandle.on('mousedown', function (e) {
                    isResizingLibWidth = true;
                });

                $(window).on('resize', function(){
                    var container = $('#rowContainer');
                    if(bottomHiddenFlag === true){
                        setWindowHeight(container.height() , container);
                    }else{
                        setWindowHeight(container.height() * currentRatio , container);
                    }
                    setFormColWidth();
                });

                $(document).on('mousemove', function (e) {
                    if (!isResizingHeight && !isResizingWidth && !isResizingLibWidth)
                        return;
                    if(isResizingHeight){
                        e.preventDefault();
                        var topHeight = e.clientY;
                        currentHeight = e.clientY;
                        currentHeight += currentHeight < 10 ? 10 - currentHeight : 0
                        currentRatio = currentHeight / container.height();
                        setWindowHeight(topHeight-5, container);
                    }

                    if(isResizingLibWidth){
                        e.preventDefault();
                        var leftWidth = e.clientX;
                        setLibWindowWidth(leftWidth , container);
                    }

                    if(isResizingWidth){
                        e.preventDefault();
                        var leftWidth = e.clientX;
                        setWindowWidth(leftWidth - libTreeWidth - 2, container);
                    }


                }).on('mouseup', function (e) {
                    isResizingHeight = false;
                    isResizingWidth = false;
                    isResizingLibWidth = false;
                });
            });

            function setWindowHeight(topHeight, container){
                if (topHeight > (container.height() - 33)){
                    topHeight = container.height() - 33
                }

                 if (topHeight < (container.height() * .2)){
                     topHeight = container.height() * .2
                 }

                 if(!bottomHiddenFlag){
                     $("#jstree_div").height(topHeight - (28 + 30));
                     $("#jslibtree_div").height(topHeight - (28 + 29));

                     $("#treePanelHandle").height(topHeight - 28);
                     $("#libTreePanelHandle").height(topHeight - 28);

                     $("#job-form-panel").height(topHeight - (56 + 33 + 24));
                     $("#sys-form-panel").height(topHeight - (56 + 33 + 24));
                     $("#dashboard").height(topHeight - 33);
                     $("#leftResultsCol").height(topHeight - (15 + 33 + 38));
                     $("#build-results-row").height(topHeight - (15 + 33 + 21));


                     $('#results_html').height(container.height() - topHeight - (34 + 15));
                     $('#results_codes').height(container.height() - topHeight - (34 + 15));
                     $('#results-group').height(container.height() - topHeight - (34 + 15));

                     //$(#'dashListCol').
                 }else{
                     $("#jstree_div").height(topHeight -11);
                     $("#jslibtree_div").height(topHeight -10 );

                     $("#treePanelHandle").height(topHeight +10 );
                     $("#libTreePanelHandle").height(topHeight +10);

                     $("#rightCol").height(topHeight - 24);
                     $("#dashboard").height(topHeight);
                     var topRowHeight = $("#dashBoardTopRow").height();
                     $("tbody.dashTbody").height(container.height() - topRowHeight - 115)
                     $("#job-form-panel").height(topHeight -80 );
                     $("#sys-form-panel").height(topHeight -80 );

                 }

            }

            function setLibWindowWidth(leftWidth, container){
                if (leftWidth < (container.width() * .8) && leftWidth > 19 ){
                    libTreeWidth = leftWidth;

                    $("#leftLibCol").css('width',leftWidth  - 2);
                    $("#leftCol").css('left',libTreeWidth );
                    $("#libTreePanel").css('width',leftWidth - 7);

                    setFormColWidth();
                }
            }
            setLibWindowWidth(20, container);

            function setWindowWidth(leftWidth, container){
                if (leftWidth < (container.width() * .8) && leftWidth > 128 ){
                    treeWidth = leftWidth;
                    $("#leftCol").css('width',treeWidth - 2 );
                    $("#treePanel").css('width',treeWidth - 7);

                    setFormColWidth();
                    localStorage['locTreeWidth'] = JSON.stringify({width:leftWidth});
                }
            }
            if(!localStorage['locTreeWidth']){
                setWindowWidth(250, container);
            }
            setWindowWidth(JSON.parse(localStorage['locTreeWidth']).width, container);

            function setFormColWidth(){
                $("#rightCol").css("left", treeWidth + libTreeWidth + 0);
                $("#screenShotCol").css("left", treeWidth + libTreeWidth + 1);
                $("#rightCol").css('width',$(window).width() - (treeWidth + libTreeWidth) -5 );
            }

            //Resource file management
            function populateFileList(data, editMode){
                var fileNamesHtmlHeader = "<div><table style='width: 50%;'  role='grid' class='table table-striped table-bordered table-hover dataTable no-footer dtr-inline var_Table' id='dataTables-fileList' width='50%'><tbody>";
                var fileNamesHtmlFooter = "</tbody></table></div>";
                var fileNamesHtml = "";
                var fileNamesHtmlEmpty = "<tr role='row' class='gradeA odd'><td width = '10%'><br/></td></tr>";
                try{
                    var fList = JSON.parse(data);
                    if(fList.length > 0){
                        fList.forEach(function(fName){
                            fileNamesHtml += "<tr role='row' class='gradeA odd'><td width = '10%'>"
                            fileNamesHtml +="<span class='varCheckboxFileList'><input class='CheckboxFileList' value='" + fName.name + "' type='checkbox'/></span>";
                            fileNamesHtml += "<a class='fileListLink' href='/uploads/" + $('#id').val() + "/" + fName.name + "' target='_new'>" + fName.name + "</a>";
                            fileNamesHtml +="</td></tr>";
                        })
                    }else{
                        fileNamesHtml += fileNamesHtmlEmpty;
                    }
                    $('#fileList').html(fileNamesHtmlHeader + fileNamesHtml + fileNamesHtmlFooter);
                    if(!editMode){
                        $(".varCheckboxFileList").hide();
                    }

                } catch (e) {
                    $('#fileList').html(fileNamesHtmlHeader + fileNamesHtmlEmpty + fileNamesHtmlFooter);
                }
            }

            function populateLibFileList(data){
                var fileNamesHtmlHeader = "<div><table style='width: 50%;'  role='grid' class='table table-striped table-bordered table-hover dataTable no-footer dtr-inline var_Table' id='dataTables-fileList' width='50%'><tbody>";
                var fileNamesHtmlFooter = "</tbody></table></div>";
                var fileNamesHtml = "";
                var fileNamesHtmlEmpty = "<tr role='row' class='gradeA odd'><td width = '10%'><br/></td></tr>";
                try{
                    var fList = JSON.parse(data);
                    if(fList.length > 0){
                        fList.forEach(function(fName){
                            fileNamesHtml += "<tr role='row' class='gradeA odd'><td width = '10%'>"
                            fileNamesHtml += "<a href='/library/" + pickedLib + "/uploads/" + $('#id').val() + "/" + fName.name + "' target='_new'>" + fName.name + "</a>";
                            fileNamesHtml +="</td></tr>";
                        })
                    }else{
                        fileNamesHtml += fileNamesHtmlEmpty;
                    }
                    $('#fileList').html(fileNamesHtmlHeader + fileNamesHtml + fileNamesHtmlFooter);
                } catch (e) {
                    $('#fileList').html(fileNamesHtmlHeader + fileNamesHtmlEmpty + fileNamesHtmlFooter);
                }
            }

            $("#fileUpload").hide();
            $('.newFile').on('click', function(){
                //  $("#fileUpload").show();
                $('#upload-input').click();
                $('.progress-bar').text('0%');
                $('.progress-bar').width('0%');
            });
            $("#delFileButton").on('click', function(){
                var filesString ='';
                var id=$("#id").val();
                $('.CheckboxFileList:checkbox:checked').each(function () {
                    filesString +=  $(this).val() + ';';
                });
                var mydata = {id:id, files:filesString};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/delFiles',
                    success : function(data) {
                        $('#resourceFiles').val(data);
                        populateFileList(data, true);
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            });
            $('#upload-input').on('change', function(){

                var files = $(this).get(0).files;
                if (files.length > 0){
                    var formData = new FormData();
                    formData.append('id', $('#id').val());

                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];

                        // add the files to formData object for the data payload
                        formData.append('uploads[]', file, file.name);
                    }
                    $.ajax({
                        url: '/upload',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function(data){
                            //console.log('upload successful!\n' + data);
                            $('#resourceFiles').val(data);
                            populateFileList(data, true);
                            $("#fileUpload").hide();
                        },
                        xhr: function() {
                            // create an XMLHttpRequest
                            var xhr = new XMLHttpRequest();

                            // listen to the 'progress' event
                            xhr.upload.addEventListener('progress', function(evt) {

                                if (evt.lengthComputable) {
                                    $("#fileUpload").show();
                                    // calculate the percentage of upload completed
                                    var percentComplete = evt.loaded / evt.total;
                                    percentComplete = parseInt(percentComplete * 100);

                                    // update the Bootstrap progress bar with the new percentage
                                    $('.progress-bar').text(percentComplete + '%');
                                    $('.progress-bar').width(percentComplete + '%');

                                    // once the upload reaches 100%, set the progress bar text to done
                                    if (percentComplete === 100) {
                                        $('.progress-bar').html('Done');
                                    }
                                }

                            }, false);

                            return xhr;
                        }
                    });
                }
            });

            //pem Key file management
            $('#newKeyButton').on('click', function(){
                $('#upload-key').click();
            });
            $('#upload-key').on('change', function() {
                if($(this)[0].files[0].name !== ""){
                    $('#keyList').html($(this)[0].files[0].name);
                }
            });

            //csv Key file management
            $('#newAccessButton').on('click', function(){
                $('#upload-access').click();
            });
            $('#upload-access').on('change', function() {
                if($(this)[0].files[0].name !== ""){
                    $('#accessList').html($(this)[0].files[0].name);
                }
            });

            //settings Style Top Page Pick event
            $('.stylePickTop').on('click', function(evt){
                //evt.preventDefault();
                var pickedStyle = $(this).attr('data-ID');
                setStyle(pickedStyle);
            });

            //settings - set time out button event
            $('#set_timeout').on('click', function(){
                const timeout = $("#timeout").val();
                setTimeout(timeout);
            });

            function setTimeout(timeout){
                var mydata = {};
                mydata.timeout = timeout;
                $.ajax({
                    type: 'post',
                    data: JSON.stringify(mydata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/setTimeout',
                    success : function(result) {
                        $("#set_timeout_results")[0].innerText = result;
                    },
                    error : function(error) {
                        $("#set_timeout_results")[0].innerText = "Error setting timeout";
                        console.log(error)
                    }
                });
            }

            $('#set_noClientTimeout').on('click', function(){
                const noClientTimeout = $("#noClientTimeout").val();
                setnoClientTimeout(noClientTimeout);
            });

            function setnoClientTimeout(noClientTimeout){
                var mydata = {};
                mydata.noClientTimeout = noClientTimeout;
                $.ajax({
                    type: 'post',
                    data: JSON.stringify(mydata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/setnoClientTimeout',
                    success : function(result) {
                        $("#set_noClientTimeout_results")[0].innerText = result;
                    },
                    error : function(error) {
                        $("#set_noClientTimeout_results")[0].innerText = "Error setting no client timeout";
                        console.log(error)
                    }
                });
            }

            //settings - set username button event
            $('#set_username').on('click', function(){
                const username = $("#username").val();
                if(username.trim() === ""){
                    alert("Enter your preferred username");
                }else{
                    setUsername(username.trim());
                }
            });
            function setUsername(username){
                var mydata = {};
                mydata.username = username
                $.ajax({
                    type: 'post',
                    data: JSON.stringify(mydata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/setUsername',
                    success : function(result) {
                        $("#set_username_results")[0].innerText = result;
                    },
                    error : function(error) {
                        $("#set_username_results")[0].innerText = "Error setting username";
                        console.log(error)
                    }
                });
            }

            //Settings - populate fields on modal open
            $('#setupModal').on('shown.bs.modal', function() {
                var mydata = {};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/settings',
                    success : function(data) {

                        const respJson = JSON.parse(data);

                        //set the timeout value
                        if(respJson.hasOwnProperty("timeout")){
                            $("#timeout").val(respJson.timeout);
                        }

                        //set the noClientTimeout value
                        if(respJson.hasOwnProperty("noClientTimeout")){
                            $("#noClientTimeout").val(respJson.noClientTimeout);
                        }


                        //set the username value
                        if(respJson.hasOwnProperty("username")){
                            $("#username").val(respJson.username);
                        }
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })

            });

            //Set to top style radio to the value in settings
            function setTopPageStyle(){
                var mydata = {};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/settings',
                    success : function(data) {

                        const respJson = JSON.parse(data);

                        //set the style radion btn
                        if(respJson.hasOwnProperty("currentStyle")){
                            if(respJson.currentStyle === "dark"){
                                $("#darkStyleRadioTop").prop('checked',true);
                            }else{
                                $("#defaultStyleRadioTop").prop('checked',true);
                            }
                            currentStyleName = respJson.currentStyle;
                            setAceStyle(currentStyleName)
                        }
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            };
            setTopPageStyle();

            //signal server to set 'firstRun' flag in settings
            function setFirstRun(){
                var mydata = {};
                mydata.firstRun = true;

                $.ajax({
                    type: 'post',
                    data: JSON.stringify(mydata),
                    dataType : "text",
                    headers: {
                        "content-type": "application/json",
                    },
                    url: '/firstRun',
                    success : function(result) {
                        console.log(result);
                        firstRunTasks(result);
                    },
                    error : function(error) {
                       console.log(error)
                    }
                });
            }

            //Open Welcome modal if first run
            function openWelcome(){
                var mydata = {};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/settings',
                    success : function(data) {

                        const respJson = JSON.parse(data);

                        if (respJson.firstRun === 1){

                        }else{
                            $("#welcomeModal").modal();
                            setFirstRun();
                        }
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            };

            function firstRunTasks(result){
                $("#sysScreen").hide();
                $("#jobScreen").hide();
                $('#componentTabs').hide();
            };

            openWelcome();

            $("#search-icon").on("click",function(){
                $('#jstree_div').jstree(true).refresh(true);
            //    $('#jstree_div').jstree(true).redraw(true);
            });
            $("#searchInput").on('keyup', function (e) {
                if (e.keyCode == 13) {
                    $('#jstree_div').jstree(true).refresh(true);
                }
            });

            $("#dashBtn").addClass("active");
            $("#componentsRow").hide();
            loadDashboard();
            //hideBottom();

            //Main menu selections
            $("#dashBtn").on("click",function(){
                localStorage["topMenuViewSelected"] = "Dashboard"
                loadDashboard();
                $("#componentsRow").hide(200);
                $("#dashRow").show(200, function(){
                    $("#dashBtn").addClass("active");
                    $("#componentsBtn").removeClass("active");
                    hideBottom();
                    bottomHiddenFlag=true;

                });
            });

            $("#componentsBtn").on("click",function(){
                localStorage["topMenuViewSelected"] = "Components"
                $("#componentsRow").show(200);
                $("#dashRow").hide(200, function(){
                    $("#dashBtn").removeClass("active");
                    $("#componentsBtn").addClass("active");
                    showBottom();
                    bottomHiddenFlag=false;
                    $('#jstree_div').jstree(true).get_node(selectedNode, true).children('.jstree-anchor').focus();
                });
            });

            if(localStorage["topMenuViewSelected"]){
                if(localStorage["topMenuViewSelected"] === "Components"){
                    $("#componentsBtn").click();
                }else{
                    $("#dashBtn").click();
                }

            }

            var statusPanel = $("#resultsStatus")[0].innerHTML;
            if(statusPanel === ""){$("#status-panel-body").hide()};

            function loadjobTempTypeDropdown(templateNumber){
                var mydata = {};
                $.ajax({
                    type: 'get',
                    data: mydata,
                    templateNumber:templateNumber,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/getTempTypes',
                    success : function(data) {
                        var indexNumStr = this.templateNumber.toString();

                        const types = JSON.parse(data).types;
                       // var pCompHtml = "";
                        var dropDownListHtml = "";

                        var y = 0;
                        for (var aType in types) {
                                var thisType = types[aType];
                                dropDownListHtml += "<div><a id='templateTypeDropdownItem"+indexNumStr+y.toString() + "'  class='dropdown-item templateTypeDropdownItem' href='#' data-type='"+ thisType +"' data-index='"+ indexNumStr +"'>" + thisType +" </a></div>"
                        }
                        $("#dropdownTemplateTypeMenu"+indexNumStr)[0].innerHTML = dropDownListHtml;

                        $(".templateTypeDropdownItem").on('click', function(){
                            var atype = $(this).attr('data-type');
                            var templateNumber = $(this).attr('data-index');

                            $("#dropdownTemplateTypeButton"+indexNumStr)[0].innerHTML = atype;
                            $("#templateType"+indexNumStr).val(atype);
                            currentTemplatesArr[parseInt(templateNumber, 10)].session.setMode("ace/mode/" + atype);
                        });

                    },
                    error : function(error) {
                        console.log(error)
                    }
                })
            }

            //glabal array to hold all ace.edit templates
            var currentTemplatesArr = [];

            //enable Ace editor Build Script
            var scriptEditor = ace.edit("script");
            scriptEditor.setTheme("ace/theme/clouds");
            scriptEditor.session.setMode("ace/mode/sh");
            document.getElementById('script').style.fontSize='14px';

            function setAceBuildCodeHeight(){
                let newHeight;

                newHeight = scriptEditor.getSession().getScreenLength() * scriptEditor.renderer.lineHeight + 17; //+ (scriptEditor.renderer.scrollBar.getWidth() * 2);
                newHeight = newHeight < 80 ? 80 : newHeight;
                newHeight = newHeight > 1200 ? 1200 : newHeight;
                $(".codeCard").height(newHeight);
                scriptEditor.resize();

            }

            function setTempAceHeight(tempNum, level){
                if(level == "max"){
                    newHeight = currentTemplatesArr[tempNum].getSession().getScreenLength() * currentTemplatesArr[tempNum].renderer.lineHeight + currentTemplatesArr[tempNum].renderer.scrollBar.getWidth();
                    newHeight = newHeight < 40 ? 40 : newHeight;
                    newHeight = newHeight > 800 ? 800 : newHeight;
                }else{
                    newHeight = 40;
                }

                $("#templateCard"+ tempNum.toString()).height(newHeight);
                currentTemplatesArr[tempNum].resize();
            }

            var currentStyleName = ""
            function setAceStyle(styleName){
                if(styleName === "dark"){
                    //$("#darkStyleRadioTop").prop('checked',true);
                    scriptEditor.setTheme("ace/theme/twilight");
                    //templateEditor.setTheme("ace/theme/twilight");
                    for(var inx in currentTemplatesArr){
                        currentTemplatesArr[inx].setTheme("ace/theme/twilight");
                    }
                }else{
                    scriptEditor.setTheme("ace/theme/clouds");
                    for(var inx in currentTemplatesArr){
                        currentTemplatesArr[inx].setTheme("ace/theme/clouds");
                    }
                }
            }

            //Apply Style
            function setStyle(name){
                const styleName = name;

                currentStyleName = styleName;
                setAceStyle(styleName);

                var mydata = {styleName:styleName};

                $.ajax({
                    type: 'get',
                    data: mydata,
                    dataType : "text",
                    headers: {
                        "content-type": "application/json"
                    },
                    url: '/getStyle',
                    success : function(data) {

                        var sheet;
                        if (lastStyleSheet){
                            sheet = lastStyleSheet;
                        }else{
                            sheet = document.createElement('style');
                            document.body.appendChild(sheet);
                        }
                        lastStyleSheet = sheet;

                        const respJson = JSON.parse(data);
                        cssUnsortTxt = respJson.css;
                        var cssArr= cssUnsortTxt.split("}")
                        shuffleArray(cssArr);
                        cssTxt = cssArr.join("}");

                        loadCssParts( 0, lastStyleSheet);
                    },
                    error : function(error) {
                        console.log(error)
                    }
                })

            }
            setStyle('');

            $('.jobCard').on('shown.bs.collapse', function () {
                setAceBuildCodeHeight();
            })


            //glabal array to hold all dashboard promoted description quill instances
            var currentPromotedDashDescriptionsArr = [];

            var sysDescription = new Quill('#sysDescription', {
                theme: 'snow'
            });
            var description = new Quill('#description', {
                theme: 'snow'
            });

            //Allow arrow key navigation on trees in focus
            document.onkeydown = function(e) {
                var activeElement = document.activeElement;
                //if current focus is a tree
                if(activeElement.id.includes("_anchor")){

                    //find which tree is focused
                    var currentTree;
                    while (activeElement) {
                        if(  activeElement.id == "jstree_div"){
                            currentTree = $('#jstree_div');
                            break
                        }
                        if(  activeElement.id == "jslibtree_div"){
                            currentTree = $('#jslibtree_div');
                            break
                        }
                        activeElement = activeElement.parentNode;
                    }
                    //down selects next node, up selects previous, right opens node, left closes it.
                    switch (e.keyCode) {
                        case 37:
                            //alert('left');
                            currentTree.jstree('close_node',$("#id").val());
                            currentTree.jstree(true).get_node($("#id").val(), true).children('.jstree-anchor').focus();
                            break;
                        case 38:
                            //alert('up');
                            var targetNode =  currentTree.jstree(true).get_prev_dom($("#id").val());
                            if(targetNode.length > 0){
                                currentTree.jstree(true).get_node(targetNode, true).children('.jstree-anchor').focus();
                                currentTree.jstree("deselect_all");
                                currentTree.jstree('select_node',targetNode);
                            }
                            break;
                        case 39:
                            // alert('right');
                            currentTree.jstree('open_node',$("#id").val());
                            currentTree.jstree(true).get_node($("#id").val(), true).children('.jstree-anchor').focus();
                            break;
                        case 40:
                            //alert('down');
                            var targetNode =  currentTree.jstree(true).get_next_dom($("#id").val());
                            if(targetNode.length > 0){
                                currentTree.jstree("deselect_all");
                                currentTree.jstree('select_node',targetNode);
                                currentTree.jstree(true).get_node(targetNode, true).children('.jstree-anchor').focus();
                                break;
                            }
                    }
                }
            };



        }); //-------------------------------------------   doc ready -------------------------------------------

        /**
         * Randomize array element order in-place.
         * Using Durstenfeld shuffle algorithm. https://stackoverflow.com/a/12646864
         */
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        var cssTxt="";
        var cssUnsortTxt="";
        //var sheetPart = 0;
        function loadCssParts( part, sheet){

            var cssTxtPart = cssTxt.split("}")[part];
            var totRows = cssTxt.split("}").length;
            if( totRows > part){
                sheet.innerHTML += cssTxtPart + "}";
                setTimeout('loadCssParts('+(part+1).toString()+', lastStyleSheet)', 500/totRows);
            }else{
                sheet.innerHTML = "";
                sheet.innerHTML = cssUnsortTxt
            }
        }

        function formatTimeStr(timeStr){
            var timeStrAr = timeStr.split("-");
            if (timeStrAr.length != 6 ){
                return "";
            }else{
                var timeDate = new Date(timeStrAr[0], timeStrAr[1]-1, timeStrAr[2], timeStrAr[3], timeStrAr[4], timeStrAr[5]);
                if ( !(timeDate instanceof Date && !isNaN(timeDate.valueOf())) ){return ""}else{
                    var newStr =  timeDate.toUTCString()  ;
                    return(newStr);
                }
            }
        }

//        function setEndOfContenteditable(contentEditableElement) {
//            var range,selection;
//            if(document.createRange)//Firefox, Chrome, Opera, Safari, IE 9+
//            {
//                range = document.createRange();//Create a range (a range is a like the selection but invisible)
//                range.selectNodeContents(contentEditableElement);//Select the entire contents of the element with the range
//                range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start
//                selection = window.getSelection();//get the selection object (allows you to change selection)
//                selection.removeAllRanges();//remove any selections already made
//                selection.addRange(range);//make the range you have just created the visible selection
//            }
//            else if(document.selection)//IE 8 and lower
//            {
//                range = document.body.createTextRange();//Create a range (a range is a like the selection but invisible)
//                range.moveToElementText(contentEditableElement);//Select the entire contents of the element with the range
//                range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start
//                range.select();//Select the range (make it the visible selection
//            }
//        }

//        $(document).on('click', '.BuildCode-Heading', function(e){
//            var $this = $(this);
//            if(!$this.hasClass('panel-collapsed')) {
//                $this.parents('.codePanel').find('.panel-body').slideUp();
//                $this.addClass('panel-collapsed');
//                $this.find('i').removeClass('glyphicon-chevron-down').addClass('glyphicon-chevron-up');
//            } else {
//                $this.parents('.codePanel').find('.panel-body').slideDown();
//                $this.removeClass('panel-collapsed');
//                $this.find('i').removeClass('glyphicon-chevron-up').addClass('glyphicon-chevron-down');
//            }
//        })
//
//        $(document).on('click', '.BuildTest-Heading', function(e){
//            var $this = $(this);
//            if(!$this.hasClass('panel-collapsed')) {
//                $this.parents('.testPanel').find('.panel-body').slideUp();
//                $this.addClass('panel-collapsed');
//                $this.find('i').removeClass('glyphicon-chevron-down').addClass('glyphicon-chevron-up');
//            } else {
//                $this.parents('.testPanel').find('.panel-body').slideDown();
//                $this.removeClass('panel-collapsed');
//                $this.find('i').removeClass('glyphicon-chevron-up').addClass('glyphicon-chevron-down');
//            }
//        })
//
//        $(document).on('click', '.BuildMeta-Heading', function(e){
//            var $this = $(this);
//            if(!$this.hasClass('panel-collapsed')) {
//                $this.parents('.metaPanel').find('.panel-body').slideUp();
//                $this.addClass('panel-collapsed');
//                $this.find('i').removeClass('glyphicon-chevron-down').addClass('glyphicon-chevron-up');
//            } else {
//                $this.parents('.metaPanel').find('.panel-body').slideDown();
//                $this.removeClass('panel-collapsed');
//                $this.find('i').removeClass('glyphicon-chevron-up').addClass('glyphicon-chevron-down');
//            }
//        })
//
//        $(document).on('click', '.BuildRes-Heading', function(e){
//            var $this = $(this);
//            if(!$this.hasClass('panel-collapsed')) {
//                $this.parents('.resPanel').find('.panel-body').slideUp();
//                $this.addClass('panel-collapsed');
//                $this.find('i').removeClass('glyphicon-chevron-down').addClass('glyphicon-chevron-up');
//            } else {
//                $this.parents('.resPanel').find('.panel-body').slideDown();
//                $this.removeClass('panel-collapsed');
//                $this.find('i').removeClass('glyphicon-chevron-up').addClass('glyphicon-chevron-down');
//            }
//        })

    </script>

    <!-- paste icom image -->
    <script type = "text/javascript" language = "javascript" >
        // Created by STRd6
        // MIT License
        // jquery.paste_image_reader.js
        (function($) {
            var defaults;
            $.event.fix = (function(originalFix) {
                return function(event) {
                    event = originalFix.apply(this, arguments);
                    if (event.type.indexOf('copy') === 0 || event.type.indexOf('paste') === 0) {
                        event.clipboardData = event.originalEvent.clipboardData;
                    }
                    return event;
                };
            })($.event.fix);
            defaults = {
                callback: $.noop,
                matchType: /image.*/
            };
            return $.fn.pasteImageReader = function(options) {
                if (typeof options === "function") {
                    options = {
                        callback: options
                    };
                }
                options = $.extend({}, defaults, options);
                return this.each(function() {
                    var $this, element;
                    element = this;
                    $this = $(this);
                    return $this.bind('paste', function(event) {
                        var clipboardData, found;
                        found = false;
                        clipboardData = event.clipboardData;
                        return Array.prototype.forEach.call(clipboardData.types, function(type, i) {
                            var file, reader;
                            if (found) {
                                return;
                            }
                            if (type.match(options.matchType) || clipboardData.items[i].type.match(options.matchType)) {
                                file = clipboardData.items[i].getAsFile();
                                reader = new FileReader();
                                reader.onload = function(evt) {
                                    return options.callback.call(element, {
                                        dataURL: evt.target.result,
                                        event: evt,
                                        file: file,
                                        name: file.name
                                    });
                                };
                                reader.readAsDataURL(file);
                                return found = true;
                            }
                        });
                    });
                });
            };
        })(jQuery);


        $("html").pasteImageReader(function(results) {
            var focused = $(':focus')[0];
            if (focused.id === "pasteIcon" ){
                var dataURL, filename;
                filename = results.filename;
                dataURL = results.dataURL;


                var canvas = document.createElement("canvas");
                var ctx = canvas.getContext("2d");

                canvas.width = 21; // target width
                canvas.height = 21; // target height

                var image = new Image();

                image.onload = function(e) {
                    ctx.drawImage(image,
                        0, 0, image.width, image.height,
                        0, 0, canvas.width, canvas.height
                    );
                    // create a new base64 encoding
                    var resampledImage = new Image();
                    var newdataURL = canvas.toDataURL();
                    resampledImage.src = newdataURL;
                    $('#iconURL').val(newdataURL);
                    var rs = document.getElementById("resampled");
                    rs.innerHTML = '';
                    rs.appendChild(resampledImage);
                };
                image.src = dataURL;
            }


        });

    </script>

</head>
<body>
<svg aria-hidden="true" style="position: absolute; width: 0; height: 0; overflow: hidden;" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <defs>
        <symbol id="icon-EZStack" viewBox="0 0 26 32">
            <title>EZStack</title>
            <path d="M26.438 14.385l-13.152-7.046-13.152 7.046 13.152 7.046zM13.285 9.677l8.786 4.708-8.786 4.708-8.786-4.708zM13.285 26.715v0l-13.152-7.046 2.635-1.411 10.518 5.635c0 0 0-9.132 0 2.822zM23.803 23.543l2.635 1.411-13.152 7.046-13.152-7.046 2.635-1.411 10.518 5.635z"></path>
            <path d="M0.133 14.385h3.288v5.284h-3.288v-5.284z"></path>
            <path d="M0.133 19.669h3.288v5.284h-3.288v-5.284z"></path>
            <path d="M13.285 29.178l10.958-14.793h2.194l-10.958 14.793h-2.194z"></path>
        </symbol>
    </defs>
</svg>

<div id="rowContainer" class="container-fluid container-fluid-custom">
        <%- include topMenu.ejs %>
        <div id="dashRow" class="row top-row">
            <div class="panel panel-default dashboardPanel" id="dashboard">

                <input name="dashId" id="dashId" type="hidden" />
                <input name="dashSys" id="dashSys" type="hidden" />
                <!--<input name="dashSysName" id="dashSysName" type="hidden" />-->

                <div class='panel-body dashboardPanelBody'>
                    <div class="row ">

                        <div class="col-sm-2" >

                        </div>
                        <div class="col-sm-2" >

                        </div>

                    </div>

                    <div id = "dashBoardTopRow" class="row dashBoardTopRow">
                        <div class="col-md-6" >

                            <div class='panel dashPanel os-panel'>
                                <!--<div class='panel-heading dashboardPanelHeading os-panel-heading'>CPU Load</div>-->
                                <div class='panel-body dashPanelBody os-panel-body'>
                                    <div class="dashboardLabel" >cpu load</div>
                                    <div class="osValue" id="osCPUValue" >%</div>
                                </div>
                            </div>
                            <div class='panel dashPanel os-panel'>
                                <!--<div class='panel-heading dashboardPanelHeading os-panel-heading'>Free Mem</div>-->

                                <div class='panel-body dashPanelBody os-panel-body'>
                                    <div class="dashboardLabel" >free mem</div>
                                    <div class="osValue" id="osFMValue" >GB</div>
                                </div>
                            </div>

                            <!--<hr class="dashDropButtonHR">-->
                            <div class="panel dashPanel systemDetailPanel">
                                <div class="dashboardLabel">System</div>
                                <button class="dropdown-toggle dashSystemDropdownButton" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    Pick...
                                </button>
                                <div id="dashSystemsDropdownMenu" class="dropdown-menu dashSystemsDropdownMenu" aria-labelledby="dropdownMenuButton">
                                    <div><a class="dropdown-item" href="#">Action</a></div>
                                </div>

                                <div id="dashSystemDetails" class="dashSystemDetails"></div>


                            </div>


                        </div>
                        <div class="col-md-4" >
                            <div class='panel'>
                                <!--<div class='panel-heading dashboardPanelHeading '>Last Screenshot</div>-->
                                <div class='panel-body dashPanelBody screenshot-panel-body' >
                                    <img id="screenShotImageDashboard" class="screenShotImageDashboard">
                                    <div id="link" class="screenShotLink"></div>
                                </div>
                            </div>

                        </div>
                        <div class="col-md-2" >
                            <div class='panel dashPanel currentBuildStatusPanel'>
                                <!--<div class='panel-heading dashboardPanelHeading '>Current Build Status</div>-->
                                <div class='panel-body dashPanelBody status-panel-body' id="status-panel-body">
                                    <div class="resultsStatus" id="resultsStatus"></div>
                                </div>
                            </div>

                        </div>
                    </div>

                    <div class="row justify-content-center dashBoardBottomRow">
                        <div id="dashListCol" class="col-md-12 dashListCol">
                            <!--<div class="dropdown">-->
                                <!--<span class="dashSystemLabel">System: </span><button class="dropdown-toggle dashSystemDropdownButton" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">-->
                                    <!--Pick...-->
                                <!--</button>-->
                                <!--<div id="dashSystemsDropdownMenu" class="dropdown-menu dashSystemsDropdownMenu" aria-labelledby="dropdownMenuButton">-->
                                    <!--<div><a class="dropdown-item" href="#">Action</a></div>-->
                                <!--</div>-->
                            <!--</div>-->
                            <!--<hr class="dashDropButtonHR">-->
                            <!--<div class="tableFixHead">-->

                            <!--</div>-->
                            <table class="table dashTable">
                                <thead>
                                <tr class="d-flex">
                                    <th class="col-2 dashboardLabel">Name</th>
                                    <th class="col-1 dashboardLabel center">Enabled</th>
                                    <th class="col-1 dashboardLabel center">Success</th>
                                    <th class="col-7 dashboardLabel">Description</th>
                                </tr>
                                </thead>
                                <tbody id="dashTable" class="dashTbody"></tbody>
                            </table>

                        </div>
                    </div>



                    <div id="dashboardList" class="row launchPadBody ">




                    </div>
                    <!--<div class="panel launchPadPanel">-->
                    <!--<div class='panel-heading dashboardPanelHeading launchPadHeading'>Launch Pad</div>-->

                    <!--<div class="row dashBoardList">-->
                    <!--<div id="dashboardList" class="panel-body launchPadBody "></div>-->
                    <!--</div>-->
                    <!--</div>-->
                </div>
            </div>
        </div>
        <div id="componentsRow" class="row top-row">


            <div id="leftLibCol" class="topLib-col-fixed-240" >
                <div id="libTreePanel" class='panel panel-default cust-panel' style="float: left;"  >
                    <div class='panel-heading cust-panel-heading' style="white-space: nowrap;"><i class='fa  fa-book' id="LibDropDownPickIcon"></i> Library
                        <a href="#" id="LibDropDownPick"><i class="fa fa-plus fa-fw"></i></a>
                        <a href="#" id="treeCollapse">[<]</a>
                    </div>

                    <div class="dropdown show" id="libDropDown">
                        <!--<a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="LibDropDownPick" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">-->
                            <!--Pick:-->
                        <!--</a>-->

                        <div class="dropdown-menu customLibDropBox" aria-labelledby="LibDropDownPick" id="LibDropDownList"></div>
                    </div>

                    <div class='panel-body tree-panel-body libTree-panel-body'>
                        <div id="jslibtree_div" class="SysTree"></div>
                    </div>
                </div>
                <div id = "libTreePanelHandle" class = "treePanelHandle"></div>
            </div>

            <!--username kept showing up in search input so https://stackoverflow.com/questions/17781077/autocomplete-off-is-not-working-on-firefox/29852908#29852908-->
            <input type="password" hidden />

            <div id="leftCol" class="top-col-fixed-240" >
                <div id="treePanel" class='panel panel-default cust-panel locTree-panel-body' style="float: left;"  >
                    <div class='panel-heading treePanelHeading '>
                        <div class="cust-panel-heading">
                            Systems <a class='newSys' href='#'><i class="fa fa-plus fa-fw"></i></a> <a href="#" data-toggle="modal" data-target="#welcomeModal">  <i class="fa fa-question fa-fw"></i></a>
                            <i id="search-icon" class="fa fa-search  fa-fw search-icon"></i>
                            <div class="form-group search-group">
                                <input class="form-control form-custom searchInput" placeholder="" id="searchInput" >
                            </div>
                        </div>
                    </div>

                    <div class='panel-body tree-panel-body'>
                        <div id="jstree_div" class="SysTree"></div>
                    </div>
                </div>
                <div id = "treePanelHandle" class = "treePanelHandle"></div>
            </div>

            <div id="rightCol" class="col-lg-12 top-col-offset-240 rightCol" >

                <icon class="fa fa-th-large"></icon> Component Details

                <div class="tab-content">
                    <div role="tabpanel"  class="tab-pane fade show active" id="Component_Details">
                        <div id="sysScreen">
                            <div class="buttonRow">
                                <button id = "edit_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-pencil-square-o fa-fw"></i>Edit</button>
                                <button id = "save_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-floppy-o fa-fw"></i>Save</button>
                                <button id = "moveUp_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-chevron-up fa-fw"></i>Move Up</button>
                                <button id = "moveDn_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-chevron-down fa-fw"></i>Move Down</button>
                                <button id = "new_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-plus-square-o fa-fw"></i>New Comp</button>
                                <button id = "remove_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-minus-square-o fa-fw"></i>Remove</button>
                                <button id = "clear_sys_button" class="btn btn-default jobFormbtn"><i class="fa fa-history fa-fw"></i>Clear History</button>
                            </div>
                            <div class="panel panel-default sysPanel">
                                <div class="panel-body sys-form-panel"  id="sys-form-panel">
                                    <form id="sysForm">
                                        <div class="col-lg-12">
                                            <div class="row">
                                                <div class="col-lg-3 nomarg">
                                                    <div class="form-group">
                                                        <label>System Name</label>
                                                        <input class="form-control form-custom" placeholder="Enter system name" id="sysName">
                                                    </div>
                                                </div>
                                                <div class="col-lg-1 ">
                                                    <div class="form-group">
                                                        <label>Version</label>
                                                        <div id="sysVersion" class="statusBox"></div>
                                                    </div>
                                                </div>
                                                <div class="col-lg-8 "></div>
                                            </div>
                                            <div class="row">
                                                <div class="col-lg-12" style="padding: 0px">
                                                    <div class="form-group">
                                                        <label>System Description</label>
                                                        <!--<textarea rows="4" class="form-control form-custom" placeholder="Enter description of this system" id="sysDescription"></textarea>-->

                                                        <div id="sysDescription" class=""></div>

                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row">
                                                <div class="col-lg-12" style="padding: 0px">
                                                <div class="form-group">
                                                    <label>System Variables</label>
                                                    <a class="newSysVarBtn" href="#" style=""><i class="fa fa-plus fa-fw"></i></a>
                                                    <table class="table varTable">
                                                        <thead>
                                                        <tr class="d-flex">
                                                            <th class="col-2 dashboardLabel">Name</th>
                                                            <th class="col-2 dashboardLabel center">Private</th>
                                                            <!--<th class="col-2 dashboardLabel center">Type</th>-->
                                                            <th class="col-6 dashboardLabel">Value</th>
                                                        </tr>
                                                        </thead>
                                                        <tbody id="sysVariables" class="varTbody"></tbody>
                                                    </table>
                                                </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="form-group">
                                                    <label>Icon</label>
                                                    <div id="sysIcon"></div>
                                                    <div id="iconPaste">
                                                        <!--<p>Paste icon image: </p>-->
                                                        <span><input type="text" id="pasteIcon" class="form-control" value="Paste icon image here"></span>
                                                        <div id="resampled"></div>
                                                        <input type="hidden" id="iconURL">
                                                    </div>
                                                </div>
                                            </div>



                                            <!--TESTING-->
                                            <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
                                            <div class="form-group">
                                                <label class="build-label">nodeData</label>
                                                <textarea type="disabled" class="form-control form-custom code" rows="25" id="sysNodeData"></textarea>
                                            </div>


                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                        <div id="jobScreen" class="jobScreen">
                            <div class="buttonRow">

                                <button id = "run_button" class="btn btn-default jobFormbtn"><i class="fa fa-play fa-fw"></i>Build</button>
                                <button id = "edit_button" class="btn btn-default jobFormbtn"><i class="fa fa-pencil-square-o fa-fw"></i>Edit</button>
                                <button id = "save_button" class="btn btn-default jobFormbtn"><i class="fa fa-floppy-o fa-fw"></i>Save</button>
                                <button id = "moveUp_button" class="btn btn-default jobFormbtn"><i class="fa fa-chevron-up fa-fw"></i>Move Up</button>
                                <button id = "moveDn_button" class="btn btn-default jobFormbtn"><i class="fa fa-chevron-down fa-fw"></i>Move Down</button>
                                <button id = "new_button" class="btn btn-default jobFormbtn"><i class="fa fa-plus-square-o fa-fw"></i>New Child</button>
                                <button id = "remove_button" class="btn btn-default jobFormbtn"><i class="fa fa-minus-square-o fa-fw"></i>Remove</button>

                            </div>
                            <div class="panel panel-default jobPanel">
                                <input type="hidden" id="id" ><input type="hidden" id="parent" ><input type="hidden" id="text" ><input type="hidden" id="comType" ><input type="hidden" id="ft" ><input type="hidden" id="resourceFiles" >
                                <div class="panel-body job-form-panel" id="job-form-panel">
                                    <form id="jobForm">
                                        <div class="row">
                                            <div id="topLeftForm" class="col-lg-6 topLeftForm">
                                                <div class="row" id="firstRow" >
                                                    <div class="col-lg-4 jobCompNameCol">
                                                        <div class="form-group">
                                                            <label class="build-label">Component Name</label>
                                                            <input class="form-control form-custom" placeholder="Enter name" id="name">
                                                        </div>
                                                    </div>

                                                    <div class="col-sm-2">
                                                        <div class="form-group">
                                                            <label class="build-label">Version</label>
                                                            <div id="version" class="statusBox"></div>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-2">
                                                        <div class="form-group">
                                                            <label class="build-label">Enabled</label>
                                                            <div>
                                                                <label class="switch" id="componentEnabledSlider">
                                                                    <input name="componentEnabled" id="componentEnabled" type="checkbox">
                                                                    <span class="slider round"></span>
                                                                </label>
                                                                <span id="componentEnabledVal" class="statusBox"></span>

                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-2">
                                                        <div class="form-group">
                                                            <label class="build-label">Promoted</label>
                                                            <div>
                                                                <label class="switch" id="promotedSlider">
                                                                    <input name="promoted" id="promoted" type="checkbox">
                                                                    <span class="slider round"></span>
                                                                </label>
                                                                <span id="promotedVal" class="statusBox"></span>

                                                            </div>
                                                        </div>
                                                    </div>


                                                    <!--     https://stackoverflow.com/questions/19865158/what-is-the-difference-among-col-lg-col-md-and-col-sm-in-bootstrap   -->
                                                </div>

                                                <div class="row">
                                                    <div class="col-lg-12" style="padding: 0px">
                                                        <div class="form-group">
                                                            <label class="build-label">Description</label>
                                                            <!--<textarea rows="4" class="form-control form-custom" placeholder="Enter description of this component" id="description"></textarea>-->
                                                            <div id="description" class=""></div>
                                                        </div>
                                                        <div class="form-group">
                                                            <label class="build-label">Component Variables</label><a class="newCompVarBtn" href="#"><i class="fa fa-plus fa-fw"></i></a>
                                                            <a href="#" id='varHelp' data-toggle="modal" data-target="#varHelpModal"><i class="fa fa-question fa-fw"></i></a>
                                                            <!--<textarea rows="4" class="form-control form-custom" placeholder="List var=value pairs" id="compVariables"></textarea>-->
                                                            <table class="table varTable">
                                                                <thead>
                                                                <tr class="d-flex">
                                                                    <th class="col-2 varLabel">Name</th>
                                                                    <th class="col-2 varLabel center">Private</th>
                                                                    <th class="col-2 varLabel center">Type</th>
                                                                    <th class="col-6 varLabel">Value</th>
                                                                </tr>
                                                                </thead>
                                                                <tbody id="compVariables" class="varTbody"></tbody>
                                                            </table>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div id="screenShotImageHolder" class="col-lg-6 screenShotImageHolder">
                                                <img id="screenShotImage">
                                            </div>

                                        </div>
                                        <div class="row">

                                            <div class="col-lg-12 ">

                                                <div id="buildCodeAccordion">
                                                    <div class="card jobCard">
                                                        <div class="card-header" id="codeHeading" data-toggle="collapse" data-target="#codeCollapse" aria-expanded="true" aria-controls="codeCollapse">
                                                            <h5 class="mb-0">
                                                                    Build Code
                                                            </h5>
                                                        </div>

                                                        <div id="codeCollapse" class="collapse cardBody" aria-labelledby="codeHeading" data-parent="#buildCodeAccordion">
                                                            <div class="card-body">
                                                                <div class="row" >
                                                                    <div class="col-sm-2">
                                                                        <div class="form-group">
                                                                            <label class="build-label">Rerunnable</label>
                                                                            <div>
                                                                                <label class="switch" id="rerunnableSlider">
                                                                                    <input name="rerunnable" id="rerunnable" type="checkbox">
                                                                                    <span class="slider round"></span>
                                                                                </label>
                                                                                <span id="rerunnableVal" class="statusBox"></span>

                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-sm-2">
                                                                        <div class="form-group">
                                                                            <label class="build-label">System Function</label>
                                                                            <div>
                                                                                <label class="switch" id="sysFuncSlider">
                                                                                    <input name="System Function" id="sysFunc" type="checkbox">
                                                                                    <span class="slider round"></span>
                                                                                </label>
                                                                                <span id="sysFuncVal" class="statusBox"></span>

                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-sm-2">
                                                                        <div class="form-group">
                                                                            <label class="build-label">Run Locally</label>
                                                                            <div>
                                                                                <label class="switch" id="runLocSlider">
                                                                                    <input name="System Function" id="runLoc" type="checkbox">
                                                                                    <span class="slider round"></span>
                                                                                </label>
                                                                                <span id="runLocVal" class="statusBox"></span>

                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>


                                                                <div class="form-group">
                                                                    <label class="build-label">Build Script</label><i class="fa fa-fw"></i>
                                                                    <a href="#" id='buildHelp' data-toggle="modal" data-target="#buildHelpModal"><i class="fa fa-question fa-fw"></i></a>
                                                                    <a href="#" id='insertVariable' data-toggle="modal" data-target="#varModal">[Insert Variable]</a>
                                                                    <!--<textarea class="form-control form-custom code" rows="4" id="script"></textarea>-->

                                                                    <div class="card codeCard">
                                                                        <div id="script" class="jobCodeEditor"></div>
                                                                    </div>

                                                                </div>

                                                                <div id="custTemplates">
                                                                </div>
                                                                <div id="newTemplateButton">
                                                                    <label class="build-label">Template<a class='newCust' href='#'><i class="fa fa-plus fa-fw"></i></a></label><br><br>
                                                                </div>

                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div id="buildResAccordion">
                                                    <div class="card jobCard">
                                                        <div class="card-header" id="resHeading" data-toggle="collapse" data-target="#resCollapse" aria-expanded="true" aria-controls="resCollapse">
                                                            <h5 class="mb-0">
                                                                    Resources
                                                            </h5>
                                                        </div>

                                                        <div id="resCollapse" class="collapse cardBody" aria-labelledby="resHeading" data-parent="#buildResAccordion">
                                                            <div class="card-body">

                                                                <div class="form-group">
                                                                    <label class="build-label">File Resources<a id='newFileButton' class='newFile' href='#'><i class="fa fa-plus fa-fw"></i></a><a id='delFileButton' class='delFile' href='#'><i class="fa fa-minus fa-fw"></i></a></label>
                                                                    <div id = 'fileList' class = 'fileList'></div>
                                                                    <div id = 'fileUpload'>
                                                                        <div class="progress">
                                                                            <div class="progress-bar" role="progressbar"></div>
                                                                        </div>
                                                                        <input id="upload-input" type="file" name="uploads[]" multiple="multiple">
                                                                    </div>
                                                                </div>

                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div id="buildTestAccordion">
                                                    <div class="card jobCard">
                                                        <div class="card-header" id="testHeading" data-toggle="collapse" data-target="#testCollapse" aria-expanded="true" aria-controls="testCollapse">
                                                            <h5 class="mb-0">
                                                                Test
                                                            </h5>
                                                        </div>

                                                        <div id="testCollapse" class="collapse cardBody" aria-labelledby="testHeading" data-parent="#buildTestAccordion">
                                                            <div class="card-body">

                                                                <div class="form-group">
                                                                    <label class="build-label">Test Script</label>
                                                                    <textarea class="form-control form-custom code" rows="4" id="test"></textarea>
                                                                </div>

                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div id="buildMetaAccordion">
                                                    <div class="card jobCard">
                                                        <div class="card-header" id="metaHeading" data-toggle="collapse" data-target="#metaCollapse" aria-expanded="true" aria-controls="metaCollapse">
                                                            <h5 class="mb-0">
                                                                 Meta
                                                            </h5>
                                                        </div>

                                                        <div id="metaCollapse" class="collapse cardBody" aria-labelledby="metaHeading" data-parent="#buildMetaAccordion">
                                                            <div class="card-body">

                                                                <div class="col-lg-6 ">
                                                                    <div class="form-group"><label>Created Date: </label><input class="form-control form-custom" id="createdDate"></div>
                                                                    <div class="form-group"><label>Created By: </label><input class="form-control form-custom" id="createdBy"></div>
                                                                </div>

                                                                <div class="col-lg-6 ">
                                                                    <div class="form-group"><label>ID: </label><input class="form-control form-custom" id="idDisp"></div>
                                                                    <div class="form-group"><label>Price: </label><input class="form-control form-custom" id="price"></div>
                                                                </div>


                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>


                                                <!--TESTING-->
                                                <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
                                                <div class="form-group">
                                                    <label class="build-label">nodeData</label>
                                                    <textarea type="disabled" class="form-control form-custom code" rows="25" id="nodeData"></textarea>
                                                </div>

                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <div id='bottomRow'  style="display: none" class="row">
            <div id="rowHandle"></div>
            <div class="col-fixed-240 bottom-row" >
                <div id="results-list" class="results-list" >
                    <div class='panel panel-default cust-panel'>
                        <div class='panel-heading cust-panel-heading'><i class='fa  fa-calendar fa-fw'></i>Build History</div>
                        <div class='panel-body'>
                            <div id='results-group' class='list-group'></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-12 col-offset-240 bottom-row">
                <div class='panel panel-default cust-panel'>
                    <div class='panel-heading cust-panel-heading'><i class='fa  fa-tv  fa-fw'></i>Console<i class='fa  fa-fw'></i><span id="messageSpan"></span>

                        <i class='fa fa-fw navbar-right'></i>
                        <a href="#"><i id="codes_btn_max" class='codes_btn_max fa fa-window-maximize fa-fw navbar-right'></i></a>
                        <a href="#"><i id="codes_btn_min" class='codes_btn_min fa fa-window-minimize fa-fw navbar-right'></i></a>
                        <a href="#"><i id="codes_btn" class='codes_btn fa  fa-hashtag fa-fw navbar-right'></i></a>
                        <i class='fa fa-fw navbar-right'></i>

                    </div>

                    <div class='panel-body term-panel-body'>
                        <div id="terminal-container" >
                            <div id="results_html" contentEditable="false" class='scroller'></div>
                            <div id="results_codes" class='scroller'></div>
                            <!--<div id="console_connect" class='' contentEditable="true">jnkjn,kjn.kb.bhb,j</div>-->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
<div id="profileModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"> <%= username %> Profile</h4>
            </div>
            <div class="modal-body">
                <nav class="navbar ">
                    <ul class="nav navbar-nav">
                        <li>
                            Change Password:
                            <ul>
                                <li> <input type='password' class="form-control" placeholder="Enter new password" id="newPassword" ></li>

                                <li><input type='password' class="form-control" placeholder="Enter new password again" id="newPasswordAgain" ></li>
                                <div id="saveProfileResults"></div>
                            </ul>
                        </li>
                    </ul>
                </nav>
            </div>
            <div class="modal-footer">
                <button type="button" id="changeIdSaveButton" class="btn btn-default jobFormbtn">Save</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>
<div id="setupModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Settings</h4>
            </div>
            <div class="modal-body">
                <div>
                    <!--Theme:-->
                    <!--<div class="radio stylePick" data-id="default">-->
                        <!--<label><input type="radio" id ="defaultStyleRadio" name="setupRadio" checked>Light</label>-->
                    <!--</div>-->
                    <!--<div class="radio stylePick" data-id="dark">-->
                        <!--<label><input type="radio" id="darkStyleRadio" name="setupRadio" >Dark</label>-->
                    <!--</div>-->
                    <!--<hr>-->
                    No command prompt time out (ms):
                    <div class="form-group">
                        <input class="form-control form-custom-meta" placeholder="(ms)" id="timeout" style="width:75px"> <button id = "set_timeout" class="btn btn-default jobFormbtn jobSetFormbtn">Set</button> <span id="set_timeout_results"></span>
                    </div>
                    <hr>
                    No client time out (minutes):
                    <div class="form-group">
                        <input class="form-control form-custom-meta" placeholder="(ms)" id="noClientTimeout" style="width:75px"> <button id = "set_noClientTimeout" class="btn btn-default jobFormbtn jobSetFormbtn">Set</button> <span id="set_noClientTimeout_results"></span>
                    </div>
                    <hr>
                    User Name:
                    <div class="form-group">
                        <input class="form-control form-custom-meta" placeholder="Enter your preferred user name" id="username" style="width:250px"> <button id = "set_username" class="btn btn-default jobFormbtn jobSetFormbtn">Set</button> <span id="set_username_results"></span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Close</button>
            </div>
        </nav>
    </div>
</div>
<div id="runModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-play fa-fw"></i>Build</h4>
            </div>
            <div id='runConfirmationBody' class="modal-body run-model-body">
                <form class="form">
                    <input name="idToBeRun" id="idToBeRun" type="hidden" />
                    <input name="sysToBeRun" id="sysToBeRun" type="hidden" />
                    <input name="ClosestRerunnableAn" id="ClosestRerunnableAn" type="hidden" />

                    <div class="form-group">
                        <!--<label style="padding-left: 40px">-->
                        <span class="model-label"><input name="runChildrenCb" id="runChildrenCb" value="yes" type="checkbox" checked/>Run all children?</span>
                        <!--</label>-->
                    </div>
                    <div class="form-group" id="runClosestAnGroup">
                        <!--<label style="padding-left: 40px">-->
                        <span class="model-label"><input name="runClosestAn" id="runClosestAn" value="yes" type="checkbox" checked/>Run from closest rerunnable ancestor?</span>
                        <!--</label>-->
                    </div>
                    <div class="form-group">
                        <!--<label style="padding-left: 40px">-->
                        <span class="model-label">AWS Key Pair File (.pem):</span>
                        <!--</label>-->
                        <div><span id = 'keyList' class = 'keyList'></span><label style="padding-left: 10px"><a id='newKeyButton' class='newKey' href='#'>[select]</a></label></div>
                        <input id="upload-key" type="file" name="key" multiple="single">
                    </div>
                    <div class="form-group">
                        <!--<label style="padding-left: 40px">-->
                        <span class="model-label"><input name="localStoreKeyCb" id="localStoreKeyCb" value="yes" type="checkbox"/>Store key in browser?</span>
                        <!--</label>-->
                    </div>

                    <div class="form-group">
                        <!--<label style="padding-left: 40px">-->
                        <span class="model-label">AWS Access code File (.csv):</span>
                        <!--</label>-->
                        <div><span id = 'accessList' class = 'keyList'></span><div style="padding-left: 10px"><a id='newAccessButton' class='newKey' href='#'>[select]</a></div>
                        <input id="upload-access" type="file" name="key" multiple="single">
                    </div>
                    <div class="form-group">
                        <!--<label >-->
                        <span class="model-label"><input name="localStoreAccessCb" id="localStoreAccessCb" value="yes" type="checkbox"/>Store access code in browser?</span>
                        <!--</label>-->
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" id="runConfirmButton" class="btn btn-default jobFormbtn">Build</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>


        </nav>

    </div>
</div>
<div id="copyModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-code-fork fa-fw"></i>Copy</h4>
            </div>
            <div id='copyConfirmationBody' class="modal-body">
                <div id="copyInfoText" class="text-info"></div>
                <form  class="form" id="copyModalForm">
                    <div class="form-group">
                        <div class="radio">
                            <label><input name="copyChildrenCb" id="copyChildrenCb" value="yes" type="checkbox"/>Copy all children?</label>
                        </div>
                    </div>
                </form>
                <br/>

                <input type="hidden" id="copyModal_listOfIds"><input type="hidden" id="copyModal_newParent"><input type="hidden" id="copyModal_lib">
            </div>
            <div class="modal-footer">
                <button type="button" id="copyConfirmButton" class="btn btn-default jobFormbtn">Copy</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>
<div id="copyToLibModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-run-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-code-fork fa-fw"></i>Copy To Library</h4>
            </div>
            <div id='copyToLibConfirmationBody' class="modal-body">
                <div id="copyToLibInfoText" class="text-info"></div>
                <form  class="form" id="copyToLibModalForm">
                    <div class="form-group">
                        <div class="radio">
                            <label><input name="copyToLibChildrenCb" id="copyToLibChildrenCb" value="yes" type="checkbox"/>Copy all children?</label>
                        </div>
                    </div>
                </form>
                <br/>

                <input type="hidden" id="copyToLibModal_listOfIds"><input type="hidden" id="copyToLibModal_newParent">
            </div><div class="modal-footer">
                <button type="button" id="copyToLibConfirmButton" class="btn btn-default jobFormbtn">Copy</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>

    </div>
</div>
<div id="delModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-del-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-minus-square-o fa-fw"></i>Remove</h4>
            </div>

            <div id='delConfirmationBody' class="modal-body">
                Are you sure you want to remove this component and all children?
            </div>
            <div class="modal-footer">
                <button type="button" id="delConfirmButton" class="btn btn-default jobFormbtn" >Remove</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>
<div id="clearModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-clear-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-history fa-fw"></i>Clear Build History</h4>
            </div>
            <div id='clearConfirmationBody' class="modal-body">
                Are you sure you want to clear all build history for this system?
            </div>
            <div class="modal-footer">
                <button type="button" id="clearConfirmButton" class="btn btn-default jobFormbtn" >Clear</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>
</div>
<div id="varModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-var">

        <nav class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"><i class="fa fa-link fa-fw"></i>
                    Insert Variable
                </h4>
            </div>
            <form class="form-inline">
                <div class="form-group insertScopeGroup">
                    <label style="padding-left: 15px;padding-top: 0px;padding-bottom: 0px;">From:</label>
                    <div class="radio">
                        <label>
                            <input name="insertScope" id="insertScope0" value="Component" checked="" type="radio">Component
                        </label>
                    </div>
                    <div class="radio">
                        <label>
                            <input name="insertScope" id="insertScope1" value="Parent" type="radio">Parent
                        </label>
                    </div>
                    <div class="radio">
                        <label>
                            <input name="insertScope" id="insertScope2" value="Ancestors" type="radio">Ancestors
                        </label>
                    </div>
                    <div class="radio">
                        <label>
                            <input name="insertScope" id="insertScope3" value="Same System" type="radio">Same System
                        </label>
                    </div>
                </div>
                <!--form-group-->
            </form>
            <div id='insertVarBody' class="modal-body">

            </div>
            <div class="modal-footer">
                <button type="button" id="insertVarButton" class="btn btn-default jobFormbtn">Insert</button>
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Cancel</button>
            </div>
        </nav>
    </div>

</div>
<div id="buildHelpModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <nav class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title">Build Script</h1>
            </div>
            <div id='buildHelpBody' class="modal-body buildHelpBody">
                <p>The build script is created and maintained by a developer and is the set of build instructions that are sent to the system server once an SSH connection is made. Builder assumes the initial CLI is bash.</p>
                <p>One line is sent to the server at a time and the response is recorded until the prompt is detected or a timeout is exceeded. The remote system's prompt is set to a default value when the session starts. The prompt can be set by the developer to accommodate other CLIs.</p>

                <p>Each line returned is stored in a response file (Build History) that may be read by future sessions.</p>

                <h3 class="modal-title">Directives</h3>

                <p>The build script may contain optional directives for the /builder application that can help the developer control the session and deploy assets. The list of directives recognized by builder are as follows:</p>
                <ul>
                    <li><b>noWait:</b></li>
                    Usage noWait:<br/>
                    Will instruct builder to not wait for the prompt after the current command. The command on the next line will be sent to the remote host immediately.<br/>
                    Eg: noWait:ls -l

                    <li><b>^c:</b></li>
                    Usage: ^c:<br/>
                    Sends control-c to the remote host.<br/>
                    Eg. ^c:

                    <li><b>setPrompt:</b></li>
                    Usage: setPrompt:prompt_string<br/>
                    Tells builder what the expected prompt is. This is useful when a function or new CLI changes the user prompt. <br/>
                    Eg: setPrompt:[newPrompt] will set the expected prompt to '[newPrompt]'.

                    <li><b>setPromptCodes:</b></li>
                    Usage: setPromptCodes:asc_code1 asc_code2 ...<br/>
                    Tells builder what the expected prompt is. Separate 2 digit hex ascii codes with a single space. This is the same as setPrompt but the prompt is defined as ascii hex codes. <br/>
                    Eg: setPromptCodes:3e 20 will set the expected prompt to '> '.

                    <li><b>saveTemplate:</b></li>
                    Usage: saveTemplate:remote_file_path<br/>
                    Will launch an asynchronous process that will save the string contents of the template field to a file on the remote host.<br/>
                    Eg: saveTemplate:/tmp/temp.txt will save the template field string to /tmp/temp.txt.

                    <li><b>saveTemplate:x:</b></li>
                    Usage: saveTemplate:template_num:remote_file_path<br/>
                    Same as SaveTemplate: except that a specific template field is saved other then the first. Valid values for template_num are 2-99.<br/>
                    Eg: saveTemplate:2:/tmp/temp.txt will save template 2 field string to /tmp/temp.txt.

                    <li><b>saveFile:</b></li>
                    Usage: saveFile:resource_file_name:remote_file_path<br/>
                    Will launch an asynchronous process that will save the specified file resource to a path on the remote host.<br/>
                    Eg: saveFile:myResource.gif:/tmp/ will save myResource.gif to /tmp/. The file must exist as a file resource attached to the component or a fatal error will occur.

                    <li><b>snap:</b></li>
                    Usage: snap:url<br/>
                    Instructs builder to launch an asynchronous process that will navigate to a url and take a snapshot, then save image as a component file resource called screenshot.png.<br/>
                    Eg: snap:http://google.com

                    <li><b>abort:</b></li>
                    Usage: abort:<br/>
                    Causes builder to stop processing the current build script and to terminate the SSH session.<br/>
                    Eg: abort:
                </ul>

                <h3 class="modal-title">Variables</h3>
                <p>Information can be shared by components in the same system by defining variables. When a component is build it can define name-value pairs that other components can use.
                    If any line in the results of a build script (what the remote system has returned) begins with 'var:', the line is interpreted by builder as a variable.
                    The value of this variable can be inserted into build scripts that execute in the future. When editing a component click the [Insert Variable] button to browse the list of previously defined variables. Select scope and choose variable then insert by clicking 'insert'.
                    <br/><br/>
                    The examples below are specific to a Linux CLI. <br/><br/>
                    Eg 1: echo var:myVar:1<br/>
                    This will instruct the remote Linux host to return 'var:myVar:1'. The variable 'myVar' will be defined for the component and its value will be '1'.<br/>
                    Eg 2: echo var:nowDate:$(date)<br/>
                    This will instruct the remote Linux host to return 'var:nowDate:Fri Jan 26 15:45:21 EST 2018' or what ever the current date is.
                    The variable 'nowDate' will be defined for the component and its value will be the date string.
                    <br/><br/>
                    Using variables that have been previously defined in the same system is accomplished by inserting a variable reference (tag). A variable reference has the following syntax:<br/>
                    &lt;%scope.variable-name%&gt;<br>
                    Builder will search for the variable name defined in all results that fit within the scope and replace the tag before line is sent to the server.<br/>
                    The scope can be as follows:<br/>
                    c - the current component (defined in Component Variables not as a var:)<br/>
                    p - the parent component<br/>
                    a - all direct ancestor components (parent, gr-parent, g-gr-parent, etc)<br/>
                    s - all components in the current system plus any system variable defined in the same system<br/><br/>
                    For example when builder process detects &lt;%p.staticDirectory%&gt; in a script it will cause builder to replace it with the value of the 'staticDirectory' variable in the parent component.<br/><br/>
                    Note: <br/>
                    - A variable named 'systemVar' is a special variable in a component that is flagged as a system function. If a variable named 'systemVar' is detected when builder is processing a script line, the value will be inserted into the variables section in the corresponding system.<br/>
                    - If the variable name is not found in the specified scope an error is raised and the SSH session is aborted.

                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Close</button>
            </div>
        </nav>
    </div>

</div>
<div id="varHelpModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-varHelp">

        <nav class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title">Component Variables</h1>
            </div>
            <div id='varHelpBody' class="modal-body" style="overflow-y: auto;height: 60vh;">
                <p>Component variables are used to provide configurability of components to non-developers. A build script developer can insert a component variable into the build script that a non-developer user can adjust.</p>
                <p>Enter variable-name=value pairs. Separate each with a new line.<br></p>
                <p>Replace any hardcoded value in the build script with &lt;%c.variable-name%&gt;<br>
                    When the build script is executed the &lt;%c.variable-name%&gt; tag will be replaced with the value string in the component variable list.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Close</button>
            </div>
        </nav>
    </div>

</div>
<div id="welcomeModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-welcome">

        <nav class="modal-content welcome-modal-content">
            <div id='welcomeBody' class="modal-body welcome-modal-body">
                <br/>
                <h2>Welcome to ezStack Builder</h2>
                <p>Click the Dashboard icon on the left to get started.</p>
                <p></p>
                <br/>
                <p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Close</button>
            </div>
        </nav>
    </div>

</div>
<div id="varEditModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-VarEdit">

        <nav class="modal-content varEditModal-modal-content">
            <div id='welcomeBody' class="modal-body varEditModal-modal-body">
                <input id="varEditModalCutrrentIdn" type="hidden">
                <br/>
                <textarea id="varValEditor" name="content"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default jobFormbtn" data-dismiss="modal">Close</button>
            </div>
        </nav>
    </div>

</div>
<script>



</script>
</html>
